In archive libArduino_Uno.a:

malloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007ec  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000009fb  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 00000274  00000000  00000000  0000121b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.__malloc_heap_end 00000002  00000000  00000000  0000148f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.__malloc_heap_start 00000002  00000000  00000000  00001491  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.__malloc_margin 00000002  00000000  00000000  00001493  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000012  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY

Disassembly of section .text.avr-libc:

00000000 <malloc>:
struct __freelist *__flp;

ATTRIBUTE_CLIB_SECTION
void *
malloc(size_t len)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
   8:	82 30       	cpi	r24, 0x02	; 2
   a:	91 05       	cpc	r25, r1
   c:	00 f4       	brcc	.+0      	; 0xe <malloc+0xe>
		len = sizeof(struct __freelist) - sizeof(size_t);
   e:	82 e0       	ldi	r24, 0x02	; 2
  10:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
  12:	e0 91 00 00 	lds	r30, 0x0000
  16:	f0 91 00 00 	lds	r31, 0x0000
  1a:	20 e0       	ldi	r18, 0x00	; 0
  1c:	30 e0       	ldi	r19, 0x00	; 0
  1e:	c0 e0       	ldi	r28, 0x00	; 0
  20:	d0 e0       	ldi	r29, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <malloc+0x24>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
  24:	40 81       	ld	r20, Z
  26:	51 81       	ldd	r21, Z+1	; 0x01
  28:	48 17       	cp	r20, r24
  2a:	59 07       	cpc	r21, r25
  2c:	00 f0       	brcs	.+0      	; 0x2e <malloc+0x2e>
			continue;
		if (fp1->sz == len) {
  2e:	48 17       	cp	r20, r24
  30:	59 07       	cpc	r21, r25
  32:	01 f4       	brne	.+0      	; 0x34 <malloc+0x34>
  34:	82 81       	ldd	r24, Z+2	; 0x02
  36:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
  38:	20 97       	sbiw	r28, 0x00	; 0
  3a:	01 f0       	breq	.+0      	; 0x3c <malloc+0x3c>
				fp2->nx = fp1->nx;
  3c:	9b 83       	std	Y+3, r25	; 0x03
  3e:	8a 83       	std	Y+2, r24	; 0x02
  40:	00 c0       	rjmp	.+0      	; 0x42 <malloc+0x42>
			else
				__flp = fp1->nx;
  42:	90 93 00 00 	sts	0x0000, r25
  46:	80 93 00 00 	sts	0x0000, r24
  4a:	00 c0       	rjmp	.+0      	; 0x4c <malloc+0x4c>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
  4c:	21 15       	cp	r18, r1
  4e:	31 05       	cpc	r19, r1
  50:	01 f0       	breq	.+0      	; 0x52 <malloc+0x52>
  52:	42 17       	cp	r20, r18
  54:	53 07       	cpc	r21, r19
  56:	00 f0       	brcs	.+0      	; 0x58 <malloc+0x58>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
  58:	a9 01       	movw	r20, r18
  5a:	00 c0       	rjmp	.+0      	; 0x5c <malloc+0x5c>
			else
				__flp = fp1->nx;
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
  5c:	be 01       	movw	r22, r28
  5e:	df 01       	movw	r26, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
  60:	02 81       	ldd	r16, Z+2	; 0x02
  62:	13 81       	ldd	r17, Z+3	; 0x03
  64:	ef 01       	movw	r28, r30
  66:	9a 01       	movw	r18, r20
  68:	f8 01       	movw	r30, r16
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
  6a:	30 97       	sbiw	r30, 0x00	; 0
  6c:	01 f4       	brne	.+0      	; 0x6e <malloc+0x6e>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
  6e:	21 15       	cp	r18, r1
  70:	31 05       	cpc	r19, r1
  72:	01 f0       	breq	.+0      	; 0x74 <malloc+0x74>
		if (s - len < sizeof(struct __freelist)) {
  74:	28 1b       	sub	r18, r24
  76:	39 0b       	sbc	r19, r25
  78:	24 30       	cpi	r18, 0x04	; 4
  7a:	31 05       	cpc	r19, r1
  7c:	00 f4       	brcc	.+0      	; 0x7e <malloc+0x7e>
  7e:	12 96       	adiw	r26, 0x02	; 2
  80:	8d 91       	ld	r24, X+
  82:	9c 91       	ld	r25, X
  84:	13 97       	sbiw	r26, 0x03	; 3
			/* Disconnect it from freelist and return it. */
			if (sfp2)
  86:	61 15       	cp	r22, r1
  88:	71 05       	cpc	r23, r1
  8a:	01 f0       	breq	.+0      	; 0x8c <malloc+0x8c>
				sfp2->nx = sfp1->nx;
  8c:	fb 01       	movw	r30, r22
  8e:	93 83       	std	Z+3, r25	; 0x03
  90:	82 83       	std	Z+2, r24	; 0x02
  92:	00 c0       	rjmp	.+0      	; 0x94 <malloc+0x94>
			else
				__flp = sfp1->nx;
  94:	90 93 00 00 	sts	0x0000, r25
  98:	80 93 00 00 	sts	0x0000, r24
			return &(sfp1->nx);
  9c:	fd 01       	movw	r30, r26
  9e:	32 96       	adiw	r30, 0x02	; 2
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <malloc+0xa2>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
  a2:	fd 01       	movw	r30, r26
  a4:	e2 0f       	add	r30, r18
  a6:	f3 1f       	adc	r31, r19
  a8:	81 93       	st	Z+, r24
  aa:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
  ac:	22 50       	subi	r18, 0x02	; 2
  ae:	31 09       	sbc	r19, r1
  b0:	2d 93       	st	X+, r18
  b2:	3c 93       	st	X, r19
		return &(sfp2->nx);
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <malloc+0xb6>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
  b6:	20 91 00 00 	lds	r18, 0x0000
  ba:	30 91 00 00 	lds	r19, 0x0000
  be:	23 2b       	or	r18, r19
  c0:	01 f4       	brne	.+0      	; 0xc2 <malloc+0xc2>
		__brkval = __malloc_heap_start;
  c2:	20 91 00 00 	lds	r18, 0x0000
  c6:	30 91 00 00 	lds	r19, 0x0000
  ca:	30 93 00 00 	sts	0x0000, r19
  ce:	20 93 00 00 	sts	0x0000, r18
	cp = __malloc_heap_end;
  d2:	20 91 00 00 	lds	r18, 0x0000
  d6:	30 91 00 00 	lds	r19, 0x0000
	if (cp == 0)
  da:	21 15       	cp	r18, r1
  dc:	31 05       	cpc	r19, r1
  de:	01 f4       	brne	.+0      	; 0xe0 <malloc+0xe0>
		cp = STACK_POINTER() - __malloc_margin;
  e0:	2d b7       	in	r18, 0x3d	; 61
  e2:	3e b7       	in	r19, 0x3e	; 62
  e4:	40 91 00 00 	lds	r20, 0x0000
  e8:	50 91 00 00 	lds	r21, 0x0000
  ec:	24 1b       	sub	r18, r20
  ee:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
  f0:	e0 91 00 00 	lds	r30, 0x0000
  f4:	f0 91 00 00 	lds	r31, 0x0000
  f8:	e2 17       	cp	r30, r18
  fa:	f3 07       	cpc	r31, r19
  fc:	00 f4       	brcc	.+0      	; 0xfe <malloc+0xfe>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
  fe:	2e 1b       	sub	r18, r30
 100:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
 102:	28 17       	cp	r18, r24
 104:	39 07       	cpc	r19, r25
 106:	00 f0       	brcs	.+0      	; 0x108 <malloc+0x108>
 108:	ac 01       	movw	r20, r24
 10a:	4e 5f       	subi	r20, 0xFE	; 254
 10c:	5f 4f       	sbci	r21, 0xFF	; 255
 10e:	24 17       	cp	r18, r20
 110:	35 07       	cpc	r19, r21
 112:	00 f0       	brcs	.+0      	; 0x114 <malloc+0x114>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
 114:	4e 0f       	add	r20, r30
 116:	5f 1f       	adc	r21, r31
 118:	50 93 00 00 	sts	0x0000, r21
 11c:	40 93 00 00 	sts	0x0000, r20
		fp1->sz = len;
 120:	81 93       	st	Z+, r24
 122:	91 93       	st	Z+, r25
		return &(fp1->nx);
 124:	00 c0       	rjmp	.+0      	; 0x126 <malloc+0x126>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
 12a:	cf 01       	movw	r24, r30
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <free>:


ATTRIBUTE_CLIB_SECTION
void
free(void *p)
{
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	01 f4       	brne	.+0      	; 0x146 <free+0x10>
 146:	00 c0       	rjmp	.+0      	; 0x148 <free+0x12>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
 148:	dc 01       	movw	r26, r24
 14a:	12 97       	sbiw	r26, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
 14c:	13 96       	adiw	r26, 0x03	; 3
 14e:	1c 92       	st	X, r1
 150:	1e 92       	st	-X, r1
 152:	12 97       	sbiw	r26, 0x02	; 2
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
 154:	e0 90 00 00 	lds	r14, 0x0000
 158:	f0 90 00 00 	lds	r15, 0x0000
 15c:	e1 14       	cp	r14, r1
 15e:	f1 04       	cpc	r15, r1
 160:	01 f4       	brne	.+0      	; 0x162 <free+0x2c>
		if ((char *)p + fpnew->sz == __brkval)
 162:	2d 91       	ld	r18, X+
 164:	3c 91       	ld	r19, X
 166:	11 97       	sbiw	r26, 0x01	; 1
 168:	28 0f       	add	r18, r24
 16a:	39 1f       	adc	r19, r25
 16c:	80 91 00 00 	lds	r24, 0x0000
 170:	90 91 00 00 	lds	r25, 0x0000
 174:	82 17       	cp	r24, r18
 176:	93 07       	cpc	r25, r19
 178:	01 f4       	brne	.+0      	; 0x17a <free+0x44>
			__brkval = cpnew;
 17a:	b0 93 00 00 	sts	0x0000, r27
 17e:	a0 93 00 00 	sts	0x0000, r26
 182:	00 c0       	rjmp	.+0      	; 0x184 <free+0x4e>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
 184:	e7 01       	movw	r28, r14
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	00 c0       	rjmp	.+0      	; 0x18c <free+0x56>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
 18c:	ea 01       	movw	r28, r20
		if (fp1 < fpnew)
 18e:	ca 17       	cp	r28, r26
 190:	db 07       	cpc	r29, r27
 192:	00 f4       	brcc	.+0      	; 0x194 <free+0x5e>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
 194:	4a 81       	ldd	r20, Y+2	; 0x02
 196:	5b 81       	ldd	r21, Y+3	; 0x03
 198:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
 19a:	41 15       	cp	r20, r1
 19c:	51 05       	cpc	r21, r1
 19e:	01 f4       	brne	.+0      	; 0x1a0 <free+0x6a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <free+0x6c>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
 1a2:	bc 01       	movw	r22, r24
 1a4:	62 50       	subi	r22, 0x02	; 2
 1a6:	71 09       	sbc	r23, r1
 1a8:	fb 01       	movw	r30, r22
 1aa:	d3 83       	std	Z+3, r29	; 0x03
 1ac:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
 1ae:	00 81       	ld	r16, Z
 1b0:	11 81       	ldd	r17, Z+1	; 0x01
 1b2:	ac 01       	movw	r20, r24
 1b4:	40 0f       	add	r20, r16
 1b6:	51 1f       	adc	r21, r17
 1b8:	4c 17       	cp	r20, r28
 1ba:	5d 07       	cpc	r21, r29
 1bc:	01 f4       	brne	.+0      	; 0x1be <free+0x88>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
 1be:	48 81       	ld	r20, Y
 1c0:	59 81       	ldd	r21, Y+1	; 0x01
 1c2:	40 0f       	add	r20, r16
 1c4:	51 1f       	adc	r21, r17
 1c6:	4e 5f       	subi	r20, 0xFE	; 254
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ca:	51 83       	std	Z+1, r21	; 0x01
 1cc:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
 1ce:	4a 81       	ldd	r20, Y+2	; 0x02
 1d0:	5b 81       	ldd	r21, Y+3	; 0x03
 1d2:	53 83       	std	Z+3, r21	; 0x03
 1d4:	42 83       	std	Z+2, r20	; 0x02
		}
		if (fp2 == 0) {
 1d6:	21 15       	cp	r18, r1
 1d8:	31 05       	cpc	r19, r1
 1da:	01 f4       	brne	.+0      	; 0x1dc <free+0xa6>
			/* new head of freelist */
			__flp = fpnew;
 1dc:	b0 93 00 00 	sts	0x0000, r27
 1e0:	a0 93 00 00 	sts	0x0000, r26
			return;
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <free+0xb0>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
 1e6:	f9 01       	movw	r30, r18
 1e8:	b3 83       	std	Z+3, r27	; 0x03
 1ea:	a2 83       	std	Z+2, r26	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
 1ec:	e9 01       	movw	r28, r18
 1ee:	69 91       	ld	r22, Y+
 1f0:	79 91       	ld	r23, Y+
 1f2:	c6 0f       	add	r28, r22
 1f4:	d7 1f       	adc	r29, r23
 1f6:	ac 17       	cp	r26, r28
 1f8:	bd 07       	cpc	r27, r29
 1fa:	01 f4       	brne	.+0      	; 0x1fc <free+0xc6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
 1fc:	dc 01       	movw	r26, r24
 1fe:	5e 91       	ld	r21, -X
 200:	4e 91       	ld	r20, -X
 202:	46 0f       	add	r20, r22
 204:	57 1f       	adc	r21, r23
 206:	4e 5f       	subi	r20, 0xFE	; 254
 208:	5f 4f       	sbci	r21, 0xFF	; 255
 20a:	51 83       	std	Z+1, r21	; 0x01
 20c:	40 83       	st	Z, r20
		fp2->nx = fpnew->nx;
 20e:	12 96       	adiw	r26, 0x02	; 2
 210:	8d 91       	ld	r24, X+
 212:	9c 91       	ld	r25, X
 214:	13 97       	sbiw	r26, 0x03	; 3
 216:	93 83       	std	Z+3, r25	; 0x03
 218:	82 83       	std	Z+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
 21a:	a0 e0       	ldi	r26, 0x00	; 0
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	00 c0       	rjmp	.+0      	; 0x220 <free+0xea>
 220:	d7 01       	movw	r26, r14
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
 222:	7c 01       	movw	r14, r24
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
 224:	f7 01       	movw	r30, r14
 226:	82 81       	ldd	r24, Z+2	; 0x02
 228:	93 81       	ldd	r25, Z+3	; 0x03
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	01 f4       	brne	.+0      	; 0x22e <free+0xf8>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
 22e:	c7 01       	movw	r24, r14
 230:	02 96       	adiw	r24, 0x02	; 2
	if (cp2 + fp1->sz == __brkval) {
 232:	20 81       	ld	r18, Z
 234:	31 81       	ldd	r19, Z+1	; 0x01
 236:	82 0f       	add	r24, r18
 238:	93 1f       	adc	r25, r19
 23a:	20 91 00 00 	lds	r18, 0x0000
 23e:	30 91 00 00 	lds	r19, 0x0000
 242:	28 17       	cp	r18, r24
 244:	39 07       	cpc	r19, r25
 246:	01 f4       	brne	.+0      	; 0x248 <free+0x112>
		if (fp2 == NULL)
 248:	10 97       	sbiw	r26, 0x00	; 0
 24a:	01 f4       	brne	.+0      	; 0x24c <free+0x116>
			/* Freelist is empty now. */
			__flp = NULL;
 24c:	10 92 00 00 	sts	0x0000, r1
 250:	10 92 00 00 	sts	0x0000, r1
 254:	00 c0       	rjmp	.+0      	; 0x256 <free+0x120>
		else
			fp2->nx = NULL;
 256:	13 96       	adiw	r26, 0x03	; 3
 258:	1c 92       	st	X, r1
 25a:	1e 92       	st	-X, r1
 25c:	12 97       	sbiw	r26, 0x02	; 2
		__brkval = cp2 - sizeof(size_t);
 25e:	f0 92 00 00 	sts	0x0000, r15
 262:	e0 92 00 00 	sts	0x0000, r14
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	08 95       	ret

realloc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000630  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000968  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.avr-libc 000001c8  00000000  00000000  00000fcc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY

Disassembly of section .text.avr-libc:

00000000 <realloc>:
#include <avr/io.h>

ATTRIBUTE_CLIB_SECTION
void *
realloc(void *ptr, size_t len)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	ec 01       	movw	r28, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f4       	brne	.+0      	; 0x1e <realloc+0x1e>
		return malloc(len);
  1e:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	1f 91       	pop	r17
  26:	0f 91       	pop	r16
  28:	ff 90       	pop	r15
  2a:	ef 90       	pop	r14
  2c:	df 90       	pop	r13
  2e:	cf 90       	pop	r12
  30:	bf 90       	pop	r11
  32:	af 90       	pop	r10
  34:	9f 90       	pop	r9
  36:	8f 90       	pop	r8
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
  38:	0c 94 00 00 	jmp	0	; 0x0 <realloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
  3c:	dc 01       	movw	r26, r24
  3e:	a6 0f       	add	r26, r22
  40:	b7 1f       	adc	r27, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
  42:	fc 01       	movw	r30, r24
  44:	32 97       	sbiw	r30, 0x02	; 2
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
  46:	ae 17       	cp	r26, r30
  48:	bf 07       	cpc	r27, r31
  4a:	00 f4       	brcc	.+0      	; 0x4c <realloc+0x4c>
		/* Pointer wrapped across top of RAM, fail. */
		return 0;
  4c:	c0 e0       	ldi	r28, 0x00	; 0
  4e:	d0 e0       	ldi	r29, 0x00	; 0
  50:	00 c0       	rjmp	.+0      	; 0x52 <realloc+0x52>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
  52:	00 81       	ld	r16, Z
  54:	11 81       	ldd	r17, Z+1	; 0x01
  56:	06 17       	cp	r16, r22
  58:	17 07       	cpc	r17, r23
  5a:	00 f0       	brcs	.+0      	; 0x5c <realloc+0x5c>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  5c:	05 30       	cpi	r16, 0x05	; 5
  5e:	11 05       	cpc	r17, r1
  60:	00 f4       	brcc	.+0      	; 0x62 <realloc+0x62>
  62:	00 c0       	rjmp	.+0      	; 0x64 <realloc+0x64>
		    len > fp1->sz - sizeof(struct __freelist))
  64:	c8 01       	movw	r24, r16
  66:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
  68:	86 17       	cp	r24, r22
  6a:	97 07       	cpc	r25, r23
  6c:	00 f4       	brcc	.+0      	; 0x6e <realloc+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <realloc+0x70>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
  70:	02 50       	subi	r16, 0x02	; 2
  72:	11 09       	sbc	r17, r1
  74:	06 1b       	sub	r16, r22
  76:	17 0b       	sbc	r17, r23
  78:	0d 93       	st	X+, r16
  7a:	1d 93       	st	X+, r17
		fp1->sz = len;
  7c:	71 83       	std	Z+1, r23	; 0x01
  7e:	60 83       	st	Z, r22
		free(&(fp2->nx));
  80:	cd 01       	movw	r24, r26
  82:	0e 94 00 00 	call	0	; 0x0 <realloc>
		return ptr;
  86:	00 c0       	rjmp	.+0      	; 0x88 <realloc+0x88>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
  88:	7b 01       	movw	r14, r22
  8a:	e0 1a       	sub	r14, r16
  8c:	f1 0a       	sbc	r15, r17
	cp = (char *)ptr + fp1->sz;
  8e:	5c 01       	movw	r10, r24
  90:	a0 0e       	add	r10, r16
  92:	b1 1e       	adc	r11, r17
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
  94:	e0 91 00 00 	lds	r30, 0x0000
  98:	f0 91 00 00 	lds	r31, 0x0000
  9c:	81 2c       	mov	r8, r1
  9e:	91 2c       	mov	r9, r1
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <realloc+0xa6>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
  a6:	ea 15       	cp	r30, r10
  a8:	fb 05       	cpc	r31, r11
  aa:	01 f4       	brne	.+0      	; 0xac <realloc+0xac>
  ac:	40 81       	ld	r20, Z
  ae:	51 81       	ldd	r21, Z+1	; 0x01
  b0:	6a 01       	movw	r12, r20
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	c2 0e       	add	r12, r18
  b6:	d1 1c       	adc	r13, r1
  b8:	ce 14       	cp	r12, r14
  ba:	df 04       	cpc	r13, r15
  bc:	00 f0       	brcs	.+0      	; 0xbe <realloc+0xbe>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
  be:	9a 01       	movw	r18, r20
  c0:	2e 19       	sub	r18, r14
  c2:	3f 09       	sbc	r19, r15
  c4:	79 01       	movw	r14, r18
  c6:	69 01       	movw	r12, r18
  c8:	32 e0       	ldi	r19, 0x02	; 2
  ca:	c3 0e       	add	r12, r19
  cc:	d1 1c       	adc	r13, r1
  ce:	2e ef       	ldi	r18, 0xFE	; 254
  d0:	a2 2e       	mov	r10, r18
  d2:	bb 24       	eor	r11, r11
  d4:	ba 94       	dec	r11
  d6:	ac 0e       	add	r10, r28
  d8:	bd 1e       	adc	r11, r29
  da:	25 e0       	ldi	r18, 0x05	; 5
  dc:	c2 16       	cp	r12, r18
  de:	d1 04       	cpc	r13, r1
  e0:	00 f0       	brcs	.+0      	; 0xe2 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
  e2:	42 81       	ldd	r20, Z+2	; 0x02
  e4:	53 81       	ldd	r21, Z+3	; 0x03
  e6:	13 96       	adiw	r26, 0x03	; 3
  e8:	5c 93       	st	X, r21
  ea:	4e 93       	st	-X, r20
  ec:	12 97       	sbiw	r26, 0x02	; 2
				fp2->sz = fp3->sz - incr;
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	fc 92       	st	X, r15
  f2:	ee 92       	st	-X, r14
				fp1->sz = len;
  f4:	f5 01       	movw	r30, r10
  f6:	71 83       	std	Z+1, r23	; 0x01
  f8:	60 83       	st	Z, r22
  fa:	3a 2f       	mov	r19, r26
  fc:	2b 2f       	mov	r18, r27
  fe:	00 c0       	rjmp	.+0      	; 0x100 <realloc+0x100>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
 100:	0e 5f       	subi	r16, 0xFE	; 254
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	04 0f       	add	r16, r20
 106:	15 1f       	adc	r17, r21
 108:	d5 01       	movw	r26, r10
 10a:	0d 93       	st	X+, r16
 10c:	1c 93       	st	X, r17
				fp2 = fp3->nx;
 10e:	32 81       	ldd	r19, Z+2	; 0x02
 110:	23 81       	ldd	r18, Z+3	; 0x03
			}
			if (ofp3)
 112:	00 97       	sbiw	r24, 0x00	; 0
 114:	01 f0       	breq	.+0      	; 0x116 <realloc+0x116>
				ofp3->nx = fp2;
 116:	fc 01       	movw	r30, r24
 118:	32 83       	std	Z+2, r19	; 0x02
 11a:	23 83       	std	Z+3, r18	; 0x03
 11c:	00 c0       	rjmp	.+0      	; 0x11e <realloc+0x11e>
			else
				__flp = fp2;
 11e:	30 93 00 00 	sts	0x0000, r19
 122:	20 93 00 00 	sts	0x0000, r18
 126:	00 c0       	rjmp	.+0      	; 0x128 <realloc+0x128>
		}
		/*
		 * Find the largest chunk on the freelist while
		 * walking it.
		 */
		if (fp3->sz > s)
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	88 16       	cp	r8, r24
 12e:	99 06       	cpc	r9, r25
 130:	00 f4       	brcc	.+0      	; 0x132 <realloc+0x132>
 132:	4c 01       	movw	r8, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
 134:	52 81       	ldd	r21, Z+2	; 0x02
 136:	43 81       	ldd	r20, Z+3	; 0x03
 138:	cf 01       	movw	r24, r30
 13a:	e5 2f       	mov	r30, r21
 13c:	f4 2f       	mov	r31, r20
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
 13e:	30 97       	sbiw	r30, 0x00	; 0
 140:	01 f0       	breq	.+0      	; 0x142 <realloc+0x142>
 142:	00 c0       	rjmp	.+0      	; 0x144 <realloc+0x144>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
 144:	80 91 00 00 	lds	r24, 0x0000
 148:	90 91 00 00 	lds	r25, 0x0000
 14c:	8a 15       	cp	r24, r10
 14e:	9b 05       	cpc	r25, r11
 150:	01 f4       	brne	.+0      	; 0x152 <realloc+0x152>
 152:	86 16       	cp	r8, r22
 154:	97 06       	cpc	r9, r23
 156:	00 f4       	brcc	.+0      	; 0x158 <realloc+0x158>
		cp1 = __malloc_heap_end;
 158:	80 91 00 00 	lds	r24, 0x0000
 15c:	90 91 00 00 	lds	r25, 0x0000
		cp = (char *)ptr + len;
		if (cp1 == 0)
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	01 f4       	brne	.+0      	; 0x164 <realloc+0x164>
			cp1 = STACK_POINTER() - __malloc_margin;
 164:	8d b7       	in	r24, 0x3d	; 61
 166:	9e b7       	in	r25, 0x3e	; 62
 168:	20 91 00 00 	lds	r18, 0x0000
 16c:	30 91 00 00 	lds	r19, 0x0000
 170:	82 1b       	sub	r24, r18
 172:	93 0b       	sbc	r25, r19
		if (cp < cp1) {
 174:	a8 17       	cp	r26, r24
 176:	b9 07       	cpc	r27, r25
 178:	00 f0       	brcs	.+0      	; 0x17a <realloc+0x17a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <realloc+0x17c>
			__brkval = cp;
 17c:	b0 93 00 00 	sts	0x0000, r27
 180:	a0 93 00 00 	sts	0x0000, r26
			fp1->sz = len;
 184:	fe 01       	movw	r30, r28
 186:	32 97       	sbiw	r30, 0x02	; 2
 188:	71 83       	std	Z+1, r23	; 0x01
 18a:	60 83       	st	Z, r22
			return ptr;
 18c:	00 c0       	rjmp	.+0      	; 0x18e <realloc+0x18e>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
 18e:	cb 01       	movw	r24, r22
 190:	0e 94 00 00 	call	0	; 0x0 <realloc>
 194:	7c 01       	movw	r14, r24
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	01 f4       	brne	.+0      	; 0x19a <realloc+0x19a>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <realloc+0x19c>
		return 0;
	memcpy(memp, ptr, fp1->sz);
 19c:	a8 01       	movw	r20, r16
 19e:	be 01       	movw	r22, r28
 1a0:	0e 94 00 00 	call	0	; 0x0 <realloc>
	free(ptr);
 1a4:	ce 01       	movw	r24, r28
 1a6:	0e 94 00 00 	call	0	; 0x0 <realloc>
	return memp;
 1aa:	e7 01       	movw	r28, r14
}
 1ac:	ce 01       	movw	r24, r28
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	9f 90       	pop	r9
 1c4:	8f 90       	pop	r8
 1c6:	08 95       	ret

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000004c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002bc7  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  000030c3  2**0
                  CONTENTS, READONLY

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000004c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002bc7  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  000030c3  2**0
                  CONTENTS, READONLY

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         00001038  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      00003a4d  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZN14HardwareSerial9availableEv 00000026  00000000  00000000  00004ac9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN14HardwareSerial4peekEv 00000038  00000000  00000000  00004aef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14HardwareSerial4readEv 00000048  00000000  00000000  00004b27  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN14HardwareSerial5flushEv 00000016  00000000  00000000  00004b6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14HardwareSerial5writeEh 0000007a  00000000  00000000  00004b85  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._Z11serialEventv 00000002  00000000  00000000  00004bff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.__vector_18 00000074  00000000  00000000  00004c01  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._Z14serialEventRunv 00000012  00000000  00000000  00004c75  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.__vector_19 00000076  00000000  00000000  00004c87  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh 00000088  00000000  00000000  00004cfd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14HardwareSerial5beginEm 00000102  00000000  00000000  00004d85  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14HardwareSerial5beginEmh 0000010c  00000000  00000000  00004e87  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14HardwareSerial3endEv 000000ae  00000000  00000000  00004f93  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14HardwareSerialcvbEv 00000004  00000000  00000000  00005041  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.startup._GLOBAL__sub_I_rx_buffer 000000ac  00000000  00000000  00005045  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .ctors        00000002  00000000  00000000  000050f2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 23 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  000050f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 24 .bss.Serial   00000022  00000000  00000000  00005104  2**0
                  ALLOC
 25 .bss.tx_buffer 00000044  00000000  00000000  00005104  2**0
                  ALLOC
 26 .bss.rx_buffer 00000044  00000000  00000000  00005104  2**0
                  ALLOC
 27 .rodata._ZTV6Stream 00000010  00000000  00000000  00005104  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 28 .comment      00000012  00000000  00000000  00005114  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   0:	fc 01       	movw	r30, r24
   2:	84 85       	ldd	r24, Z+12	; 0x0c
   4:	95 85       	ldd	r25, Z+13	; 0x0d
   6:	fc 01       	movw	r30, r24
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	20 81       	ld	r18, Z
   e:	31 81       	ldd	r19, Z+1	; 0x01
  10:	fc 01       	movw	r30, r24
  12:	ee 5b       	subi	r30, 0xBE	; 190
  14:	ff 4f       	sbci	r31, 0xFF	; 255
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	28 1b       	sub	r18, r24
  1c:	39 0b       	sbc	r19, r25
  1e:	2f 73       	andi	r18, 0x3F	; 63

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	33 27       	eor	r19, r19
  22:	c9 01       	movw	r24, r18
  24:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:
   0:	fc 01       	movw	r30, r24
   2:	84 85       	ldd	r24, Z+12	; 0x0c
   4:	95 85       	ldd	r25, Z+13	; 0x0d
   6:	fc 01       	movw	r30, r24
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	40 81       	ld	r20, Z
   e:	51 81       	ldd	r21, Z+1	; 0x01
  10:	fc 01       	movw	r30, r24
  12:	ee 5b       	subi	r30, 0xBE	; 190
  14:	ff 4f       	sbci	r31, 0xFF	; 255
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	42 17       	cp	r20, r18
  1c:	53 07       	cpc	r21, r19
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN14HardwareSerial4peekEv+0x20>
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	e8 0f       	add	r30, r24
  28:	f9 1f       	adc	r31, r25
  2a:	20 81       	ld	r18, Z
{
  _rx_buffer = rx_buffer;
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN14HardwareSerial4peekEv+0x30>
  30:	2f ef       	ldi	r18, 0xFF	; 255
  32:	3f ef       	ldi	r19, 0xFF	; 255
  34:	c9 01       	movw	r24, r18
  36:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:
   0:	fc 01       	movw	r30, r24
   2:	84 85       	ldd	r24, Z+12	; 0x0c
   4:	95 85       	ldd	r25, Z+13	; 0x0d
   6:	fc 01       	movw	r30, r24
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	40 81       	ld	r20, Z
   e:	51 81       	ldd	r21, Z+1	; 0x01
  10:	fc 01       	movw	r30, r24
  12:	ee 5b       	subi	r30, 0xBE	; 190
  14:	ff 4f       	sbci	r31, 0xFF	; 255
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	42 17       	cp	r20, r18
  1c:	53 07       	cpc	r21, r19
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN14HardwareSerial4readEv+0x20>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	a0 81       	ld	r26, Z
  22:	b1 81       	ldd	r27, Z+1	; 0x01
  24:	a8 0f       	add	r26, r24
  26:	b9 1f       	adc	r27, r25
  28:	8c 91       	ld	r24, X
  2a:	20 81       	ld	r18, Z
{
  _rx_buffer = rx_buffer;
  2c:	31 81       	ldd	r19, Z+1	; 0x01
  2e:	2f 5f       	subi	r18, 0xFF	; 255
  30:	3f 4f       	sbci	r19, 0xFF	; 255
  32:	2f 73       	andi	r18, 0x3F	; 63
  34:	33 27       	eor	r19, r19
  36:	31 83       	std	Z+1, r19	; 0x01
  _tx_buffer = tx_buffer;
  38:	20 83       	st	Z, r18
  3a:	28 2f       	mov	r18, r24
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14HardwareSerial4readEv+0x40>
  40:	2f ef       	ldi	r18, 0xFF	; 255
  42:	3f ef       	ldi	r19, 0xFF	; 255
  _ubrrh = ubrrh;
  44:	c9 01       	movw	r24, r18
  46:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:
   0:	fc 01       	movw	r30, r24
   2:	81 a1       	ldd	r24, Z+33	; 0x21
   4:	88 23       	and	r24, r24
   6:	01 f0       	breq	.+0      	; 0x8 <_ZN14HardwareSerial5flushEv+0x8>
   8:	a4 89       	ldd	r26, Z+20	; 0x14
   a:	b5 89       	ldd	r27, Z+21	; 0x15
   c:	8c 91       	ld	r24, X
   e:	86 ff       	sbrs	r24, 6
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN14HardwareSerial5flushEv+0x12>
  12:	11 a2       	std	Z+33, r1	; 0x21
  14:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	26 85       	ldd	r18, Z+14	; 0x0e
   8:	37 85       	ldd	r19, Z+15	; 0x0f
   a:	d9 01       	movw	r26, r18
   c:	a0 5c       	subi	r26, 0xC0	; 192
   e:	bf 4f       	sbci	r27, 0xFF	; 255
  10:	8d 91       	ld	r24, X+
  12:	9c 91       	ld	r25, X
  14:	11 97       	sbiw	r26, 0x01	; 1
  16:	01 96       	adiw	r24, 0x01	; 1
  18:	8f 73       	andi	r24, 0x3F	; 63
  1a:	99 27       	eor	r25, r25
  1c:	e9 01       	movw	r28, r18
  1e:	ce 5b       	subi	r28, 0xBE	; 190

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	df 4f       	sbci	r29, 0xFF	; 255
  22:	48 81       	ld	r20, Y
  24:	59 81       	ldd	r21, Y+1	; 0x01
  26:	84 17       	cp	r24, r20
  28:	95 07       	cpc	r25, r21
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN14HardwareSerial5writeEh+0x2c>
{
  _rx_buffer = rx_buffer;
  2c:	0d 90       	ld	r0, X+
  2e:	bc 91       	ld	r27, X
  30:	a0 2d       	mov	r26, r0
  32:	a2 0f       	add	r26, r18
  34:	b3 1f       	adc	r27, r19
  36:	6c 93       	st	X, r22
  _tx_buffer = tx_buffer;
  38:	a6 85       	ldd	r26, Z+14	; 0x0e
  3a:	b7 85       	ldd	r27, Z+15	; 0x0f
  3c:	a0 5c       	subi	r26, 0xC0	; 192
  3e:	bf 4f       	sbci	r27, 0xFF	; 255
  40:	11 96       	adiw	r26, 0x01	; 1
  42:	9c 93       	st	X, r25
  _ubrrh = ubrrh;
  44:	8e 93       	st	-X, r24
  46:	a6 89       	ldd	r26, Z+22	; 0x16
  48:	b7 89       	ldd	r27, Z+23	; 0x17
  4a:	2c 91       	ld	r18, X
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	90 e0       	ldi	r25, 0x00	; 0
  _ubrrl = ubrrl;
  50:	07 8c       	ldd	r0, Z+31	; 0x1f
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN14HardwareSerial5writeEh+0x54>
  54:	88 0f       	add	r24, r24
  56:	99 1f       	adc	r25, r25
  58:	0a 94       	dec	r0
  5a:	02 f4       	brpl	.+0      	; 0x5c <_ZN14HardwareSerial5writeEh+0x5c>
  _ucsra = ucsra;
  5c:	28 2b       	or	r18, r24
  5e:	2c 93       	st	X, r18
  60:	81 e0       	ldi	r24, 0x01	; 1
  62:	81 a3       	std	Z+33, r24	; 0x21
  64:	04 88       	ldd	r0, Z+20	; 0x14
  66:	f5 89       	ldd	r31, Z+21	; 0x15
  _ucsrb = ucsrb;
  68:	e0 2d       	mov	r30, r0
  6a:	80 81       	ld	r24, Z
  6c:	80 64       	ori	r24, 0x40	; 64
  6e:	80 83       	st	Z, r24
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  _ucsrc = ucsrc;
  74:	df 91       	pop	r29
  76:	cf 91       	pop	r28
  78:	08 95       	ret

Disassembly of section .text._Z11serialEventv:

00000000 <_Z11serialEventv>:
   0:	08 95       	ret

Disassembly of section .text.__vector_18:

00000000 <__vector_18>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	8f 93       	push	r24
  12:	9f 93       	push	r25
  14:	ef 93       	push	r30
  16:	ff 93       	push	r31
  18:	80 91 c0 00 	lds	r24, 0x00C0
  1c:	82 fd       	sbrc	r24, 2
  1e:	00 c0       	rjmp	.+0      	; 0x20 <__vector_18+0x20>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	40 91 c6 00 	lds	r20, 0x00C6
  24:	80 91 00 00 	lds	r24, 0x0000
  28:	90 91 00 00 	lds	r25, 0x0000
{
  _rx_buffer = rx_buffer;
  2c:	01 96       	adiw	r24, 0x01	; 1
  2e:	8f 73       	andi	r24, 0x3F	; 63
  30:	99 27       	eor	r25, r25
  32:	20 91 00 00 	lds	r18, 0x0000
  36:	30 91 00 00 	lds	r19, 0x0000
  _tx_buffer = tx_buffer;
  3a:	82 17       	cp	r24, r18
  3c:	93 07       	cpc	r25, r19
  3e:	01 f0       	breq	.+0      	; 0x40 <__vector_18+0x40>
  40:	e0 91 00 00 	lds	r30, 0x0000
  _ubrrh = ubrrh;
  44:	f0 91 00 00 	lds	r31, 0x0000
  48:	e0 50       	subi	r30, 0x00	; 0
  4a:	f0 40       	sbci	r31, 0x00	; 0
  4c:	40 83       	st	Z, r20
  4e:	90 93 00 00 	sts	0x0000, r25
  _ubrrl = ubrrl;
  52:	80 93 00 00 	sts	0x0000, r24
  56:	00 c0       	rjmp	.+0      	; 0x58 <__vector_18+0x58>
  58:	80 91 c6 00 	lds	r24, 0x00C6
  _ucsra = ucsra;
  5c:	ff 91       	pop	r31
  5e:	ef 91       	pop	r30
  60:	9f 91       	pop	r25
  62:	8f 91       	pop	r24
  64:	4f 91       	pop	r20
  66:	3f 91       	pop	r19
  _ucsrb = ucsrb;
  68:	2f 91       	pop	r18
  6a:	0f 90       	pop	r0
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	0f 90       	pop	r0
  70:	1f 90       	pop	r1
  72:	18 95       	reti

Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
   8:	89 2b       	or	r24, r25
   a:	01 f0       	breq	.+0      	; 0xc <_Z14serialEventRunv+0xc>
   c:	0c 94 00 00 	jmp	0	; 0x0 <_Z14serialEventRunv>
  10:	08 95       	ret

Disassembly of section .text.__vector_19:

00000000 <__vector_19>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	ef 93       	push	r30
  14:	ff 93       	push	r31
  16:	20 91 00 00 	lds	r18, 0x0000
  1a:	30 91 00 00 	lds	r19, 0x0000
  1e:	80 91 00 00 	lds	r24, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  22:	90 91 00 00 	lds	r25, 0x0000
  26:	28 17       	cp	r18, r24
  28:	39 07       	cpc	r19, r25
  2a:	01 f4       	brne	.+0      	; 0x2c <__vector_19+0x2c>
{
  _rx_buffer = rx_buffer;
  2c:	80 91 c1 00 	lds	r24, 0x00C1
  30:	8f 7d       	andi	r24, 0xDF	; 223
  32:	80 93 c1 00 	sts	0x00C1, r24
  36:	00 c0       	rjmp	.+0      	; 0x38 <__vector_19+0x38>
  _tx_buffer = tx_buffer;
  38:	e0 91 00 00 	lds	r30, 0x0000
  3c:	f0 91 00 00 	lds	r31, 0x0000
  40:	e0 50       	subi	r30, 0x00	; 0
  42:	f0 40       	sbci	r31, 0x00	; 0
  _ubrrh = ubrrh;
  44:	20 81       	ld	r18, Z
  46:	80 91 00 00 	lds	r24, 0x0000
  4a:	90 91 00 00 	lds	r25, 0x0000
  4e:	01 96       	adiw	r24, 0x01	; 1
  _ubrrl = ubrrl;
  50:	8f 73       	andi	r24, 0x3F	; 63
  52:	99 27       	eor	r25, r25
  54:	90 93 00 00 	sts	0x0000, r25
  58:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
  5c:	20 93 c6 00 	sts	0x00C6, r18
  60:	ff 91       	pop	r31
  62:	ef 91       	pop	r30
  64:	9f 91       	pop	r25
  66:	8f 91       	pop	r24
  _ucsrb = ucsrb;
  68:	3f 91       	pop	r19
  6a:	2f 91       	pop	r18
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  _ucsrc = ucsrc;
  74:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	fc 01       	movw	r30, r24
  1e:	13 82       	std	Z+3, r1	; 0x03

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	12 82       	std	Z+2, r1	; 0x02
  22:	88 ee       	ldi	r24, 0xE8	; 232
  24:	93 e0       	ldi	r25, 0x03	; 3
  26:	a0 e0       	ldi	r26, 0x00	; 0
  28:	b0 e0       	ldi	r27, 0x00	; 0
  2a:	84 83       	std	Z+4, r24	; 0x04
{
  _rx_buffer = rx_buffer;
  2c:	95 83       	std	Z+5, r25	; 0x05
  2e:	a6 83       	std	Z+6, r26	; 0x06
  30:	b7 83       	std	Z+7, r27	; 0x07
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	91 83       	std	Z+1, r25	; 0x01
  _tx_buffer = tx_buffer;
  38:	80 83       	st	Z, r24
  3a:	75 87       	std	Z+13, r23	; 0x0d
  3c:	64 87       	std	Z+12, r22	; 0x0c
  3e:	57 87       	std	Z+15, r21	; 0x0f
  40:	46 87       	std	Z+14, r20	; 0x0e
  42:	31 8b       	std	Z+17, r19	; 0x11
  _ubrrh = ubrrh;
  44:	20 8b       	std	Z+16, r18	; 0x10
  46:	13 8b       	std	Z+19, r17	; 0x13
  48:	02 8b       	std	Z+18, r16	; 0x12
  4a:	f5 8a       	std	Z+21, r15	; 0x15
  4c:	e4 8a       	std	Z+20, r14	; 0x14
  4e:	d7 8a       	std	Z+23, r13	; 0x17
  _ubrrl = ubrrl;
  50:	c6 8a       	std	Z+22, r12	; 0x16
  52:	b1 8e       	std	Z+25, r11	; 0x19
  54:	a0 8e       	std	Z+24, r10	; 0x18
  56:	93 8e       	std	Z+27, r9	; 0x1b
  58:	82 8e       	std	Z+26, r8	; 0x1a
  5a:	8f 85       	ldd	r24, Y+15	; 0x0f
  _ucsra = ucsra;
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  5e:	88 89       	ldd	r24, Y+16	; 0x10
  60:	85 8f       	std	Z+29, r24	; 0x1d
  62:	89 89       	ldd	r24, Y+17	; 0x11
  64:	86 8f       	std	Z+30, r24	; 0x1e
  66:	8a 89       	ldd	r24, Y+18	; 0x12
  _ucsrb = ucsrb;
  68:	87 8f       	std	Z+31, r24	; 0x1f
  6a:	8b 89       	ldd	r24, Y+19	; 0x13
  6c:	80 a3       	std	Z+32, r24	; 0x20
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  _ucsrc = ucsrc;
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	bf 90       	pop	r11
  _udr = udr;
  80:	af 90       	pop	r10
  82:	9f 90       	pop	r9
  84:	8f 90       	pop	r8
  86:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

00000000 <_ZN14HardwareSerial5beginEm>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	6a 01       	movw	r12, r20
  10:	7b 01       	movw	r14, r22
  12:	41 15       	cp	r20, r1
  14:	81 ee       	ldi	r24, 0xE1	; 225
  16:	58 07       	cpc	r21, r24
  18:	61 05       	cpc	r22, r1
  1a:	71 05       	cpc	r23, r1
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN14HardwareSerial5beginEm+0x1e>
  1e:	ec 89       	ldd	r30, Y+20	; 0x14

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	fd 89       	ldd	r31, Y+21	; 0x15
  22:	81 e0       	ldi	r24, 0x01	; 1
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	08 a0       	ldd	r0, Y+32	; 0x20
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN14HardwareSerial5beginEm+0x2a>
  2a:	88 0f       	add	r24, r24
{
  _rx_buffer = rx_buffer;
  2c:	99 1f       	adc	r25, r25
  2e:	0a 94       	dec	r0
  30:	02 f4       	brpl	.+0      	; 0x32 <_ZN14HardwareSerial5beginEm+0x32>
  32:	80 83       	st	Z, r24
  34:	60 e0       	ldi	r22, 0x00	; 0
  36:	79 e0       	ldi	r23, 0x09	; 9
  _tx_buffer = tx_buffer;
  38:	8d e3       	ldi	r24, 0x3D	; 61
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	a7 01       	movw	r20, r14
  3e:	96 01       	movw	r18, r12
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  _ubrrh = ubrrh;
  44:	21 50       	subi	r18, 0x01	; 1
  46:	31 09       	sbc	r19, r1
  48:	41 09       	sbc	r20, r1
  4a:	51 09       	sbc	r21, r1
  4c:	56 95       	lsr	r21
  4e:	47 95       	ror	r20
  _ubrrl = ubrrl;
  50:	37 95       	ror	r19
  52:	27 95       	ror	r18
  54:	21 15       	cp	r18, r1
  56:	80 e1       	ldi	r24, 0x10	; 16
  58:	38 07       	cpc	r19, r24
  5a:	00 f0       	brcs	.+0      	; 0x5c <_ZN14HardwareSerial5beginEm+0x5c>
  _ucsra = ucsra;
  5c:	ec 89       	ldd	r30, Y+20	; 0x14
  5e:	fd 89       	ldd	r31, Y+21	; 0x15
  60:	10 82       	st	Z, r1
  62:	60 e8       	ldi	r22, 0x80	; 128
  64:	74 e8       	ldi	r23, 0x84	; 132
  66:	8e e1       	ldi	r24, 0x1E	; 30
  _ucsrb = ucsrb;
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	a7 01       	movw	r20, r14
  6c:	96 01       	movw	r18, r12
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  72:	21 50       	subi	r18, 0x01	; 1
  _ucsrc = ucsrc;
  74:	31 09       	sbc	r19, r1
  76:	41 09       	sbc	r20, r1
  78:	51 09       	sbc	r21, r1
  7a:	56 95       	lsr	r21
  7c:	47 95       	ror	r20
  7e:	37 95       	ror	r19
  _udr = udr;
  80:	27 95       	ror	r18
  82:	e8 89       	ldd	r30, Y+16	; 0x10
  84:	f9 89       	ldd	r31, Y+17	; 0x11
  86:	30 83       	st	Z, r19
  88:	ea 89       	ldd	r30, Y+18	; 0x12
  8a:	fb 89       	ldd	r31, Y+19	; 0x13
  _rxen = rxen;
  8c:	20 83       	st	Z, r18
  8e:	19 a2       	std	Y+33, r1	; 0x21
  90:	ee 89       	ldd	r30, Y+22	; 0x16
  _txen = txen;
  92:	ff 89       	ldd	r31, Y+23	; 0x17
  94:	40 81       	ld	r20, Z
  96:	81 e0       	ldi	r24, 0x01	; 1
  _rxcie = rxcie;
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	9c 01       	movw	r18, r24
  9c:	0c 8c       	ldd	r0, Y+28	; 0x1c
  _udrie = udrie;
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN14HardwareSerial5beginEm+0xa0>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  _u2x = u2x;
  a4:	0a 94       	dec	r0
  a6:	02 f4       	brpl	.+0      	; 0xa8 <_ZN14HardwareSerial5beginEm+0xa8>
  a8:	42 2b       	or	r20, r18
  aa:	40 83       	st	Z, r20
  ac:	ee 89       	ldd	r30, Y+22	; 0x16
  ae:	ff 89       	ldd	r31, Y+23	; 0x17
  b0:	40 81       	ld	r20, Z
  b2:	9c 01       	movw	r18, r24
  b4:	0d 8c       	ldd	r0, Y+29	; 0x1d
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN14HardwareSerial5beginEm+0xb8>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	02 f4       	brpl	.+0      	; 0xc0 <_ZN14HardwareSerial5beginEm+0xc0>
  c0:	42 2b       	or	r20, r18
  c2:	40 83       	st	Z, r20
  c4:	ee 89       	ldd	r30, Y+22	; 0x16
  c6:	ff 89       	ldd	r31, Y+23	; 0x17
  c8:	40 81       	ld	r20, Z
  ca:	9c 01       	movw	r18, r24
  cc:	0e 8c       	ldd	r0, Y+30	; 0x1e
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN14HardwareSerial5beginEm+0xd0>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	0a 94       	dec	r0
  d6:	02 f4       	brpl	.+0      	; 0xd8 <_ZN14HardwareSerial5beginEm+0xd8>
  d8:	42 2b       	or	r20, r18
  da:	40 83       	st	Z, r20
  dc:	ee 89       	ldd	r30, Y+22	; 0x16
  de:	ff 89       	ldd	r31, Y+23	; 0x17
  e0:	20 81       	ld	r18, Z
  e2:	0f 8c       	ldd	r0, Y+31	; 0x1f
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN14HardwareSerial5beginEm+0xe6>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	02 f4       	brpl	.+0      	; 0xee <_ZN14HardwareSerial5beginEm+0xee>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	80 83       	st	Z, r24
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	df 90       	pop	r13
  fe:	cf 90       	pop	r12
 100:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEmh:

00000000 <_ZN14HardwareSerial5beginEmh>:
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	6a 01       	movw	r12, r20
  12:	7b 01       	movw	r14, r22
  14:	b2 2e       	mov	r11, r18
  16:	41 15       	cp	r20, r1
  18:	81 ee       	ldi	r24, 0xE1	; 225
  1a:	58 07       	cpc	r21, r24
  1c:	61 05       	cpc	r22, r1
  1e:	71 05       	cpc	r23, r1

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN14HardwareSerial5beginEmh+0x22>
  22:	ec 89       	ldd	r30, Y+20	; 0x14
  24:	fd 89       	ldd	r31, Y+21	; 0x15
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	08 a0       	ldd	r0, Y+32	; 0x20
{
  _rx_buffer = rx_buffer;
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN14HardwareSerial5beginEmh+0x2e>
  2e:	88 0f       	add	r24, r24
  30:	99 1f       	adc	r25, r25
  32:	0a 94       	dec	r0
  34:	02 f4       	brpl	.+0      	; 0x36 <_ZN14HardwareSerial5beginEmh+0x36>
  36:	80 83       	st	Z, r24
  _tx_buffer = tx_buffer;
  38:	60 e0       	ldi	r22, 0x00	; 0
  3a:	79 e0       	ldi	r23, 0x09	; 9
  3c:	8d e3       	ldi	r24, 0x3D	; 61
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	a7 01       	movw	r20, r14
  42:	96 01       	movw	r18, r12
  _ubrrh = ubrrh;
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  48:	21 50       	subi	r18, 0x01	; 1
  4a:	31 09       	sbc	r19, r1
  4c:	41 09       	sbc	r20, r1
  4e:	51 09       	sbc	r21, r1
  _ubrrl = ubrrl;
  50:	56 95       	lsr	r21
  52:	47 95       	ror	r20
  54:	37 95       	ror	r19
  56:	27 95       	ror	r18
  58:	21 15       	cp	r18, r1
  5a:	80 e1       	ldi	r24, 0x10	; 16
  _ucsra = ucsra;
  5c:	38 07       	cpc	r19, r24
  5e:	00 f0       	brcs	.+0      	; 0x60 <_ZN14HardwareSerial5beginEmh+0x60>
  60:	ec 89       	ldd	r30, Y+20	; 0x14
  62:	fd 89       	ldd	r31, Y+21	; 0x15
  64:	10 82       	st	Z, r1
  66:	60 e8       	ldi	r22, 0x80	; 128
  _ucsrb = ucsrb;
  68:	74 e8       	ldi	r23, 0x84	; 132
  6a:	8e e1       	ldi	r24, 0x1E	; 30
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	a7 01       	movw	r20, r14
  70:	96 01       	movw	r18, r12
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  _ucsrc = ucsrc;
  76:	21 50       	subi	r18, 0x01	; 1
  78:	31 09       	sbc	r19, r1
  7a:	41 09       	sbc	r20, r1
  7c:	51 09       	sbc	r21, r1
  7e:	56 95       	lsr	r21
  _udr = udr;
  80:	47 95       	ror	r20
  82:	37 95       	ror	r19
  84:	27 95       	ror	r18
  86:	e8 89       	ldd	r30, Y+16	; 0x10
  88:	f9 89       	ldd	r31, Y+17	; 0x11
  8a:	30 83       	st	Z, r19
  _rxen = rxen;
  8c:	ea 89       	ldd	r30, Y+18	; 0x12
  8e:	fb 89       	ldd	r31, Y+19	; 0x13
  90:	20 83       	st	Z, r18
  _txen = txen;
  92:	e8 8d       	ldd	r30, Y+24	; 0x18
  94:	f9 8d       	ldd	r31, Y+25	; 0x19
  96:	b0 82       	st	Z, r11
  _rxcie = rxcie;
  98:	ee 89       	ldd	r30, Y+22	; 0x16
  9a:	ff 89       	ldd	r31, Y+23	; 0x17
  9c:	40 81       	ld	r20, Z
  _udrie = udrie;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	9c 01       	movw	r18, r24
  _u2x = u2x;
  a4:	0c 8c       	ldd	r0, Y+28	; 0x1c
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN14HardwareSerial5beginEmh+0xa8>
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	0a 94       	dec	r0
  ae:	02 f4       	brpl	.+0      	; 0xb0 <_ZN14HardwareSerial5beginEmh+0xb0>
  b0:	42 2b       	or	r20, r18
  b2:	40 83       	st	Z, r20
  b4:	ee 89       	ldd	r30, Y+22	; 0x16
  b6:	ff 89       	ldd	r31, Y+23	; 0x17
  b8:	40 81       	ld	r20, Z
  ba:	9c 01       	movw	r18, r24
  bc:	0d 8c       	ldd	r0, Y+29	; 0x1d
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZN14HardwareSerial5beginEmh+0xc0>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	0a 94       	dec	r0
  c6:	02 f4       	brpl	.+0      	; 0xc8 <_ZN14HardwareSerial5beginEmh+0xc8>
  c8:	42 2b       	or	r20, r18
  ca:	40 83       	st	Z, r20
  cc:	ee 89       	ldd	r30, Y+22	; 0x16
  ce:	ff 89       	ldd	r31, Y+23	; 0x17
  d0:	40 81       	ld	r20, Z
  d2:	9c 01       	movw	r18, r24
  d4:	0e 8c       	ldd	r0, Y+30	; 0x1e
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_ZN14HardwareSerial5beginEmh+0xd8>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	0a 94       	dec	r0
  de:	02 f4       	brpl	.+0      	; 0xe0 <_ZN14HardwareSerial5beginEmh+0xe0>
  e0:	42 2b       	or	r20, r18
  e2:	40 83       	st	Z, r20
  e4:	ee 89       	ldd	r30, Y+22	; 0x16
  e6:	ff 89       	ldd	r31, Y+23	; 0x17
  e8:	20 81       	ld	r18, Z
  ea:	0f 8c       	ldd	r0, Y+31	; 0x1f
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN14HardwareSerial5beginEmh+0xee>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	02 f4       	brpl	.+0      	; 0xf6 <_ZN14HardwareSerial5beginEmh+0xf6>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	80 83       	st	Z, r24
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	ff 90       	pop	r15
 102:	ef 90       	pop	r14
 104:	df 90       	pop	r13
 106:	cf 90       	pop	r12
 108:	bf 90       	pop	r11
 10a:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	86 85       	ldd	r24, Z+14	; 0x0e
   8:	97 85       	ldd	r25, Z+15	; 0x0f
   a:	dc 01       	movw	r26, r24
   c:	a0 5c       	subi	r26, 0xC0	; 192
   e:	bf 4f       	sbci	r27, 0xFF	; 255
  10:	ec 01       	movw	r28, r24
  12:	ce 5b       	subi	r28, 0xBE	; 190
  14:	df 4f       	sbci	r29, 0xFF	; 255
  16:	4d 91       	ld	r20, X+
  18:	5c 91       	ld	r21, X
  1a:	11 97       	sbiw	r26, 0x01	; 1
  1c:	28 81       	ld	r18, Y
  1e:	39 81       	ldd	r19, Y+1	; 0x01

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	42 17       	cp	r20, r18
  22:	53 07       	cpc	r21, r19
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN14HardwareSerial3endEv+0x26>
  26:	a6 89       	ldd	r26, Z+22	; 0x16
  28:	b7 89       	ldd	r27, Z+23	; 0x17
  2a:	4c 91       	ld	r20, X
{
  _rx_buffer = rx_buffer;
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	9c 01       	movw	r18, r24
  32:	04 8c       	ldd	r0, Z+28	; 0x1c
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN14HardwareSerial3endEv+0x36>
  36:	22 0f       	add	r18, r18
  _tx_buffer = tx_buffer;
  38:	33 1f       	adc	r19, r19
  3a:	0a 94       	dec	r0
  3c:	02 f4       	brpl	.+0      	; 0x3e <_ZN14HardwareSerial3endEv+0x3e>
  3e:	20 95       	com	r18
  40:	24 23       	and	r18, r20
  42:	2c 93       	st	X, r18
  _ubrrh = ubrrh;
  44:	a6 89       	ldd	r26, Z+22	; 0x16
  46:	b7 89       	ldd	r27, Z+23	; 0x17
  48:	4c 91       	ld	r20, X
  4a:	9c 01       	movw	r18, r24
  4c:	05 8c       	ldd	r0, Z+29	; 0x1d
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN14HardwareSerial3endEv+0x50>
  _ubrrl = ubrrl;
  50:	22 0f       	add	r18, r18
  52:	33 1f       	adc	r19, r19
  54:	0a 94       	dec	r0
  56:	02 f4       	brpl	.+0      	; 0x58 <_ZN14HardwareSerial3endEv+0x58>
  58:	20 95       	com	r18
  5a:	24 23       	and	r18, r20
  _ucsra = ucsra;
  5c:	2c 93       	st	X, r18
  5e:	a6 89       	ldd	r26, Z+22	; 0x16
  60:	b7 89       	ldd	r27, Z+23	; 0x17
  62:	4c 91       	ld	r20, X
  64:	9c 01       	movw	r18, r24
  66:	06 8c       	ldd	r0, Z+30	; 0x1e
  _ucsrb = ucsrb;
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN14HardwareSerial3endEv+0x6a>
  6a:	22 0f       	add	r18, r18
  6c:	33 1f       	adc	r19, r19
  6e:	0a 94       	dec	r0
  70:	02 f4       	brpl	.+0      	; 0x72 <_ZN14HardwareSerial3endEv+0x72>
  72:	20 95       	com	r18
  _ucsrc = ucsrc;
  74:	24 23       	and	r18, r20
  76:	2c 93       	st	X, r18
  78:	a6 89       	ldd	r26, Z+22	; 0x16
  7a:	b7 89       	ldd	r27, Z+23	; 0x17
  7c:	2c 91       	ld	r18, X
  7e:	07 8c       	ldd	r0, Z+31	; 0x1f
  _udr = udr;
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN14HardwareSerial3endEv+0x82>
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	0a 94       	dec	r0
  88:	02 f4       	brpl	.+0      	; 0x8a <_ZN14HardwareSerial3endEv+0x8a>
  8a:	80 95       	com	r24
  _rxen = rxen;
  8c:	82 23       	and	r24, r18
  8e:	8c 93       	st	X, r24
  90:	84 85       	ldd	r24, Z+12	; 0x0c
  _txen = txen;
  92:	95 85       	ldd	r25, Z+13	; 0x0d
  94:	fc 01       	movw	r30, r24
  96:	ee 5b       	subi	r30, 0xBE	; 190
  _rxcie = rxcie;
  98:	ff 4f       	sbci	r31, 0xFF	; 255
  9a:	20 81       	ld	r18, Z
  9c:	31 81       	ldd	r19, Z+1	; 0x01
  _udrie = udrie;
  9e:	fc 01       	movw	r30, r24
  a0:	e0 5c       	subi	r30, 0xC0	; 192
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  _u2x = u2x;
  a4:	31 83       	std	Z+1, r19	; 0x01
  a6:	20 83       	st	Z, r18
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialcvbEv:

00000000 <_ZN14HardwareSerialcvbEv>:
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I_rx_buffer:

00000000 <_GLOBAL__sub_I_rx_buffer>:
   0:	10 92 00 00 	sts	0x0000, r1
   4:	10 92 00 00 	sts	0x0000, r1
   8:	88 ee       	ldi	r24, 0xE8	; 232
   a:	93 e0       	ldi	r25, 0x03	; 3
   c:	a0 e0       	ldi	r26, 0x00	; 0
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	80 93 00 00 	sts	0x0000, r24
  14:	90 93 00 00 	sts	0x0000, r25
  18:	a0 93 00 00 	sts	0x0000, r26
  1c:	b0 93 00 00 	sts	0x0000, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	90 93 00 00 	sts	0x0000, r25
  28:	80 93 00 00 	sts	0x0000, r24
{
  _rx_buffer = rx_buffer;
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	90 93 00 00 	sts	0x0000, r25
  34:	80 93 00 00 	sts	0x0000, r24
  _tx_buffer = tx_buffer;
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	90 93 00 00 	sts	0x0000, r25
  40:	80 93 00 00 	sts	0x0000, r24
  _ubrrh = ubrrh;
  44:	85 ec       	ldi	r24, 0xC5	; 197
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	90 93 00 00 	sts	0x0000, r25
  4c:	80 93 00 00 	sts	0x0000, r24
  _ubrrl = ubrrl;
  50:	84 ec       	ldi	r24, 0xC4	; 196
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	90 93 00 00 	sts	0x0000, r25
  58:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
  5c:	80 ec       	ldi	r24, 0xC0	; 192
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	90 93 00 00 	sts	0x0000, r25
  64:	80 93 00 00 	sts	0x0000, r24
  _ucsrb = ucsrb;
  68:	81 ec       	ldi	r24, 0xC1	; 193
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	90 93 00 00 	sts	0x0000, r25
  70:	80 93 00 00 	sts	0x0000, r24
  _ucsrc = ucsrc;
  74:	82 ec       	ldi	r24, 0xC2	; 194
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	90 93 00 00 	sts	0x0000, r25
  7c:	80 93 00 00 	sts	0x0000, r24
  _udr = udr;
  80:	86 ec       	ldi	r24, 0xC6	; 198
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	90 93 00 00 	sts	0x0000, r25
  88:	80 93 00 00 	sts	0x0000, r24
  _rxen = rxen;
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	80 93 00 00 	sts	0x0000, r24
  _txen = txen;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	80 93 00 00 	sts	0x0000, r24
  _rxcie = rxcie;
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	80 93 00 00 	sts	0x0000, r24
  _udrie = udrie;
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	80 93 00 00 	sts	0x0000, r24
  _u2x = u2x;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 00 00 	sts	0x0000, r24
  aa:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         00000960  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      0000369e  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZNK9IPAddress7printToER5Print 00000076  00000000  00000000  00004042  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  000040b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  000040cc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9IPAddressC2Em 00000014  00000000  00000000  000040e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9IPAddressC2EPKh 00000020  00000000  00000000  000040f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddressaSEPKh 00000016  00000000  00000000  00004118  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN9IPAddressaSEm 0000000c  00000000  00000000  0000412e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN9IPAddresseqEPKh 0000001e  00000000  00000000  0000413a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  00004158  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .ctors        00000002  00000000  00000000  00004176  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 17 .rodata._ZTV9IPAddress 00000006  00000000  00000000  00004178  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 18 .rodata._ZTV9Printable 00000006  00000000  00000000  0000417e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 19 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00004184  2**0
                  ALLOC
 20 .comment      00000012  00000000  00000000  00004184  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
{
    _address[0] = first_octet;
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
    _address[1] = second_octet;
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
    _address[2] = third_octet;
  14:	6c 01       	movw	r12, r24
  16:	7b 01       	movw	r14, r22
    _address[3] = fourth_octet;
  18:	c0 e0       	ldi	r28, 0x00	; 0
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	00 e0       	ldi	r16, 0x00	; 0
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	f6 01       	movw	r30, r12
  22:	ec 0f       	add	r30, r28
  24:	fd 1f       	adc	r31, r29
  26:	4a e0       	ldi	r20, 0x0A	; 10
  28:	50 e0       	ldi	r21, 0x00	; 0
  2a:	62 81       	ldd	r22, Z+2	; 0x02
  2c:	c7 01       	movw	r24, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  32:	5c 01       	movw	r10, r24
  34:	6e e2       	ldi	r22, 0x2E	; 46
  36:	c7 01       	movw	r24, r14
  38:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  3c:	8a 0d       	add	r24, r10
  3e:	9b 1d       	adc	r25, r11
  40:	08 0f       	add	r16, r24
  42:	19 1f       	adc	r17, r25
  44:	21 96       	adiw	r28, 0x01	; 1
  46:	c3 30       	cpi	r28, 0x03	; 3
  48:	d1 05       	cpc	r29, r1
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZNK9IPAddress7printToER5Print+0x4c>
  4c:	4a e0       	ldi	r20, 0x0A	; 10
  4e:	50 e0       	ldi	r21, 0x00	; 0
  50:	f6 01       	movw	r30, r12
  52:	65 81       	ldd	r22, Z+5	; 0x05
  54:	c7 01       	movw	r24, r14
  56:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  5a:	08 0f       	add	r16, r24
  5c:	19 1f       	adc	r17, r25
  5e:	c8 01       	movw	r24, r16
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	1f 91       	pop	r17
  66:	0f 91       	pop	r16
  68:	ff 90       	pop	r15
  6a:	ef 90       	pop	r14
  6c:	df 90       	pop	r13
  6e:	cf 90       	pop	r12
  70:	bf 90       	pop	r11
  72:	af 90       	pop	r10
  74:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	12 82       	std	Z+2, r1	; 0x02
{
    _address[0] = first_octet;
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
    _address[1] = second_octet;
  10:	15 82       	std	Z+5, r1	; 0x05
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
   e:	43 83       	std	Z+3, r20	; 0x03
    _address[1] = second_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
  12:	05 83       	std	Z+5, r16	; 0x05
    _address[2] = third_octet;
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	42 83       	std	Z+2, r20	; 0x02
{
    _address[0] = first_octet;
   c:	53 83       	std	Z+3, r21	; 0x03
   e:	64 83       	std	Z+4, r22	; 0x04
    _address[1] = second_octet;
  10:	75 83       	std	Z+5, r23	; 0x05
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	fb 01       	movw	r30, r22
{
    _address[0] = first_octet;
   c:	40 81       	ld	r20, Z
   e:	51 81       	ldd	r21, Z+1	; 0x01
    _address[1] = second_octet;
  10:	62 81       	ldd	r22, Z+2	; 0x02
  12:	73 81       	ldd	r23, Z+3	; 0x03
    _address[2] = third_octet;
  14:	fc 01       	movw	r30, r24
  16:	42 83       	std	Z+2, r20	; 0x02
    _address[3] = fourth_octet;
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
  1e:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
   4:	4d 91       	ld	r20, X+
   6:	5d 91       	ld	r21, X+
   8:	6d 91       	ld	r22, X+
   a:	7c 91       	ld	r23, X
{
    _address[0] = first_octet;
   c:	42 83       	std	Z+2, r20	; 0x02
   e:	53 83       	std	Z+3, r21	; 0x03
    _address[1] = second_octet;
  10:	64 83       	std	Z+4, r22	; 0x04
  12:	75 83       	std	Z+5, r23	; 0x05
    _address[2] = third_octet;
  14:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	42 83       	std	Z+2, r20	; 0x02
   4:	53 83       	std	Z+3, r21	; 0x03
   6:	64 83       	std	Z+4, r22	; 0x04
   8:	75 83       	std	Z+5, r23	; 0x05
   a:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00000000 <_ZN9IPAddresseqEPKh>:
   0:	9b 01       	movw	r18, r22
   2:	bc 01       	movw	r22, r24
   4:	6e 5f       	subi	r22, 0xFE	; 254
   6:	7f 4f       	sbci	r23, 0xFF	; 255
   8:	44 e0       	ldi	r20, 0x04	; 4
   a:	50 e0       	ldi	r21, 0x00	; 0
{
    _address[0] = first_octet;
   c:	c9 01       	movw	r24, r18
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresseqEPKh>
    _address[1] = second_octet;
  12:	9c 01       	movw	r18, r24
    _address[2] = third_octet;
  14:	81 e0       	ldi	r24, 0x01	; 1
  16:	23 2b       	or	r18, r19
    _address[3] = fourth_octet;
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN9IPAddresseqEPKh+0x1a>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	90 93 00 00 	sts	0x0000, r25
   8:	80 93 00 00 	sts	0x0000, r24
{
    _address[0] = first_octet;
   c:	10 92 00 00 	sts	0x0000, r1
    _address[1] = second_octet;
  10:	10 92 00 00 	sts	0x0000, r1
    _address[2] = third_octet;
  14:	10 92 00 00 	sts	0x0000, r1
    _address[3] = fourth_octet;
  18:	10 92 00 00 	sts	0x0000, r1
  1c:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         00001524  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      00003c51  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZN5Print5writeEPKhj 00000050  00000000  00000000  000051b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5writeEPKc 0000002c  00000000  00000000  00005209  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Print5printEPK19__FlashStringHelper 00000042  00000000  00000000  00005235  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Print5printERK6String 0000006c  00000000  00000000  00005277  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN5Print5printEPKc 00000004  00000000  00000000  000052e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print5printEc 0000000e  00000000  00000000  000052e7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN5Print5printERK9Printable 00000014  00000000  00000000  000052f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN5Print7printlnEv 0000002c  00000000  00000000  00005309  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000028  00000000  00000000  00005335  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print7printlnERK6String 00000028  00000000  00000000  0000535d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnEPKc 00000028  00000000  00000000  00005385  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print7printlnEc 00000028  00000000  00000000  000053ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnERK9Printable 00000028  00000000  00000000  000053d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print11printNumberEmh 000000b8  00000000  00000000  000053fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print5printEmi 0000001a  00000000  00000000  000054b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print7printlnEmi 00000028  00000000  00000000  000054cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print5printEji 0000000c  00000000  00000000  000054f7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print7printlnEji 00000030  00000000  00000000  00005503  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print5printEhi 0000000e  00000000  00000000  00005533  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print7printlnEhi 00000032  00000000  00000000  00005541  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print5printEli 00000096  00000000  00000000  00005573  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print7printlnEli 00000028  00000000  00000000  00005609  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print5printEii 00000010  00000000  00000000  00005631  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEii 00000034  00000000  00000000  00005641  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .rodata.str1.1 0000000e  00000000  00000000  00005675  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 32 .text._ZN5Print10printFloatEdh 000001ee  00000000  00000000  00005683  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN5Print5printEdi 00000004  00000000  00000000  00005871  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN5Print7printlnEdi 00000028  00000000  00000000  00005875  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .rodata._ZTV5Print 00000008  00000000  00000000  0000589d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 36 .comment      00000012  00000000  00000000  000058a5  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	6c 01       	movw	r12, r24
  12:	eb 01       	movw	r28, r22
  14:	7a 01       	movw	r14, r20
  16:	e6 0e       	add	r14, r22
  18:	f7 1e       	adc	r15, r23
  1a:	00 e0       	ldi	r16, 0x00	; 0
  return n;
}
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN5Print5writeEPKhj+0x20>
  20:	69 91       	ld	r22, Y+
  22:	d6 01       	movw	r26, r12
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	01 90       	ld	r0, Z+
  2a:	f0 81       	ld	r31, Z
  2c:	e0 2d       	mov	r30, r0
  2e:	c6 01       	movw	r24, r12
  30:	09 95       	icall
  32:	08 0f       	add	r16, r24
  34:	19 1f       	adc	r17, r25
  36:	ce 15       	cp	r28, r14
  38:	df 05       	cpc	r29, r15
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN5Print5writeEPKhj+0x3c>
  3c:	c8 01       	movw	r24, r16
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	1f 91       	pop	r17
  44:	0f 91       	pop	r16
  46:	ff 90       	pop	r15
  48:	ef 90       	pop	r14
  4a:	df 90       	pop	r13
  4c:	cf 90       	pop	r12
  4e:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000000 <_ZN5Print5writeEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN5Print5writeEPKc+0x6>
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN5Print5writeEPKc+0xe>
   e:	ad 01       	movw	r20, r26
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	41 50       	subi	r20, 0x01	; 1
  12:	51 09       	sbc	r21, r1
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
  18:	dc 01       	movw	r26, r24
  1a:	ed 91       	ld	r30, X+
  return n;
}
  1c:	fc 91       	ld	r31, X
  1e:	02 80       	ldd	r0, Z+2	; 0x02
  20:	f3 81       	ldd	r31, Z+3	; 0x03
  22:	e0 2d       	mov	r30, r0
  24:	09 94       	ijmp
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	eb 01       	movw	r28, r22
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	00 e0       	ldi	r16, 0x00	; 0
  12:	10 e0       	ldi	r17, 0x00	; 0
  14:	fe 01       	movw	r30, r28
  16:	21 96       	adiw	r28, 0x01	; 1
  18:	64 91       	lpm	r22, Z+
  1a:	66 23       	and	r22, r22
  return n;
}
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
  1e:	f7 01       	movw	r30, r14
  20:	a0 81       	ld	r26, Z
  22:	b1 81       	ldd	r27, Z+1	; 0x01
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	c7 01       	movw	r24, r14
  2a:	09 95       	icall
  2c:	08 0f       	add	r16, r24
  2e:	19 1f       	adc	r17, r25
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN5Print5printEPK19__FlashStringHelper+0x32>
  32:	c8 01       	movw	r24, r16
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	7c 01       	movw	r14, r24
  16:	6b 01       	movw	r12, r22
  18:	00 e0       	ldi	r16, 0x00	; 0
  1a:	10 e0       	ldi	r17, 0x00	; 0
  return n;
}
  1c:	c0 e0       	ldi	r28, 0x00	; 0
  1e:	d0 e0       	ldi	r29, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Print5printERK6String+0x22>
  22:	d7 01       	movw	r26, r14
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	a0 80       	ld	r10, Z
  2a:	b1 80       	ldd	r11, Z+1	; 0x01
  2c:	b8 01       	movw	r22, r16
  2e:	c6 01       	movw	r24, r12
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  34:	68 2f       	mov	r22, r24
  36:	c7 01       	movw	r24, r14
  38:	f5 01       	movw	r30, r10
  3a:	09 95       	icall
  3c:	c8 0f       	add	r28, r24
  3e:	d9 1f       	adc	r29, r25
  40:	0f 5f       	subi	r16, 0xFF	; 255
  42:	1f 4f       	sbci	r17, 0xFF	; 255
  44:	d6 01       	movw	r26, r12
  46:	14 96       	adiw	r26, 0x04	; 4
  48:	8d 91       	ld	r24, X+
  4a:	9c 91       	ld	r25, X
  4c:	15 97       	sbiw	r26, 0x05	; 5
  4e:	08 17       	cp	r16, r24
  50:	19 07       	cpc	r17, r25
  52:	00 f0       	brcs	.+0      	; 0x54 <_ZN5Print5printERK6String+0x54>
  54:	ce 01       	movw	r24, r28
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	df 90       	pop	r13
  64:	cf 90       	pop	r12
  66:	bf 90       	pop	r11
  68:	af 90       	pop	r10
  6a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEPKc>

Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	01 90       	ld	r0, Z+
   8:	f0 81       	ld	r31, Z
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	e0 2d       	mov	r30, r0
   c:	09 94       	ijmp

Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	db 01       	movw	r26, r22
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	11 97       	sbiw	r26, 0x01	; 1
   8:	01 90       	ld	r0, Z+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	f0 81       	ld	r31, Z
   c:	e0 2d       	mov	r30, r0
   e:	bc 01       	movw	r22, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	cd 01       	movw	r24, r26
  12:	09 94       	ijmp

Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	6d e0       	ldi	r22, 0x0D	; 13
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	8c 01       	movw	r16, r24
  12:	6a e0       	ldi	r22, 0x0A	; 10
  14:	ce 01       	movw	r24, r28
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
  1a:	9c 01       	movw	r18, r24
  return n;
}
  1c:	20 0f       	add	r18, r16
  1e:	31 1f       	adc	r19, r17
  20:	c9 01       	movw	r24, r18
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  16:	98 01       	movw	r18, r16
  18:	28 0f       	add	r18, r24
  1a:	39 1f       	adc	r19, r25
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	9f 92       	push	r9
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	cf 93       	push	r28
  return n;
}
  1c:	df 93       	push	r29
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	a1 97       	sbiw	r28, 0x21	; 33
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	de bf       	out	0x3e, r29	; 62
  2a:	0f be       	out	0x3f, r0	; 63
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	5c 01       	movw	r10, r24
  30:	6a 01       	movw	r12, r20
  32:	7b 01       	movw	r14, r22
  34:	92 2e       	mov	r9, r18
  36:	19 a2       	std	Y+33, r1	; 0x21
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	82 17       	cp	r24, r18
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZN5Print11printNumberEmh+0x3e>
  3e:	8a e0       	ldi	r24, 0x0A	; 10
  40:	98 2e       	mov	r9, r24
  42:	8e 01       	movw	r16, r28
  44:	0f 5d       	subi	r16, 0xDF	; 223
  46:	1f 4f       	sbci	r17, 0xFF	; 255
  48:	49 2c       	mov	r4, r9
  4a:	51 2c       	mov	r5, r1
  4c:	61 2c       	mov	r6, r1
  4e:	71 2c       	mov	r7, r1
  50:	c7 01       	movw	r24, r14
  52:	b6 01       	movw	r22, r12
  54:	a3 01       	movw	r20, r6
  56:	92 01       	movw	r18, r4
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  5c:	8c 2d       	mov	r24, r12
  5e:	92 9e       	mul	r9, r18
  60:	80 19       	sub	r24, r0
  62:	11 24       	eor	r1, r1
  64:	01 50       	subi	r16, 0x01	; 1
  66:	11 09       	sbc	r17, r1
  68:	8a 30       	cpi	r24, 0x0A	; 10
  6a:	04 f4       	brge	.+0      	; 0x6c <_ZN5Print11printNumberEmh+0x6c>
  6c:	80 5d       	subi	r24, 0xD0	; 208
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN5Print11printNumberEmh+0x70>
  70:	89 5c       	subi	r24, 0xC9	; 201
  72:	f8 01       	movw	r30, r16
  74:	80 83       	st	Z, r24
  76:	69 01       	movw	r12, r18
  78:	7a 01       	movw	r14, r20
  7a:	c1 14       	cp	r12, r1
  7c:	d1 04       	cpc	r13, r1
  7e:	e1 04       	cpc	r14, r1
  80:	f1 04       	cpc	r15, r1
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN5Print11printNumberEmh+0x84>
  84:	b8 01       	movw	r22, r16
  86:	c5 01       	movw	r24, r10
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  8c:	a1 96       	adiw	r28, 0x21	; 33
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	1f 91       	pop	r17
  9e:	0f 91       	pop	r16
  a0:	ff 90       	pop	r15
  a2:	ef 90       	pop	r14
  a4:	df 90       	pop	r13
  a6:	cf 90       	pop	r12
  a8:	bf 90       	pop	r11
  aa:	af 90       	pop	r10
  ac:	9f 90       	pop	r9
  ae:	7f 90       	pop	r7
  b0:	6f 90       	pop	r6
  b2:	5f 90       	pop	r5
  b4:	4f 90       	pop	r4
  b6:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	21 15       	cp	r18, r1
   2:	31 05       	cpc	r19, r1
   4:	01 f4       	brne	.+0      	; 0x6 <_ZN5Print5printEmi+0x6>
   6:	dc 01       	movw	r26, r24
   8:	ed 91       	ld	r30, X+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	fc 91       	ld	r31, X
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	e0 2d       	mov	r30, r0
  12:	64 2f       	mov	r22, r20
  14:	09 94       	ijmp
  16:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEmi>

Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	ab 01       	movw	r20, r22
   4:	60 e0       	ldi	r22, 0x00	; 0
   6:	70 e0       	ldi	r23, 0x00	; 0
   8:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEji>

Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	ab 01       	movw	r20, r22
   e:	60 e0       	ldi	r22, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  16:	8c 01       	movw	r16, r24
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  return n;
}
  1e:	98 01       	movw	r18, r16
  20:	28 0f       	add	r18, r24
  22:	39 1f       	adc	r19, r25
  24:	c9 01       	movw	r24, r18
  26:	df 91       	pop	r29
  28:	cf 91       	pop	r28
  2a:	1f 91       	pop	r17
  2c:	0f 91       	pop	r16
  2e:	08 95       	ret

Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	46 2f       	mov	r20, r22
   4:	50 e0       	ldi	r21, 0x00	; 0
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	70 e0       	ldi	r23, 0x00	; 0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEhi>

Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	46 2f       	mov	r20, r22
   e:	50 e0       	ldi	r21, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  18:	8c 01       	movw	r16, r24
  1a:	ce 01       	movw	r24, r28
  return n;
}
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  20:	98 01       	movw	r18, r16
  22:	28 0f       	add	r18, r24
  24:	39 1f       	adc	r19, r25
  26:	c9 01       	movw	r24, r18
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ec 01       	movw	r28, r24
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  16:	21 15       	cp	r18, r1
  18:	31 05       	cpc	r19, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN5Print5printEli+0x1c>
  return n;
}
  1c:	e8 81       	ld	r30, Y
  1e:	f9 81       	ldd	r31, Y+1	; 0x01
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	64 2f       	mov	r22, r20
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	ff 90       	pop	r15
  32:	ef 90       	pop	r14
  34:	df 90       	pop	r13
  36:	cf 90       	pop	r12
  38:	09 94       	ijmp
  3a:	2a 30       	cpi	r18, 0x0A	; 10
  3c:	31 05       	cpc	r19, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN5Print5printEli+0x40>
  40:	77 fd       	sbrc	r23, 7
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN5Print5printEli+0x44>
  44:	2a e0       	ldi	r18, 0x0A	; 10
  46:	b7 01       	movw	r22, r14
  48:	a6 01       	movw	r20, r12
  4a:	ce 01       	movw	r24, r28
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	df 90       	pop	r13
  5a:	cf 90       	pop	r12
  5c:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEli>
  60:	6d e2       	ldi	r22, 0x2D	; 45
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  66:	8c 01       	movw	r16, r24
  68:	44 27       	eor	r20, r20
  6a:	55 27       	eor	r21, r21
  6c:	ba 01       	movw	r22, r20
  6e:	4c 19       	sub	r20, r12
  70:	5d 09       	sbc	r21, r13
  72:	6e 09       	sbc	r22, r14
  74:	7f 09       	sbc	r23, r15
  76:	2a e0       	ldi	r18, 0x0A	; 10
  78:	ce 01       	movw	r24, r28
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  7e:	08 0f       	add	r16, r24
  80:	19 1f       	adc	r17, r25
  82:	c8 01       	movw	r24, r16
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	ff 90       	pop	r15
  8e:	ef 90       	pop	r14
  90:	df 90       	pop	r13
  92:	cf 90       	pop	r12
  94:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	ab 01       	movw	r20, r22
   4:	66 27       	eor	r22, r22
   6:	57 fd       	sbrc	r21, 7
   8:	60 95       	com	r22
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	76 2f       	mov	r23, r22
   c:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEii>

Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	ab 01       	movw	r20, r22
   e:	66 27       	eor	r22, r22
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	57 fd       	sbrc	r21, 7
  12:	60 95       	com	r22
  14:	76 2f       	mov	r23, r22
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  1a:	8c 01       	movw	r16, r24
  return n;
}
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  22:	98 01       	movw	r18, r16
  24:	28 0f       	add	r18, r24
  26:	39 1f       	adc	r19, r25
  28:	c9 01       	movw	r24, r18
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	ec 01       	movw	r28, r24
  return n;
}
  1c:	6a 01       	movw	r12, r20
  1e:	7b 01       	movw	r14, r22
  20:	12 2f       	mov	r17, r18
  22:	9a 01       	movw	r18, r20
  24:	ab 01       	movw	r20, r22
  26:	c7 01       	movw	r24, r14
  28:	b6 01       	movw	r22, r12
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN5Print10printFloatEdh+0x32>
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	70 e0       	ldi	r23, 0x00	; 0
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN5Print10printFloatEdh+0x38>
  38:	46 01       	movw	r8, r12
  3a:	57 01       	movw	r10, r14
  3c:	e8 94       	clt
  3e:	b7 f8       	bld	r11, 7
  40:	2f ef       	ldi	r18, 0xFF	; 255
  42:	3f ef       	ldi	r19, 0xFF	; 255
  44:	4f e7       	ldi	r20, 0x7F	; 127
  46:	5f e7       	ldi	r21, 0x7F	; 127
  48:	c5 01       	movw	r24, r10
  4a:	b4 01       	movw	r22, r8
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  50:	81 11       	cpse	r24, r1
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN5Print10printFloatEdh+0x54>
  54:	2f ef       	ldi	r18, 0xFF	; 255
  56:	3f ef       	ldi	r19, 0xFF	; 255
  58:	4f e7       	ldi	r20, 0x7F	; 127
  5a:	5f e7       	ldi	r21, 0x7F	; 127
  5c:	c5 01       	movw	r24, r10
  5e:	b4 01       	movw	r22, r8
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  64:	18 16       	cp	r1, r24
  66:	04 f4       	brge	.+0      	; 0x68 <_ZN5Print10printFloatEdh+0x68>
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	70 e0       	ldi	r23, 0x00	; 0
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN5Print10printFloatEdh+0x6e>
  6e:	2f ef       	ldi	r18, 0xFF	; 255
  70:	3f ef       	ldi	r19, 0xFF	; 255
  72:	4f e7       	ldi	r20, 0x7F	; 127
  74:	5f e4       	ldi	r21, 0x4F	; 79
  76:	c7 01       	movw	r24, r14
  78:	b6 01       	movw	r22, r12
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  7e:	18 16       	cp	r1, r24
  80:	04 f4       	brge	.+0      	; 0x82 <_ZN5Print10printFloatEdh+0x82>
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN5Print10printFloatEdh+0x84>
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	3f ef       	ldi	r19, 0xFF	; 255
  88:	4f e7       	ldi	r20, 0x7F	; 127
  8a:	5f ec       	ldi	r21, 0xCF	; 207
  8c:	c7 01       	movw	r24, r14
  8e:	b6 01       	movw	r22, r12
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  94:	87 ff       	sbrs	r24, 7
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN5Print10printFloatEdh+0x98>
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	ce 01       	movw	r24, r28
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	1f 91       	pop	r17
  a4:	0f 91       	pop	r16
  a6:	ff 90       	pop	r15
  a8:	ef 90       	pop	r14
  aa:	df 90       	pop	r13
  ac:	cf 90       	pop	r12
  ae:	bf 90       	pop	r11
  b0:	af 90       	pop	r10
  b2:	9f 90       	pop	r9
  b4:	8f 90       	pop	r8
  b6:	7f 90       	pop	r7
  b8:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print10printFloatEdh>
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	a9 01       	movw	r20, r18
  c2:	c7 01       	movw	r24, r14
  c4:	b6 01       	movw	r22, r12
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  ca:	87 ff       	sbrs	r24, 7
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN5Print10printFloatEdh+0xce>
  ce:	6d e2       	ldi	r22, 0x2D	; 45
  d0:	ce 01       	movw	r24, r28
  d2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  d6:	5c 01       	movw	r10, r24
  d8:	f7 fa       	bst	r15, 7
  da:	f0 94       	com	r15
  dc:	f7 f8       	bld	r15, 7
  de:	f0 94       	com	r15
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_ZN5Print10printFloatEdh+0xe2>
  e2:	a1 2c       	mov	r10, r1
  e4:	b1 2c       	mov	r11, r1
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	9f e3       	ldi	r25, 0x3F	; 63
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN5Print10printFloatEdh+0xf2>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	40 e2       	ldi	r20, 0x20	; 32
  f8:	51 e4       	ldi	r21, 0x41	; 65
  fa:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  fe:	0f 5f       	subi	r16, 0xFF	; 255
 100:	01 13       	cpse	r16, r17
 102:	00 c0       	rjmp	.+0      	; 0x104 <_ZN5Print10printFloatEdh+0x104>
 104:	26 2f       	mov	r18, r22
 106:	37 2f       	mov	r19, r23
 108:	48 2f       	mov	r20, r24
 10a:	59 2f       	mov	r21, r25
 10c:	c7 01       	movw	r24, r14
 10e:	b6 01       	movw	r22, r12
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 114:	76 2e       	mov	r7, r22
 116:	87 2e       	mov	r8, r23
 118:	98 2e       	mov	r9, r24
 11a:	c9 2e       	mov	r12, r25
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 120:	d6 2e       	mov	r13, r22
 122:	e7 2e       	mov	r14, r23
 124:	f8 2e       	mov	r15, r24
 126:	09 2f       	mov	r16, r25
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 12c:	9b 01       	movw	r18, r22
 12e:	ac 01       	movw	r20, r24
 130:	67 2d       	mov	r22, r7
 132:	78 2d       	mov	r23, r8
 134:	89 2d       	mov	r24, r9
 136:	9c 2d       	mov	r25, r12
 138:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 13c:	c6 2e       	mov	r12, r22
 13e:	97 2e       	mov	r9, r23
 140:	88 2e       	mov	r8, r24
 142:	79 2e       	mov	r7, r25
 144:	2a e0       	ldi	r18, 0x0A	; 10
 146:	4d 2d       	mov	r20, r13
 148:	5e 2d       	mov	r21, r14
 14a:	6f 2d       	mov	r22, r15
 14c:	70 2f       	mov	r23, r16
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 154:	7c 01       	movw	r14, r24
 156:	ea 0c       	add	r14, r10
 158:	fb 1c       	adc	r15, r11
 15a:	11 23       	and	r17, r17
 15c:	01 f0       	breq	.+0      	; 0x15e <_ZN5Print10printFloatEdh+0x15e>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 168:	e8 0e       	add	r14, r24
 16a:	f9 1e       	adc	r15, r25
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_ZN5Print10printFloatEdh+0x16e>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e2       	ldi	r20, 0x20	; 32
 174:	51 e4       	ldi	r21, 0x41	; 65
 176:	6c 2d       	mov	r22, r12
 178:	79 2d       	mov	r23, r9
 17a:	88 2d       	mov	r24, r8
 17c:	97 2d       	mov	r25, r7
 17e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 182:	76 2e       	mov	r7, r22
 184:	07 2f       	mov	r16, r23
 186:	6c 01       	movw	r12, r24
 188:	9d 2d       	mov	r25, r13
 18a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 18e:	4b 01       	movw	r8, r22
 190:	aa 24       	eor	r10, r10
 192:	97 fc       	sbrc	r9, 7
 194:	a0 94       	com	r10
 196:	ba 2c       	mov	r11, r10
 198:	2a e0       	ldi	r18, 0x0A	; 10
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b5 01       	movw	r22, r10
 19e:	a4 01       	movw	r20, r8
 1a0:	ce 01       	movw	r24, r28
 1a2:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1a6:	e8 0e       	add	r14, r24
 1a8:	f9 1e       	adc	r15, r25
 1aa:	c5 01       	movw	r24, r10
 1ac:	b4 01       	movw	r22, r8
 1ae:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1b2:	9b 01       	movw	r18, r22
 1b4:	ac 01       	movw	r20, r24
 1b6:	67 2d       	mov	r22, r7
 1b8:	70 2f       	mov	r23, r16
 1ba:	8c 2d       	mov	r24, r12
 1bc:	9d 2d       	mov	r25, r13
 1be:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 1c2:	c6 2e       	mov	r12, r22
 1c4:	97 2e       	mov	r9, r23
 1c6:	88 2e       	mov	r8, r24
 1c8:	79 2e       	mov	r7, r25
 1ca:	11 50       	subi	r17, 0x01	; 1
 1cc:	11 11       	cpse	r17, r1
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <_ZN5Print10printFloatEdh+0x1d0>
 1d0:	c7 01       	movw	r24, r14
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	bf 90       	pop	r11
 1e4:	af 90       	pop	r10
 1e6:	9f 90       	pop	r9
 1e8:	8f 90       	pop	r8
 1ea:	7f 90       	pop	r7
 1ec:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEdi>

Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  16:	98 01       	movw	r18, r16
  18:	28 0f       	add	r18, r24
  1a:	39 1f       	adc	r19, r25
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000111c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003175  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream9timedReadEv 00000060  00000000  00000000  000042c5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6Stream9timedPeekEv 00000060  00000000  00000000  00004325  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream13peekNextDigitEv 00000036  00000000  00000000  00004385  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  000043bb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN6Stream9findUntilEPcjS0_j 000000c6  00000000  00000000  000043c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream9findUntilEPcS0_ 00000034  00000000  00000000  0000448d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream4findEPc 00000008  00000000  00000000  000044c1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  000044c9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream8parseIntEc 000000d4  00000000  00000000  000044df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream8parseIntEv 00000006  00000000  00000000  000045b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream10parseFloatEc 00000128  00000000  00000000  000045b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream10parseFloatEv 00000006  00000000  00000000  000046e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9readBytesEPcj 00000048  00000000  00000000  000046e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream14readBytesUntilEcPcj 00000062  00000000  00000000  0000472f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .rodata.str1.1 00000001  00000000  00000000  00004791  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .text._ZN6Stream10readStringEv 00000034  00000000  00000000  00004792  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6Stream15readStringUntilEc 00000050  00000000  00000000  000047c6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .comment      00000012  00000000  00000000  00004816  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   e:	68 87       	std	Y+8, r22	; 0x08
  10:	79 87       	std	Y+9, r23	; 0x09
  String ret;
  12:	8a 87       	std	Y+10, r24	; 0x0a
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  int c = timedRead();
  1a:	06 80       	ldd	r0, Z+6	; 0x06
  1c:	f7 81       	ldd	r31, Z+7	; 0x07
  1e:	e0 2d       	mov	r30, r0
  while (c >= 0 && c != terminator)
  20:	ce 01       	movw	r24, r28
  22:	09 95       	icall
  24:	9c 01       	movw	r18, r24
  26:	97 ff       	sbrs	r25, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream9timedReadEv+0x2a>
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  2e:	08 85       	ldd	r16, Y+8	; 0x08
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
  30:	19 85       	ldd	r17, Y+9	; 0x09
  32:	2a 85       	ldd	r18, Y+10	; 0x0a
  34:	3b 85       	ldd	r19, Y+11	; 0x0b
  36:	60 1b       	sub	r22, r16
  {
    ret += (char)c;
    c = timedRead();
  38:	71 0b       	sbc	r23, r17
  3a:	82 0b       	sbc	r24, r18
  3c:	93 0b       	sbc	r25, r19
  3e:	0c 81       	ldd	r16, Y+4	; 0x04
  }
  return ret;
}
  40:	1d 81       	ldd	r17, Y+5	; 0x05
  42:	2e 81       	ldd	r18, Y+6	; 0x06
  44:	3f 81       	ldd	r19, Y+7	; 0x07
  46:	60 17       	cp	r22, r16
  48:	71 07       	cpc	r23, r17
  4a:	82 07       	cpc	r24, r18
  4c:	93 07       	cpc	r25, r19
  4e:	00 f0       	brcs	.+0      	; 0x50 <_ZN6Stream9timedReadEv+0x50>
  50:	2f ef       	ldi	r18, 0xFF	; 255
  52:	3f ef       	ldi	r19, 0xFF	; 255
  54:	c9 01       	movw	r24, r18
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
   e:	68 87       	std	Y+8, r22	; 0x08
  10:	79 87       	std	Y+9, r23	; 0x09
  String ret;
  12:	8a 87       	std	Y+10, r24	; 0x0a
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  int c = timedRead();
  1a:	00 84       	ldd	r0, Z+8	; 0x08
  1c:	f1 85       	ldd	r31, Z+9	; 0x09
  1e:	e0 2d       	mov	r30, r0
  while (c >= 0 && c != terminator)
  20:	ce 01       	movw	r24, r28
  22:	09 95       	icall
  24:	9c 01       	movw	r18, r24
  26:	97 ff       	sbrs	r25, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream9timedPeekEv+0x2a>
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
  2e:	08 85       	ldd	r16, Y+8	; 0x08
  30:	19 85       	ldd	r17, Y+9	; 0x09
  32:	2a 85       	ldd	r18, Y+10	; 0x0a
  34:	3b 85       	ldd	r19, Y+11	; 0x0b
  36:	60 1b       	sub	r22, r16
  {
    ret += (char)c;
    c = timedRead();
  38:	71 0b       	sbc	r23, r17
  3a:	82 0b       	sbc	r24, r18
  3c:	93 0b       	sbc	r25, r19
  3e:	0c 81       	ldd	r16, Y+4	; 0x04
  }
  return ret;
}
  40:	1d 81       	ldd	r17, Y+5	; 0x05
  42:	2e 81       	ldd	r18, Y+6	; 0x06
  44:	3f 81       	ldd	r19, Y+7	; 0x07
  46:	60 17       	cp	r22, r16
  48:	71 07       	cpc	r23, r17
  4a:	82 07       	cpc	r24, r18
  4c:	93 07       	cpc	r25, r19
  4e:	00 f0       	brcs	.+0      	; 0x50 <_ZN6Stream9timedPeekEv+0x50>
  50:	2f ef       	ldi	r18, 0xFF	; 255
  52:	3f ef       	ldi	r19, 0xFF	; 255
  54:	c9 01       	movw	r24, r18
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000000 <_ZN6Stream13peekNextDigitEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	ce 01       	movw	r24, r28
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitEv>
   c:	9c 01       	movw	r18, r24
   e:	97 fd       	sbrc	r25, 7
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN6Stream13peekNextDigitEv+0x12>
  String ret;
  12:	8d 32       	cpi	r24, 0x2D	; 45
  14:	91 05       	cpc	r25, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6Stream13peekNextDigitEv+0x18>
  18:	c0 97       	sbiw	r24, 0x30	; 48
  int c = timedRead();
  1a:	0a 97       	sbiw	r24, 0x0a	; 10
  1c:	00 f0       	brcs	.+0      	; 0x1e <_ZN6Stream13peekNextDigitEv+0x1e>
  1e:	e8 81       	ld	r30, Y
  while (c >= 0 && c != terminator)
  20:	f9 81       	ldd	r31, Y+1	; 0x01
  22:	06 80       	ldd	r0, Z+6	; 0x06
  24:	f7 81       	ldd	r31, Z+7	; 0x07
  26:	e0 2d       	mov	r30, r0
  28:	ce 01       	movw	r24, r28
  2a:	09 95       	icall
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6Stream13peekNextDigitEv+0x2e>
  2e:	c9 01       	movw	r24, r18
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	fc 01       	movw	r30, r24
   2:	44 83       	std	Z+4, r20	; 0x04
   4:	55 83       	std	Z+5, r21	; 0x05
   6:	66 83       	std	Z+6, r22	; 0x06
   8:	77 83       	std	Z+7, r23	; 0x07
   a:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  String ret;
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  int c = timedRead();
  1a:	df 93       	push	r29
  1c:	5c 01       	movw	r10, r24
  1e:	6b 01       	movw	r12, r22
  while (c >= 0 && c != terminator)
  20:	4a 01       	movw	r8, r20
  22:	39 01       	movw	r6, r18
  24:	fb 01       	movw	r30, r22
  26:	80 81       	ld	r24, Z
  28:	88 23       	and	r24, r24
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN6Stream9findUntilEPcjS0_j+0x2c>
  2c:	e1 2c       	mov	r14, r1
  2e:	f1 2c       	mov	r15, r1
  30:	c0 e0       	ldi	r28, 0x00	; 0
  32:	d0 e0       	ldi	r29, 0x00	; 0
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6Stream9findUntilEPcjS0_j+0x36>
  36:	f6 01       	movw	r30, r12
  {
    ret += (char)c;
    c = timedRead();
  38:	ec 0f       	add	r30, r28
  3a:	fd 1f       	adc	r31, r29
  3c:	20 81       	ld	r18, Z
  3e:	33 27       	eor	r19, r19
  }
  return ret;
}
  40:	27 fd       	sbrc	r18, 7
  42:	30 95       	com	r19
  44:	82 17       	cp	r24, r18
  46:	93 07       	cpc	r25, r19
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN6Stream9findUntilEPcjS0_j+0x4a>
  4a:	c0 e0       	ldi	r28, 0x00	; 0
  4c:	d0 e0       	ldi	r29, 0x00	; 0
  4e:	f6 01       	movw	r30, r12
  50:	ec 0f       	add	r30, r28
  52:	fd 1f       	adc	r31, r29
  54:	20 81       	ld	r18, Z
  56:	33 27       	eor	r19, r19
  58:	27 fd       	sbrc	r18, 7
  5a:	30 95       	com	r19
  5c:	82 17       	cp	r24, r18
  5e:	93 07       	cpc	r25, r19
  60:	01 f4       	brne	.+0      	; 0x62 <_ZN6Stream9findUntilEPcjS0_j+0x62>
  62:	21 96       	adiw	r28, 0x01	; 1
  64:	c8 15       	cp	r28, r8
  66:	d9 05       	cpc	r29, r9
  68:	00 f4       	brcc	.+0      	; 0x6a <_ZN6Stream9findUntilEPcjS0_j+0x6a>
  6a:	01 15       	cp	r16, r1
  6c:	11 05       	cpc	r17, r1
  6e:	01 f0       	breq	.+0      	; 0x70 <_ZN6Stream9findUntilEPcjS0_j+0x70>
  70:	f3 01       	movw	r30, r6
  72:	ee 0d       	add	r30, r14
  74:	ff 1d       	adc	r31, r15
  76:	20 81       	ld	r18, Z
  78:	33 27       	eor	r19, r19
  7a:	27 fd       	sbrc	r18, 7
  7c:	30 95       	com	r19
  7e:	82 17       	cp	r24, r18
  80:	93 07       	cpc	r25, r19
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN6Stream9findUntilEPcjS0_j+0x84>
  84:	ff ef       	ldi	r31, 0xFF	; 255
  86:	ef 1a       	sub	r14, r31
  88:	ff 0a       	sbc	r15, r31
  8a:	e0 16       	cp	r14, r16
  8c:	f1 06       	cpc	r15, r17
  8e:	00 f0       	brcs	.+0      	; 0x90 <_ZN6Stream9findUntilEPcjS0_j+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN6Stream9findUntilEPcjS0_j+0x92>
  92:	e1 2c       	mov	r14, r1
  94:	f1 2c       	mov	r15, r1
  96:	c5 01       	movw	r24, r10
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  9c:	18 16       	cp	r1, r24
  9e:	19 06       	cpc	r1, r25
  a0:	04 f0       	brlt	.+0      	; 0xa2 <_ZN6Stream9findUntilEPcjS0_j+0xa2>
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	7f 90       	pop	r7
  c2:	6f 90       	pop	r6
  c4:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	9a 01       	movw	r18, r20
   6:	da 01       	movw	r26, r20
   8:	0d 90       	ld	r0, X+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6Stream9findUntilEPcS0_+0xe>
   e:	8d 01       	movw	r16, r26
  10:	01 50       	subi	r16, 0x01	; 1
  String ret;
  12:	11 09       	sbc	r17, r1
  14:	04 1b       	sub	r16, r20
  16:	15 0b       	sbc	r17, r21
  18:	fb 01       	movw	r30, r22
  int c = timedRead();
  1a:	01 90       	ld	r0, Z+
  1c:	00 20       	and	r0, r0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream9findUntilEPcS0_+0x20>
  while (c >= 0 && c != terminator)
  20:	af 01       	movw	r20, r30
  22:	41 50       	subi	r20, 0x01	; 1
  24:	51 09       	sbc	r21, r1
  26:	46 1b       	sub	r20, r22
  28:	57 0b       	sbc	r21, r23
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6Stream4findEPc>

Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	00 e0       	ldi	r16, 0x00	; 0
   6:	10 e0       	ldi	r17, 0x00	; 0
   8:	20 e0       	ldi	r18, 0x00	; 0
   a:	30 e0       	ldi	r19, 0x00	; 0
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPcj>
  10:	1f 91       	pop	r17
  String ret;
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEc:

00000000 <_ZN6Stream8parseIntEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6Stream8parseIntEc+0x10>
  10:	00 d0       	rcall	.+0      	; 0x12 <_ZN6Stream8parseIntEc+0x12>
  String ret;
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	6c 01       	movw	r12, r24
  18:	06 2f       	mov	r16, r22
  int c = timedRead();
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  1e:	fc 01       	movw	r30, r24
  while (c >= 0 && c != terminator)
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	a9 01       	movw	r20, r18
  26:	97 fd       	sbrc	r25, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream8parseIntEc+0x2a>
  2a:	f1 2c       	mov	r15, r1
  2c:	11 27       	eor	r17, r17
  2e:	07 fd       	sbrc	r16, 7
  30:	10 95       	com	r17
  32:	e0 17       	cp	r30, r16
  34:	f1 07       	cpc	r31, r17
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN6Stream8parseIntEc+0x38>
  {
    ret += (char)c;
    c = timedRead();
  38:	ed 32       	cpi	r30, 0x2D	; 45
  3a:	f1 05       	cpc	r31, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6Stream8parseIntEc+0x3e>
  3e:	cf 01       	movw	r24, r30
  }
  return ret;
}
  40:	c0 97       	sbiw	r24, 0x30	; 48
  42:	0a 97       	sbiw	r24, 0x0a	; 10
  44:	00 f4       	brcc	.+0      	; 0x46 <_ZN6Stream8parseIntEc+0x46>
  46:	aa e0       	ldi	r26, 0x0A	; 10
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  4e:	9b 01       	movw	r18, r22
  50:	ac 01       	movw	r20, r24
  52:	cf 01       	movw	r24, r30
  54:	aa 27       	eor	r26, r26
  56:	97 fd       	sbrc	r25, 7
  58:	a0 95       	com	r26
  5a:	ba 2f       	mov	r27, r26
  5c:	28 0f       	add	r18, r24
  5e:	39 1f       	adc	r19, r25
  60:	4a 1f       	adc	r20, r26
  62:	5b 1f       	adc	r21, r27
  64:	20 53       	subi	r18, 0x30	; 48
  66:	31 09       	sbc	r19, r1
  68:	41 09       	sbc	r20, r1
  6a:	51 09       	sbc	r21, r1
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6Stream8parseIntEc+0x6e>
  6e:	ff 24       	eor	r15, r15
  70:	f3 94       	inc	r15
  72:	d6 01       	movw	r26, r12
  74:	ed 91       	ld	r30, X+
  76:	fc 91       	ld	r31, X
  78:	06 80       	ldd	r0, Z+6	; 0x06
  7a:	f7 81       	ldd	r31, Z+7	; 0x07
  7c:	e0 2d       	mov	r30, r0
  7e:	c6 01       	movw	r24, r12
  80:	29 83       	std	Y+1, r18	; 0x01
  82:	3a 83       	std	Y+2, r19	; 0x02
  84:	4b 83       	std	Y+3, r20	; 0x03
  86:	5c 83       	std	Y+4, r21	; 0x04
  88:	09 95       	icall
  8a:	c6 01       	movw	r24, r12
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  90:	fc 01       	movw	r30, r24
  92:	c0 97       	sbiw	r24, 0x30	; 48
  94:	29 81       	ldd	r18, Y+1	; 0x01
  96:	3a 81       	ldd	r19, Y+2	; 0x02
  98:	4b 81       	ldd	r20, Y+3	; 0x03
  9a:	5c 81       	ldd	r21, Y+4	; 0x04
  9c:	0a 97       	sbiw	r24, 0x0a	; 10
  9e:	00 f0       	brcs	.+0      	; 0xa0 <_ZN6Stream8parseIntEc+0xa0>
  a0:	e0 17       	cp	r30, r16
  a2:	f1 07       	cpc	r31, r17
  a4:	01 f0       	breq	.+0      	; 0xa6 <_ZN6Stream8parseIntEc+0xa6>
  a6:	ff 20       	and	r15, r15
  a8:	01 f0       	breq	.+0      	; 0xaa <_ZN6Stream8parseIntEc+0xaa>
  aa:	50 95       	com	r21
  ac:	40 95       	com	r20
  ae:	30 95       	com	r19
  b0:	21 95       	neg	r18
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	4f 4f       	sbci	r20, 0xFF	; 255
  b6:	5f 4f       	sbci	r21, 0xFF	; 255
  b8:	b9 01       	movw	r22, r18
  ba:	ca 01       	movw	r24, r20
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	ff 90       	pop	r15
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

00000000 <_ZN6Stream8parseIntEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6Stream8parseIntEv>

Disassembly of section .text._ZN6Stream10parseFloatEc:

00000000 <_ZN6Stream10parseFloatEc>:
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  String ret;
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  int c = timedRead();
  1a:	ec 01       	movw	r28, r24
  1c:	86 2e       	mov	r8, r22
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  while (c >= 0 && c != terminator)
  22:	e8 2f       	mov	r30, r24
  24:	87 fd       	sbrc	r24, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream10parseFloatEc+0x28>
  28:	a1 2c       	mov	r10, r1
  2a:	b1 2c       	mov	r11, r1
  2c:	00 e8       	ldi	r16, 0x80	; 128
  2e:	1f e3       	ldi	r17, 0x3F	; 63
  30:	c1 2c       	mov	r12, r1
  32:	d1 2c       	mov	r13, r1
  34:	76 01       	movw	r14, r12
  36:	71 2c       	mov	r7, r1
  {
    ret += (char)c;
    c = timedRead();
  38:	91 2c       	mov	r9, r1
  3a:	e8 15       	cp	r30, r8
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6Stream10parseFloatEc+0x3e>
  3e:	ed 32       	cpi	r30, 0x2D	; 45
  }
  return ret;
}
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN6Stream10parseFloatEc+0x42>
  42:	ee 32       	cpi	r30, 0x2E	; 46
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN6Stream10parseFloatEc+0x46>
  46:	8e 2f       	mov	r24, r30
  48:	80 53       	subi	r24, 0x30	; 48
  4a:	8a 30       	cpi	r24, 0x0A	; 10
  4c:	00 f4       	brcc	.+0      	; 0x4e <_ZN6Stream10parseFloatEc+0x4e>
  4e:	aa e0       	ldi	r26, 0x0A	; 10
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	a7 01       	movw	r20, r14
  54:	96 01       	movw	r18, r12
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  5a:	6b 01       	movw	r12, r22
  5c:	7c 01       	movw	r14, r24
  5e:	8e 2f       	mov	r24, r30
  60:	99 27       	eor	r25, r25
  62:	87 fd       	sbrc	r24, 7
  64:	90 95       	com	r25
  66:	a9 2f       	mov	r26, r25
  68:	b9 2f       	mov	r27, r25
  6a:	c8 0e       	add	r12, r24
  6c:	d9 1e       	adc	r13, r25
  6e:	ea 1e       	adc	r14, r26
  70:	fb 1e       	adc	r15, r27
  72:	80 e3       	ldi	r24, 0x30	; 48
  74:	c8 1a       	sub	r12, r24
  76:	d1 08       	sbc	r13, r1
  78:	e1 08       	sbc	r14, r1
  7a:	f1 08       	sbc	r15, r1
  7c:	77 20       	and	r7, r7
  7e:	01 f0       	breq	.+0      	; 0x80 <_ZN6Stream10parseFloatEc+0x80>
  80:	2d ec       	ldi	r18, 0xCD	; 205
  82:	3c ec       	ldi	r19, 0xCC	; 204
  84:	4c ec       	ldi	r20, 0xCC	; 204
  86:	5d e3       	ldi	r21, 0x3D	; 61
  88:	6a 2d       	mov	r22, r10
  8a:	7b 2d       	mov	r23, r11
  8c:	80 2f       	mov	r24, r16
  8e:	91 2f       	mov	r25, r17
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  94:	5b 01       	movw	r10, r22
  96:	8c 01       	movw	r16, r24
  98:	00 c0       	rjmp	.+0      	; 0x9a <_ZN6Stream10parseFloatEc+0x9a>
  9a:	99 24       	eor	r9, r9
  9c:	93 94       	inc	r9
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6Stream10parseFloatEc+0xa0>
  a0:	77 24       	eor	r7, r7
  a2:	73 94       	inc	r7
  a4:	e8 81       	ld	r30, Y
  a6:	f9 81       	ldd	r31, Y+1	; 0x01
  a8:	06 80       	ldd	r0, Z+6	; 0x06
  aa:	f7 81       	ldd	r31, Z+7	; 0x07
  ac:	e0 2d       	mov	r30, r0
  ae:	ce 01       	movw	r24, r28
  b0:	09 95       	icall
  b2:	ce 01       	movw	r24, r28
  b4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  b8:	e8 2f       	mov	r30, r24
  ba:	98 2f       	mov	r25, r24
  bc:	90 53       	subi	r25, 0x30	; 48
  be:	9a 30       	cpi	r25, 0x0A	; 10
  c0:	00 f4       	brcc	.+0      	; 0xc2 <_ZN6Stream10parseFloatEc+0xc2>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN6Stream10parseFloatEc+0xc4>
  c4:	8e 32       	cpi	r24, 0x2E	; 46
  c6:	01 f4       	brne	.+0      	; 0xc8 <_ZN6Stream10parseFloatEc+0xc8>
  c8:	00 c0       	rjmp	.+0      	; 0xca <_ZN6Stream10parseFloatEc+0xca>
  ca:	88 15       	cp	r24, r8
  cc:	01 f4       	brne	.+0      	; 0xce <_ZN6Stream10parseFloatEc+0xce>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN6Stream10parseFloatEc+0xd0>
  d0:	99 20       	and	r9, r9
  d2:	01 f0       	breq	.+0      	; 0xd4 <_ZN6Stream10parseFloatEc+0xd4>
  d4:	f0 94       	com	r15
  d6:	e0 94       	com	r14
  d8:	d0 94       	com	r13
  da:	c0 94       	com	r12
  dc:	c1 1c       	adc	r12, r1
  de:	d1 1c       	adc	r13, r1
  e0:	e1 1c       	adc	r14, r1
  e2:	f1 1c       	adc	r15, r1
  e4:	c7 01       	movw	r24, r14
  e6:	b6 01       	movw	r22, r12
  e8:	77 20       	and	r7, r7
  ea:	01 f0       	breq	.+0      	; 0xec <_ZN6Stream10parseFloatEc+0xec>
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  f0:	2a 2d       	mov	r18, r10
  f2:	3b 2d       	mov	r19, r11
  f4:	40 2f       	mov	r20, r16
  f6:	51 2f       	mov	r21, r17
  f8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_ZN6Stream10parseFloatEc+0xfe>
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 102:	00 c0       	rjmp	.+0      	; 0x104 <_ZN6Stream10parseFloatEc+0x104>
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	df 90       	pop	r13
 11a:	cf 90       	pop	r12
 11c:	bf 90       	pop	r11
 11e:	af 90       	pop	r10
 120:	9f 90       	pop	r9
 122:	8f 90       	pop	r8
 124:	7f 90       	pop	r7
 126:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

00000000 <_ZN6Stream10parseFloatEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6Stream10parseFloatEv>

Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  String ret;
  12:	8b 01       	movw	r16, r22
  14:	6a 01       	movw	r12, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  int c = timedRead();
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6Stream9readBytesEPcj+0x1c>
  1c:	c7 01       	movw	r24, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
  while (c >= 0 && c != terminator)
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9readBytesEPcj+0x26>
  26:	f8 01       	movw	r30, r16
  28:	81 93       	st	Z+, r24
  2a:	8f 01       	movw	r16, r30
  2c:	21 96       	adiw	r28, 0x01	; 1
  2e:	cc 15       	cp	r28, r12
  30:	dd 05       	cpc	r29, r13
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN6Stream9readBytesEPcj+0x34>
  34:	ce 01       	movw	r24, r28
  36:	df 91       	pop	r29
  {
    ret += (char)c;
    c = timedRead();
  38:	cf 91       	pop	r28
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
  }
  return ret;
}
  40:	ef 90       	pop	r14
  42:	df 90       	pop	r13
  44:	cf 90       	pop	r12
  46:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  String ret;
  12:	df 93       	push	r29
  14:	6c 01       	movw	r12, r24
  16:	8a 01       	movw	r16, r20
  18:	79 01       	movw	r14, r18
  int c = timedRead();
  1a:	c0 e0       	ldi	r28, 0x00	; 0
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	21 15       	cp	r18, r1
  while (c >= 0 && c != terminator)
  20:	31 05       	cpc	r19, r1
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN6Stream14readBytesUntilEcPcj+0x24>
  24:	a6 2e       	mov	r10, r22
  26:	bb 24       	eor	r11, r11
  28:	a7 fc       	sbrc	r10, 7
  2a:	b0 94       	com	r11
  2c:	c6 01       	movw	r24, r12
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
  32:	97 fd       	sbrc	r25, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6Stream14readBytesUntilEcPcj+0x36>
  36:	8a 15       	cp	r24, r10
  {
    ret += (char)c;
    c = timedRead();
  38:	9b 05       	cpc	r25, r11
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN6Stream14readBytesUntilEcPcj+0x3c>
  3c:	f8 01       	movw	r30, r16
  3e:	81 93       	st	Z+, r24
  }
  return ret;
}
  40:	8f 01       	movw	r16, r30
  42:	21 96       	adiw	r28, 0x01	; 1
  44:	ce 15       	cp	r28, r14
  46:	df 05       	cpc	r29, r15
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN6Stream14readBytesUntilEcPcj+0x4a>
  4a:	ce 01       	movw	r24, r28
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	df 90       	pop	r13
  5a:	cf 90       	pop	r12
  5c:	bf 90       	pop	r11
  5e:	af 90       	pop	r10
  60:	08 95       	ret

Disassembly of section .text._ZN6Stream10readStringEv:

00000000 <_ZN6Stream10readStringEv>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	60 e0       	ldi	r22, 0x00	; 0
   e:	70 e0       	ldi	r23, 0x00	; 0
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  String ret;
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN6Stream10readStringEv+0x16>
  16:	68 2f       	mov	r22, r24
  18:	ce 01       	movw	r24, r28
  int c = timedRead();
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  1e:	c8 01       	movw	r24, r16
  while (c >= 0 && c != terminator)
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream10readStringEv+0x28>
  28:	ce 01       	movw	r24, r28
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6Stream15readStringUntilEc:

00000000 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	8b 01       	movw	r16, r22
  10:	e4 2e       	mov	r14, r20
  String ret;
  12:	60 e0       	ldi	r22, 0x00	; 0
  14:	70 e0       	ldi	r23, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  int c = timedRead();
  1a:	c8 01       	movw	r24, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  while (c >= 0 && c != terminator)
  20:	ff 24       	eor	r15, r15
  22:	e7 fc       	sbrc	r14, 7
  24:	f0 94       	com	r15
  26:	97 fd       	sbrc	r25, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream15readStringUntilEc+0x2a>
  2a:	8e 15       	cp	r24, r14
  2c:	9f 05       	cpc	r25, r15
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6Stream15readStringUntilEc+0x30>
  30:	68 2f       	mov	r22, r24
  32:	ce 01       	movw	r24, r28
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  {
    ret += (char)c;
    c = timedRead();
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6Stream15readStringUntilEc+0x40>
  }
  return ret;
}
  40:	ce 01       	movw	r24, r28
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c30  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002e10  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z4tonehjm 000003fe  00000000  00000000  00003a74  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z12disableTimerh 00000040  00000000  00000000  00003e72  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002a  00000000  00000000  00003eb2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_7 000000b8  00000000  00000000  00003edc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.timer2_pin_mask 00000001  00000000  00000000  00003f94  2**0
                  ALLOC
 10 .bss.timer2_pin_port 00000002  00000000  00000000  00003f94  2**0
                  ALLOC
 11 .bss.timer2_toggle_count 00000004  00000000  00000000  00003f94  2**0
                  ALLOC
 12 .bss.timer1_pin_mask 00000001  00000000  00000000  00003f94  2**0
                  ALLOC
 13 .bss.timer1_pin_port 00000002  00000000  00000000  00003f94  2**0
                  ALLOC
 14 .bss.timer1_toggle_count 00000004  00000000  00000000  00003f94  2**0
                  ALLOC
 15 .bss.timer0_pin_mask 00000001  00000000  00000000  00003f94  2**0
                  ALLOC
 16 .bss.timer0_pin_port 00000002  00000000  00000000  00003f94  2**0
                  ALLOC
 17 .bss.timer0_toggle_count 00000004  00000000  00000000  00003f94  2**0
                  ALLOC
 18 .data._ZL9tone_pins 00000001  00000000  00000000  00003f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .progmem.data._ZL21tone_pin_to_timer_PGM 00000001  00000000  00000000  00003f95  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .comment      00000012  00000000  00000000  00003f96  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	3f 92       	push	r3
   2:	4f 92       	push	r4
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	cf 93       	push	r28
  20:	df 93       	push	r29

  if (timer2_toggle_count != 0)
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	00 d0       	rcall	.+0      	; 0x26 <_Z4tonehjm+0x26>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	8b 01       	movw	r16, r22
  2c:	29 01       	movw	r4, r18
  2e:	3a 01       	movw	r6, r20
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	98 17       	cp	r25, r24
  36:	01 f0       	breq	.+0      	; 0x38 <_Z4tonehjm+0x38>
  38:	9f 3f       	cpi	r25, 0xFF	; 255
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z4tonehjm+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_Z4tonehjm+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_Z4tonehjm+0x40>
  40:	e0 e0       	ldi	r30, 0x00	; 0
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	34 90       	lpm	r3, Z+
  46:	00 c0       	rjmp	.+0      	; 0x48 <_Z4tonehjm+0x48>
  48:	80 93 00 00 	sts	0x0000, r24

    if (timer2_toggle_count > 0)
  4c:	e0 e0       	ldi	r30, 0x00	; 0
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	34 90       	lpm	r3, Z+
  52:	9f ef       	ldi	r25, 0xFF	; 255
  54:	39 16       	cp	r3, r25
  56:	01 f4       	brne	.+0      	; 0x58 <_Z4tonehjm+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <_Z4tonehjm+0x5a>
  5a:	e1 e0       	ldi	r30, 0x01	; 1
  5c:	3e 16       	cp	r3, r30
  5e:	01 f0       	breq	.+0      	; 0x60 <_Z4tonehjm+0x60>
  60:	f2 e0       	ldi	r31, 0x02	; 2
  62:	3f 16       	cp	r3, r31
  64:	01 f4       	brne	.+0      	; 0x66 <_Z4tonehjm+0x66>
      timer2_toggle_count--;
  66:	00 c0       	rjmp	.+0      	; 0x68 <_Z4tonehjm+0x68>
  68:	31 10       	cpse	r3, r1
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_Z4tonehjm+0x6c>
  6c:	14 bc       	out	0x24, r1	; 36
  6e:	15 bc       	out	0x25, r1	; 37
  70:	94 b5       	in	r25, 0x24	; 36
  72:	92 60       	ori	r25, 0x02	; 2
  74:	94 bd       	out	0x24, r25	; 36
  76:	95 b5       	in	r25, 0x25	; 37
  78:	91 60       	ori	r25, 0x01	; 1
  7a:	95 bd       	out	0x25, r25	; 37
  7c:	28 2f       	mov	r18, r24
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
  82:	e0 50       	subi	r30, 0x00	; 0
  84:	f0 40       	sbci	r31, 0x00	; 0
  86:	e4 91       	lpm	r30, Z+
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	ee 0f       	add	r30, r30
  8c:	ff 1f       	adc	r31, r31
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  8e:	e0 50       	subi	r30, 0x00	; 0
  90:	f0 40       	sbci	r31, 0x00	; 0
  92:	45 91       	lpm	r20, Z+
  94:	54 91       	lpm	r21, Z+
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  96:	40 93 00 00 	sts	0x0000, r20
  9a:	50 93 00 00 	sts	0x0000, r21
  9e:	f9 01       	movw	r30, r18
  a0:	e0 50       	subi	r30, 0x00	; 0
  a2:	f0 40       	sbci	r31, 0x00	; 0
  a4:	24 91       	lpm	r18, Z+
  a6:	20 93 00 00 	sts	0x0000, r18
  aa:	00 c0       	rjmp	.+0      	; 0xac <_Z4tonehjm+0xac>
  ac:	10 92 80 00 	sts	0x0080, r1
  b0:	10 92 81 00 	sts	0x0081, r1
  b4:	90 91 81 00 	lds	r25, 0x0081
  b8:	98 60       	ori	r25, 0x08	; 8
  ba:	90 93 81 00 	sts	0x0081, r25
  be:	90 91 81 00 	lds	r25, 0x0081
  c2:	91 60       	ori	r25, 0x01	; 1
  c4:	90 93 81 00 	sts	0x0081, r25
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	e0 50       	subi	r30, 0x00	; 0
  d0:	f0 40       	sbci	r31, 0x00	; 0
  d2:	e4 91       	lpm	r30, Z+
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e0 50       	subi	r30, 0x00	; 0
  dc:	f0 40       	sbci	r31, 0x00	; 0
  de:	45 91       	lpm	r20, Z+
  e0:	54 91       	lpm	r21, Z+
  e2:	40 93 00 00 	sts	0x0000, r20
  e6:	50 93 00 00 	sts	0x0000, r21
  ea:	f9 01       	movw	r30, r18
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	f0 40       	sbci	r31, 0x00	; 0
  f0:	24 91       	lpm	r18, Z+
  f2:	20 93 00 00 	sts	0x0000, r18
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z4tonehjm+0xf8>
  f8:	10 92 b0 00 	sts	0x00B0, r1
  fc:	10 92 b1 00 	sts	0x00B1, r1
 100:	90 91 b0 00 	lds	r25, 0x00B0
 104:	92 60       	ori	r25, 0x02	; 2
 106:	90 93 b0 00 	sts	0x00B0, r25
 10a:	90 91 b1 00 	lds	r25, 0x00B1
 10e:	91 60       	ori	r25, 0x01	; 1
 110:	90 93 b1 00 	sts	0x00B1, r25
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	f0 40       	sbci	r31, 0x00	; 0
 11e:	e4 91       	lpm	r30, Z+
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e0 50       	subi	r30, 0x00	; 0
 128:	f0 40       	sbci	r31, 0x00	; 0
 12a:	45 91       	lpm	r20, Z+
 12c:	54 91       	lpm	r21, Z+
 12e:	40 93 00 00 	sts	0x0000, r20
 132:	50 93 00 00 	sts	0x0000, r21
 136:	f9 01       	movw	r30, r18
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	f0 40       	sbci	r31, 0x00	; 0
 13c:	24 91       	lpm	r18, Z+
 13e:	20 93 00 00 	sts	0x0000, r18
 142:	00 c0       	rjmp	.+0      	; 0x144 <_Z4tonehjm+0x144>
 144:	37 fc       	sbrc	r3, 7
 146:	00 c0       	rjmp	.+0      	; 0x148 <_Z4tonehjm+0x148>
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 14e:	48 01       	movw	r8, r16
 150:	a1 2c       	mov	r10, r1
 152:	b1 2c       	mov	r11, r1
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	72 e1       	ldi	r23, 0x12	; 18
 158:	8a e7       	ldi	r24, 0x7A	; 122
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	a5 01       	movw	r20, r10
 15e:	94 01       	movw	r18, r8
 160:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 164:	33 20       	and	r3, r3
 166:	01 f0       	breq	.+0      	; 0x168 <_Z4tonehjm+0x168>
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	38 12       	cpse	r3, r24
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z4tonehjm+0x16e>
 16e:	29 83       	std	Y+1, r18	; 0x01
 170:	3a 83       	std	Y+2, r19	; 0x02
 172:	4b 83       	std	Y+3, r20	; 0x03
 174:	5c 83       	std	Y+4, r21	; 0x04
 176:	69 01       	movw	r12, r18
 178:	7a 01       	movw	r14, r20
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	c9 1a       	sub	r12, r25
 17e:	d1 08       	sbc	r13, r1
 180:	e1 08       	sbc	r14, r1
 182:	f1 08       	sbc	r15, r1
 184:	ef ef       	ldi	r30, 0xFF	; 255
 186:	ce 16       	cp	r12, r30
 188:	d1 04       	cpc	r13, r1
 18a:	e1 04       	cpc	r14, r1
 18c:	f1 04       	cpc	r15, r1
 18e:	01 f0       	breq	.+0      	; 0x190 <_Z4tonehjm+0x190>
 190:	00 f4       	brcc	.+0      	; 0x192 <_Z4tonehjm+0x192>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_Z4tonehjm+0x194>
 194:	60 e4       	ldi	r22, 0x40	; 64
 196:	72 e4       	ldi	r23, 0x42	; 66
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	a5 01       	movw	r20, r10
 19e:	94 01       	movw	r18, r8
 1a0:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1a4:	69 01       	movw	r12, r18
 1a6:	7a 01       	movw	r14, r20
 1a8:	f1 e0       	ldi	r31, 0x01	; 1
 1aa:	cf 1a       	sub	r12, r31
 1ac:	d1 08       	sbc	r13, r1
 1ae:	e1 08       	sbc	r14, r1
 1b0:	f1 08       	sbc	r15, r1
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	38 12       	cpse	r3, r24
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z4tonehjm+0x1b8>
 1b8:	9f ef       	ldi	r25, 0xFF	; 255
 1ba:	c9 16       	cp	r12, r25
 1bc:	d1 04       	cpc	r13, r1
 1be:	e1 04       	cpc	r14, r1
 1c0:	f1 04       	cpc	r15, r1
 1c2:	01 f0       	breq	.+0      	; 0x1c4 <_Z4tonehjm+0x1c4>
 1c4:	00 f4       	brcc	.+0      	; 0x1c6 <_Z4tonehjm+0x1c6>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <_Z4tonehjm+0x1c8>
 1c8:	60 e9       	ldi	r22, 0x90	; 144
 1ca:	70 ed       	ldi	r23, 0xD0	; 208
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	a5 01       	movw	r20, r10
 1d2:	94 01       	movw	r18, r8
 1d4:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1d8:	69 01       	movw	r12, r18
 1da:	7a 01       	movw	r14, r20
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	ce 1a       	sub	r12, r30
 1e0:	d1 08       	sbc	r13, r1
 1e2:	e1 08       	sbc	r14, r1
 1e4:	f1 08       	sbc	r15, r1
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_Z4tonehjm+0x1ea>
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	ff ef       	ldi	r31, 0xFF	; 255
 1ee:	cf 16       	cp	r12, r31
 1f0:	d1 04       	cpc	r13, r1
 1f2:	e1 04       	cpc	r14, r1
 1f4:	f1 04       	cpc	r15, r1
 1f6:	01 f0       	breq	.+0      	; 0x1f8 <_Z4tonehjm+0x1f8>
 1f8:	00 f4       	brcc	.+0      	; 0x1fa <_Z4tonehjm+0x1fa>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <_Z4tonehjm+0x1fc>
 1fc:	68 e4       	ldi	r22, 0x48	; 72
 1fe:	78 ee       	ldi	r23, 0xE8	; 232
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	a5 01       	movw	r20, r10
 206:	94 01       	movw	r18, r8
 208:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 20c:	69 01       	movw	r12, r18
 20e:	7a 01       	movw	r14, r20
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	c8 1a       	sub	r12, r24
 214:	d1 08       	sbc	r13, r1
 216:	e1 08       	sbc	r14, r1
 218:	f1 08       	sbc	r15, r1
 21a:	33 20       	and	r3, r3
 21c:	01 f0       	breq	.+0      	; 0x21e <_Z4tonehjm+0x21e>
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	39 12       	cpse	r3, r25
 222:	00 c0       	rjmp	.+0      	; 0x224 <_Z4tonehjm+0x224>
 224:	ef ef       	ldi	r30, 0xFF	; 255
 226:	ce 16       	cp	r12, r30
 228:	d1 04       	cpc	r13, r1
 22a:	e1 04       	cpc	r14, r1
 22c:	f1 04       	cpc	r15, r1
 22e:	01 f0       	breq	.+0      	; 0x230 <_Z4tonehjm+0x230>
 230:	00 f4       	brcc	.+0      	; 0x232 <_Z4tonehjm+0x232>
 232:	00 c0       	rjmp	.+0      	; 0x234 <_Z4tonehjm+0x234>
 234:	64 e2       	ldi	r22, 0x24	; 36
 236:	74 ef       	ldi	r23, 0xF4	; 244
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	a5 01       	movw	r20, r10
 23e:	94 01       	movw	r18, r8
 240:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 244:	69 01       	movw	r12, r18
 246:	7a 01       	movw	r14, r20
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	cf 1a       	sub	r12, r31
 24c:	d1 08       	sbc	r13, r1
 24e:	e1 08       	sbc	r14, r1
 250:	f1 08       	sbc	r15, r1
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	00 c0       	rjmp	.+0      	; 0x256 <_Z4tonehjm+0x256>
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	00 c0       	rjmp	.+0      	; 0x25a <_Z4tonehjm+0x25a>
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	c9 16       	cp	r12, r25
 260:	d1 04       	cpc	r13, r1
 262:	e1 04       	cpc	r14, r1
 264:	f1 04       	cpc	r15, r1
 266:	01 f0       	breq	.+0      	; 0x268 <_Z4tonehjm+0x268>
 268:	00 f0       	brcs	.+0      	; 0x26a <_Z4tonehjm+0x26a>
 26a:	62 e1       	ldi	r22, 0x12	; 18
 26c:	7a e7       	ldi	r23, 0x7A	; 122
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	a5 01       	movw	r20, r10
 274:	94 01       	movw	r18, r8
 276:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 27a:	69 01       	movw	r12, r18
 27c:	7a 01       	movw	r14, r20
 27e:	e1 e0       	ldi	r30, 0x01	; 1
 280:	ce 1a       	sub	r12, r30
 282:	d1 08       	sbc	r13, r1
 284:	e1 08       	sbc	r14, r1
 286:	f1 08       	sbc	r15, r1
 288:	31 10       	cpse	r3, r1
 28a:	00 c0       	rjmp	.+0      	; 0x28c <_Z4tonehjm+0x28c>
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	00 c0       	rjmp	.+0      	; 0x290 <_Z4tonehjm+0x290>
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	ff ef       	ldi	r31, 0xFF	; 255
 294:	cf 16       	cp	r12, r31
 296:	d1 04       	cpc	r13, r1
 298:	e1 04       	cpc	r14, r1
 29a:	f1 04       	cpc	r15, r1
 29c:	01 f0       	breq	.+0      	; 0x29e <_Z4tonehjm+0x29e>
 29e:	00 f0       	brcs	.+0      	; 0x2a0 <_Z4tonehjm+0x2a0>
 2a0:	c9 80       	ldd	r12, Y+1	; 0x01
 2a2:	da 80       	ldd	r13, Y+2	; 0x02
 2a4:	eb 80       	ldd	r14, Y+3	; 0x03
 2a6:	fc 80       	ldd	r15, Y+4	; 0x04
 2a8:	9a e0       	ldi	r25, 0x0A	; 10
 2aa:	f6 94       	lsr	r15
 2ac:	e7 94       	ror	r14
 2ae:	d7 94       	ror	r13
 2b0:	c7 94       	ror	r12
 2b2:	9a 95       	dec	r25
 2b4:	01 f4       	brne	.+0      	; 0x2b6 <_Z4tonehjm+0x2b6>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	c8 1a       	sub	r12, r24
 2ba:	d1 08       	sbc	r13, r1
 2bc:	e1 08       	sbc	r14, r1
 2be:	f1 08       	sbc	r15, r1
 2c0:	33 20       	and	r3, r3
 2c2:	01 f0       	breq	.+0      	; 0x2c4 <_Z4tonehjm+0x2c4>
 2c4:	87 e0       	ldi	r24, 0x07	; 7
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <_Z4tonehjm+0x2c8>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	33 20       	and	r3, r3
 2cc:	01 f0       	breq	.+0      	; 0x2ce <_Z4tonehjm+0x2ce>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <_Z4tonehjm+0x2d0>
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	85 bd       	out	0x25, r24	; 37
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <_Z4tonehjm+0x2d6>
 2d6:	80 93 b1 00 	sts	0x00B1, r24
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <_Z4tonehjm+0x2dc>
 2dc:	69 01       	movw	r12, r18
 2de:	7a 01       	movw	r14, r20
 2e0:	91 e0       	ldi	r25, 0x01	; 1
 2e2:	c9 1a       	sub	r12, r25
 2e4:	d1 08       	sbc	r13, r1
 2e6:	e1 08       	sbc	r14, r1
 2e8:	f1 08       	sbc	r15, r1
 2ea:	c1 14       	cp	r12, r1
 2ec:	d1 04       	cpc	r13, r1
 2ee:	e1 e0       	ldi	r30, 0x01	; 1
 2f0:	ee 06       	cpc	r14, r30
 2f2:	f1 04       	cpc	r15, r1
 2f4:	00 f0       	brcs	.+0      	; 0x2f6 <_Z4tonehjm+0x2f6>
 2f6:	68 e4       	ldi	r22, 0x48	; 72
 2f8:	78 ee       	ldi	r23, 0xE8	; 232
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	a5 01       	movw	r20, r10
 300:	94 01       	movw	r18, r8
 302:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 306:	69 01       	movw	r12, r18
 308:	7a 01       	movw	r14, r20
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	cf 1a       	sub	r12, r31
 30e:	d1 08       	sbc	r13, r1
 310:	e1 08       	sbc	r14, r1
 312:	f1 08       	sbc	r15, r1
 314:	93 e0       	ldi	r25, 0x03	; 3
 316:	00 c0       	rjmp	.+0      	; 0x318 <_Z4tonehjm+0x318>
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	38 12       	cpse	r3, r24
 31e:	00 c0       	rjmp	.+0      	; 0x320 <_Z4tonehjm+0x320>
 320:	80 91 81 00 	lds	r24, 0x0081
 324:	88 7f       	andi	r24, 0xF8	; 248
 326:	89 2b       	or	r24, r25
 328:	80 93 81 00 	sts	0x0081, r24
 32c:	41 14       	cp	r4, r1
 32e:	51 04       	cpc	r5, r1
 330:	61 04       	cpc	r6, r1
 332:	71 04       	cpc	r7, r1
 334:	01 f0       	breq	.+0      	; 0x336 <_Z4tonehjm+0x336>
 336:	d8 01       	movw	r26, r16
 338:	aa 0f       	add	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	a3 01       	movw	r20, r6
 33e:	92 01       	movw	r18, r4
 340:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 344:	28 ee       	ldi	r18, 0xE8	; 232
 346:	33 e0       	ldi	r19, 0x03	; 3
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 350:	00 c0       	rjmp	.+0      	; 0x352 <_Z4tonehjm+0x352>
 352:	2f ef       	ldi	r18, 0xFF	; 255
 354:	3f ef       	ldi	r19, 0xFF	; 255
 356:	a9 01       	movw	r20, r18
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	39 16       	cp	r3, r25
 35c:	01 f0       	breq	.+0      	; 0x35e <_Z4tonehjm+0x35e>
 35e:	e2 e0       	ldi	r30, 0x02	; 2
 360:	3e 16       	cp	r3, r30
 362:	01 f0       	breq	.+0      	; 0x364 <_Z4tonehjm+0x364>
 364:	31 10       	cpse	r3, r1
 366:	00 c0       	rjmp	.+0      	; 0x368 <_Z4tonehjm+0x368>
 368:	c7 bc       	out	0x27, r12	; 39
 36a:	20 93 00 00 	sts	0x0000, r18
 36e:	30 93 00 00 	sts	0x0000, r19
 372:	40 93 00 00 	sts	0x0000, r20
 376:	50 93 00 00 	sts	0x0000, r21
 37a:	80 91 6e 00 	lds	r24, 0x006E
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	80 93 6e 00 	sts	0x006E, r24
 384:	00 c0       	rjmp	.+0      	; 0x386 <_Z4tonehjm+0x386>
 386:	d0 92 89 00 	sts	0x0089, r13
 38a:	c0 92 88 00 	sts	0x0088, r12
 38e:	20 93 00 00 	sts	0x0000, r18
 392:	30 93 00 00 	sts	0x0000, r19
 396:	40 93 00 00 	sts	0x0000, r20
 39a:	50 93 00 00 	sts	0x0000, r21
 39e:	80 91 6f 00 	lds	r24, 0x006F
 3a2:	82 60       	ori	r24, 0x02	; 2
 3a4:	80 93 6f 00 	sts	0x006F, r24
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <_Z4tonehjm+0x3aa>
 3aa:	c0 92 b3 00 	sts	0x00B3, r12
 3ae:	20 93 00 00 	sts	0x0000, r18
 3b2:	30 93 00 00 	sts	0x0000, r19
 3b6:	40 93 00 00 	sts	0x0000, r20
 3ba:	50 93 00 00 	sts	0x0000, r21
 3be:	80 91 70 00 	lds	r24, 0x0070
 3c2:	82 60       	ori	r24, 0x02	; 2
 3c4:	80 93 70 00 	sts	0x0070, r24
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <_Z4tonehjm+0x3ca>
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_Z4tonehjm+0x3ce>
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <_Z4tonehjm+0x3d2>
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	9f 90       	pop	r9
 3f0:	8f 90       	pop	r8
 3f2:	7f 90       	pop	r7
 3f4:	6f 90       	pop	r6
 3f6:	5f 90       	pop	r5
 3f8:	4f 90       	pop	r4
 3fa:	3f 90       	pop	r3
 3fc:	08 95       	ret

Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	81 30       	cpi	r24, 0x01	; 1
   2:	01 f0       	breq	.+0      	; 0x4 <_Z12disableTimerh+0x4>
   4:	00 f0       	brcs	.+0      	; 0x6 <_Z12disableTimerh+0x6>
   6:	82 30       	cpi	r24, 0x02	; 2
   8:	01 f4       	brne	.+0      	; 0xa <_Z12disableTimerh+0xa>
   a:	00 c0       	rjmp	.+0      	; 0xc <_Z12disableTimerh+0xc>
   c:	10 92 6e 00 	sts	0x006E, r1
  10:	08 95       	ret
  12:	80 91 6f 00 	lds	r24, 0x006F
  16:	8d 7f       	andi	r24, 0xFD	; 253
  18:	80 93 6f 00 	sts	0x006F, r24
  1c:	08 95       	ret
  1e:	80 91 70 00 	lds	r24, 0x0070

  if (timer2_toggle_count != 0)
  22:	8d 7f       	andi	r24, 0xFD	; 253
  24:	80 93 70 00 	sts	0x0070, r24
  28:	81 e0       	ldi	r24, 0x01	; 1
  2a:	80 93 b0 00 	sts	0x00B0, r24
  2e:	80 91 b1 00 	lds	r24, 0x00B1
  32:	88 7f       	andi	r24, 0xF8	; 248
  34:	84 60       	ori	r24, 0x04	; 4
  36:	80 93 b1 00 	sts	0x00B1, r24
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3a:	10 92 b3 00 	sts	0x00B3, r1
  3e:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	cf 93       	push	r28
   2:	c8 2f       	mov	r28, r24
   4:	80 91 00 00 	lds	r24, 0x0000
   8:	8c 13       	cpse	r24, r28
   a:	00 c0       	rjmp	.+0      	; 0xc <_Z6noToneh+0xc>
   c:	e0 e0       	ldi	r30, 0x00	; 0
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	84 91       	lpm	r24, Z+
  12:	9f ef       	ldi	r25, 0xFF	; 255
  14:	90 93 00 00 	sts	0x0000, r25
  18:	00 c0       	rjmp	.+0      	; 0x1a <_Z6noToneh+0x1a>
  1a:	8f ef       	ldi	r24, 0xFF	; 255
  1c:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  20:	60 e0       	ldi	r22, 0x00	; 0

  if (timer2_toggle_count != 0)
  22:	8c 2f       	mov	r24, r28
  24:	cf 91       	pop	r28
  26:	0c 94 00 00 	jmp	0	; 0x0 <_Z6noToneh>

Disassembly of section .text.__vector_7:

00000000 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	a0 91 00 00 	lds	r26, 0x0000
  2e:	b0 91 00 00 	lds	r27, 0x0000
  32:	89 2b       	or	r24, r25
  34:	8a 2b       	or	r24, r26
  36:	8b 2b       	or	r24, r27
  38:	01 f0       	breq	.+0      	; 0x3a <__vector_7+0x3a>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3a:	90 91 00 00 	lds	r25, 0x0000
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	80 81       	ld	r24, Z
  48:	89 27       	eor	r24, r25
  4a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
  4c:	80 91 00 00 	lds	r24, 0x0000
  50:	90 91 00 00 	lds	r25, 0x0000
  54:	a0 91 00 00 	lds	r26, 0x0000
  58:	b0 91 00 00 	lds	r27, 0x0000
  5c:	18 16       	cp	r1, r24
  5e:	19 06       	cpc	r1, r25
  60:	1a 06       	cpc	r1, r26
  62:	1b 06       	cpc	r1, r27
  64:	04 f4       	brge	.+0      	; 0x66 <__vector_7+0x66>
      timer2_toggle_count--;
  66:	80 91 00 00 	lds	r24, 0x0000
  6a:	90 91 00 00 	lds	r25, 0x0000
  6e:	a0 91 00 00 	lds	r26, 0x0000
  72:	b0 91 00 00 	lds	r27, 0x0000
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	a1 09       	sbc	r26, r1
  7a:	b1 09       	sbc	r27, r1
  7c:	80 93 00 00 	sts	0x0000, r24
  80:	90 93 00 00 	sts	0x0000, r25
  84:	a0 93 00 00 	sts	0x0000, r26
  88:	b0 93 00 00 	sts	0x0000, r27
  8c:	00 c0       	rjmp	.+0      	; 0x8e <__vector_7+0x8e>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  8e:	80 91 00 00 	lds	r24, 0x0000
  92:	0e 94 00 00 	call	0	; 0x0 <__vector_7>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  96:	ff 91       	pop	r31
  98:	ef 91       	pop	r30
  9a:	bf 91       	pop	r27
  9c:	af 91       	pop	r26
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	7f 91       	pop	r23
  a4:	6f 91       	pop	r22
  a6:	5f 91       	pop	r21
  a8:	4f 91       	pop	r20
  aa:	3f 91       	pop	r19
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000004c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002bcf  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  000030cb  2**0
                  CONTENTS, READONLY

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006fc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cb7  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.attachInterrupt 00000040  00000000  00000000  000013e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.detachInterrupt 00000020  00000000  00000000  00001427  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_1 0000005a  00000000  00000000  00001447  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_2 0000005a  00000000  00000000  000014a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.intFunc  00000004  00000000  00000000  000014fb  2**0
                  ALLOC
 10 .comment      00000012  00000000  00000000  000014fb  2**0
                  CONTENTS, READONLY

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	e8 2f       	mov	r30, r24
   6:	f0 e0       	ldi	r31, 0x00	; 0
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	71 83       	std	Z+1, r23	; 0x01
  12:	60 83       	st	Z, r22
  14:	81 30       	cpi	r24, 0x01	; 1
  16:	01 f0       	breq	.+0      	; 0x18 <attachInterrupt+0x18>
  18:	80 91 69 00 	lds	r24, 0x0069
  1c:	8c 7f       	andi	r24, 0xFC	; 252
  1e:	84 2b       	or	r24, r20
  20:	80 93 69 00 	sts	0x0069, r24
  if(intFunc[EXTERNAL_INT_1])
  24:	e8 9a       	sbi	0x1d, 0	; 29
  26:	08 95       	ret
  28:	80 91 69 00 	lds	r24, 0x0069
  2c:	44 0f       	add	r20, r20
    intFunc[EXTERNAL_INT_1]();
  2e:	55 1f       	adc	r21, r21
  30:	44 0f       	add	r20, r20
  32:	55 1f       	adc	r21, r21
  34:	83 7f       	andi	r24, 0xF3	; 243
  36:	84 2b       	or	r24, r20
}
  38:	80 93 69 00 	sts	0x0069, r24
  3c:	e9 9a       	sbi	0x1d, 1	; 29
  3e:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <detachInterrupt+0x4>
   4:	81 30       	cpi	r24, 0x01	; 1
   6:	01 f0       	breq	.+0      	; 0x8 <detachInterrupt+0x8>
   8:	e8 98       	cbi	0x1d, 0	; 29
   a:	00 c0       	rjmp	.+0      	; 0xc <detachInterrupt+0xc>
   c:	e9 98       	cbi	0x1d, 1	; 29
   e:	e8 2f       	mov	r30, r24
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	ee 0f       	add	r30, r30
  14:	ff 1f       	adc	r31, r31
  16:	e0 50       	subi	r30, 0x00	; 0
  18:	f0 40       	sbci	r31, 0x00	; 0
  1a:	11 82       	std	Z+1, r1	; 0x01
  1c:	10 82       	st	Z, r1
  1e:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	89 2b       	or	r24, r25
  2c:	01 f0       	breq	.+0      	; 0x2e <__vector_1+0x2e>
    intFunc[EXTERNAL_INT_1]();
  2e:	e0 91 00 00 	lds	r30, 0x0000
  32:	f0 91 00 00 	lds	r31, 0x0000
  36:	09 95       	icall
}
  38:	ff 91       	pop	r31
  3a:	ef 91       	pop	r30
  3c:	bf 91       	pop	r27
  3e:	af 91       	pop	r26
  40:	9f 91       	pop	r25
  42:	8f 91       	pop	r24
  44:	7f 91       	pop	r23
  46:	6f 91       	pop	r22
  48:	5f 91       	pop	r21
  4a:	4f 91       	pop	r20
  4c:	3f 91       	pop	r19
  4e:	2f 91       	pop	r18
  50:	0f 90       	pop	r0
  52:	0f be       	out	0x3f, r0	; 63
  54:	0f 90       	pop	r0
  56:	1f 90       	pop	r1
  58:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
ISR(INT0_vect) {
  if(intFunc[EXTERNAL_INT_0])
    intFunc[EXTERNAL_INT_0]();
}

ISR(INT1_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	89 2b       	or	r24, r25
  2c:	01 f0       	breq	.+0      	; 0x2e <__vector_2+0x2e>
    intFunc[EXTERNAL_INT_1]();
  2e:	e0 91 00 00 	lds	r30, 0x0000
  32:	f0 91 00 00 	lds	r31, 0x0000
  36:	09 95       	icall
}
  38:	ff 91       	pop	r31
  3a:	ef 91       	pop	r30
  3c:	bf 91       	pop	r27
  3e:	af 91       	pop	r26
  40:	9f 91       	pop	r25
  42:	8f 91       	pop	r24
  44:	7f 91       	pop	r23
  46:	6f 91       	pop	r22
  48:	5f 91       	pop	r21
  4a:	4f 91       	pop	r20
  4c:	3f 91       	pop	r19
  4e:	2f 91       	pop	r18
  50:	0f 90       	pop	r0
  52:	0f be       	out	0x3f, r0	; 63
  54:	0f 90       	pop	r0
  56:	1f 90       	pop	r1
  58:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000480  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000006da  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z10randomSeedj 00000010  00000000  00000000  00000b8e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z6randoml 00000058  00000000  00000000  00000b9e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6randomll 0000003c  00000000  00000000  00000bf6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z3maplllll 0000008e  00000000  00000000  00000c32  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z8makeWordj 00000002  00000000  00000000  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._Z8makeWordhh 0000000a  00000000  00000000  00000cc2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .comment      00000012  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0c 94 00 00 	jmp	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	00 d0       	rcall	.+0      	; 0xa <_Z6randoml+0xa>
   a:	00 d0       	rcall	.+0      	; 0xc <_Z6randoml+0xc>
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	9b 01       	movw	r18, r22
  12:	ac 01       	movw	r20, r24
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	81 05       	cpc	r24, r1
  1a:	91 05       	cpc	r25, r1
  1c:	01 f0       	breq	.+0      	; 0x1e <_Z6randoml+0x1e>
  1e:	69 83       	std	Y+1, r22	; 0x01
  20:	3a 83       	std	Y+2, r19	; 0x02
  22:	4b 83       	std	Y+3, r20	; 0x03
  24:	5c 83       	std	Y+4, r21	; 0x04
  26:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  2a:	29 81       	ldd	r18, Y+1	; 0x01
  2c:	3a 81       	ldd	r19, Y+2	; 0x02
  2e:	4b 81       	ldd	r20, Y+3	; 0x03
  30:	5c 81       	ldd	r21, Y+4	; 0x04
  32:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  36:	8b 01       	movw	r16, r22
  38:	9c 01       	movw	r18, r24
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_Z6randoml+0x3c>
  3c:	00 e0       	ldi	r16, 0x00	; 0
  3e:	10 e0       	ldi	r17, 0x00	; 0
  40:	98 01       	movw	r18, r16
  42:	b8 01       	movw	r22, r16
  44:	c9 01       	movw	r24, r18
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	0f 90       	pop	r0
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	6b 01       	movw	r12, r22
   a:	7c 01       	movw	r14, r24
   c:	62 17       	cp	r22, r18
   e:	73 07       	cpc	r23, r19
  10:	84 07       	cpc	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	04 f4       	brge	.+0      	; 0x16 <_Z6randomll+0x16>
  16:	ca 01       	movw	r24, r20
  18:	b9 01       	movw	r22, r18
  1a:	6c 19       	sub	r22, r12
  1c:	7d 09       	sbc	r23, r13
  1e:	8e 09       	sbc	r24, r14
  20:	9f 09       	sbc	r25, r15
  22:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  26:	c6 0e       	add	r12, r22
  28:	d7 1e       	adc	r13, r23
  2a:	e8 1e       	adc	r14, r24
  2c:	f9 1e       	adc	r15, r25
  2e:	b6 01       	movw	r22, r12
  30:	c7 01       	movw	r24, r14
  32:	ff 90       	pop	r15
  34:	ef 90       	pop	r14
  36:	df 90       	pop	r13
  38:	cf 90       	pop	r12
  3a:	08 95       	ret

Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
  20:	29 01       	movw	r4, r18
  22:	3a 01       	movw	r6, r20
  24:	62 1b       	sub	r22, r18
  26:	73 0b       	sbc	r23, r19
  28:	84 0b       	sbc	r24, r20
  2a:	95 0b       	sbc	r25, r21
  2c:	29 89       	ldd	r18, Y+17	; 0x11
  2e:	3a 89       	ldd	r19, Y+18	; 0x12
  30:	4b 89       	ldd	r20, Y+19	; 0x13
  32:	5c 89       	ldd	r21, Y+20	; 0x14
  34:	2a 19       	sub	r18, r10
  36:	3b 09       	sbc	r19, r11
  38:	4c 09       	sbc	r20, r12
  3a:	5d 09       	sbc	r21, r13
  3c:	29 8b       	std	Y+17, r18	; 0x11
  3e:	3a 8b       	std	Y+18, r19	; 0x12
  40:	4b 8b       	std	Y+19, r20	; 0x13
  42:	5c 8b       	std	Y+20, r21	; 0x14
  44:	9b 01       	movw	r18, r22
  46:	ac 01       	movw	r20, r24
  48:	69 89       	ldd	r22, Y+17	; 0x11
  4a:	7a 89       	ldd	r23, Y+18	; 0x12
  4c:	8b 89       	ldd	r24, Y+19	; 0x13
  4e:	9c 89       	ldd	r25, Y+20	; 0x14
  50:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  54:	e4 18       	sub	r14, r4
  56:	f5 08       	sbc	r15, r5
  58:	06 09       	sbc	r16, r6
  5a:	17 09       	sbc	r17, r7
  5c:	a8 01       	movw	r20, r16
  5e:	97 01       	movw	r18, r14
  60:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  64:	2a 0d       	add	r18, r10
  66:	3b 1d       	adc	r19, r11
  68:	4c 1d       	adc	r20, r12
  6a:	5d 1d       	adc	r21, r13
  6c:	b9 01       	movw	r22, r18
  6e:	ca 01       	movw	r24, r20
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	ef 90       	pop	r14
  7c:	df 90       	pop	r13
  7e:	cf 90       	pop	r12
  80:	bf 90       	pop	r11
  82:	af 90       	pop	r10
  84:	7f 90       	pop	r7
  86:	6f 90       	pop	r6
  88:	5f 90       	pop	r5
  8a:	4f 90       	pop	r4
  8c:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:
   0:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	38 2f       	mov	r19, r24
   2:	20 e0       	ldi	r18, 0x00	; 0
   4:	26 2b       	or	r18, r22
   6:	c9 01       	movw	r24, r18
   8:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00002c7c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000033d1  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6StringD2Ev 0000000a  00000000  00000000  00006081  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6String10invalidateEv 00000024  00000000  00000000  0000608b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  000060af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6String7reserveEj 0000003e  00000000  00000000  000060e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  00006121  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6StringC2EPKc 0000003a  00000000  00000000  00006163  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6StringaSERKS_ 0000002e  00000000  00000000  0000619d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6StringC2ERKS_ 00000014  00000000  00000000  000061cb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6StringaSEPKc 00000034  00000000  00000000  000061df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6StringC2Emh 0000005c  00000000  00000000  00006213  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6StringC2Elh 0000005c  00000000  00000000  0000626f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6StringC2Ejh 0000005a  00000000  00000000  000062cb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6StringC2Eih 0000005a  00000000  00000000  00006325  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6StringC2Ehh 0000005c  00000000  00000000  0000637f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6StringC2Ec 00000032  00000000  00000000  000063db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6String6concatEPKcj 00000058  00000000  00000000  0000640d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6String6concatERKS_ 0000000e  00000000  00000000  00006465  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6String6concatEPKc 00000020  00000000  00000000  00006473  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6String6concatEc 00000026  00000000  00000000  00006493  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6String6concatEh 0000005a  00000000  00000000  000064b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6String6concatEi 00000064  00000000  00000000  00006513  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6String6concatEj 0000005e  00000000  00000000  00006577  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6String6concatEl 00000066  00000000  00000000  000065d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6String6concatEm 00000066  00000000  00000000  0000663b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZplRK15StringSumHelperRK6String 0000002c  00000000  00000000  000066a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZplRK15StringSumHelperPKc 0000003a  00000000  00000000  000066cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZplRK15StringSumHelperc 00000022  00000000  00000000  00006707  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZplRK15StringSumHelperh 00000022  00000000  00000000  00006729  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZplRK15StringSumHelperi 00000022  00000000  00000000  0000674b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZplRK15StringSumHelperj 00000022  00000000  00000000  0000676d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZplRK15StringSumHelperl 00000022  00000000  00000000  0000678f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZplRK15StringSumHelperm 00000022  00000000  00000000  000067b1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZNK6String9compareToERKS_ 00000062  00000000  00000000  000067d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZNK6String6equalsERKS_ 00000022  00000000  00000000  00006835  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZNK6String6equalsEPKc 00000044  00000000  00000000  00006857  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  0000689b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  000068a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  000068bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  000068cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000070  00000000  00000000  000068dd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZNK6String10startsWithERKS_j 00000048  00000000  00000000  0000694d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZNK6String10startsWithERKS_ 0000001e  00000000  00000000  00006995  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZNK6String8endsWithERKS_ 00000042  00000000  00000000  000069b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZN6String9setCharAtEjc 0000001c  00000000  00000000  000069f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZN6StringixEj 00000026  00000000  00000000  00006a11  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZNK6StringixEj 00000022  00000000  00000000  00006a37  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZNK6String6charAtEj 00000004  00000000  00000000  00006a59  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZNK6String8getBytesEPhjj 00000054  00000000  00000000  00006a5d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZNK6String7indexOfEcj 0000003c  00000000  00000000  00006ab1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZNK6String7indexOfEc 00000008  00000000  00000000  00006aed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZNK6String7indexOfERKS_j 0000003c  00000000  00000000  00006af5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZNK6String7indexOfERKS_ 00000008  00000000  00000000  00006b31  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZNK6String11lastIndexOfEcj 0000006c  00000000  00000000  00006b39  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZNK6String11lastIndexOfEc 0000000e  00000000  00000000  00006ba5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZNK6String11lastIndexOfERKS_j 0000009a  00000000  00000000  00006bb3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZNK6String11lastIndexOfERKS_ 00000014  00000000  00000000  00006c4d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .rodata.str1.1 00000001  00000000  00000000  00006c61  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 62 .text._ZNK6String9substringEjj 0000008a  00000000  00000000  00006c62  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZNK6String9substringEj 00000018  00000000  00000000  00006cec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZN6String7replaceEcc 0000001c  00000000  00000000  00006d04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZN6String7replaceERKS_S1_ 00000224  00000000  00000000  00006d20  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  00006f44  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  00006f6c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZN6String4trimEv 000000ca  00000000  00000000  00006f94  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text._ZNK6String5toIntEv 00000018  00000000  00000000  0000705e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  00007076  2**0
                  ALLOC
 71 .comment      00000012  00000000  00000000  00007076  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD1Ev>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6StringD1Ev>

Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String10invalidateEv+0xe>
	return 0;
}
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
  12:	19 82       	std	Y+1, r1	; 0x01
  14:	18 82       	st	Y, r1
  16:	1d 82       	std	Y+5, r1	; 0x05
  18:	1c 82       	std	Y+4, r1	; 0x04
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	6f 5f       	subi	r22, 0xFF	; 255
	return 0;
}
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6String12changeBufferEj+0x1c>
  1c:	99 83       	std	Y+1, r25	; 0x01
  1e:	88 83       	st	Y, r24
  20:	1b 83       	std	Y+3, r17	; 0x03
  22:	0a 83       	std	Y+2, r16	; 0x02
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6String12changeBufferEj+0x28>
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	89 2b       	or	r24, r25
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String7reserveEj+0xe>
	return 0;
}
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	9b 81       	ldd	r25, Y+3	; 0x03
  12:	86 17       	cp	r24, r22
  14:	97 07       	cpc	r25, r23
  16:	00 f0       	brcs	.+0      	; 0x18 <_ZN6String7reserveEj+0x18>
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN6String7reserveEj+0x1a>
  1a:	ce 01       	movw	r24, r28
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  20:	88 23       	and	r24, r24
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN6String7reserveEj+0x24>
  24:	8c 81       	ldd	r24, Y+4	; 0x04
  26:	9d 81       	ldd	r25, Y+5	; 0x05
  28:	89 2b       	or	r24, r25
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN6String7reserveEj+0x2c>
  2c:	e8 81       	ld	r30, Y
  2e:	f9 81       	ldd	r31, Y+1	; 0x01
  30:	10 82       	st	Z, r1
  32:	81 e0       	ldi	r24, 0x01	; 1
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6String7reserveEj+0x36>
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
	return 0;
}
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
  12:	ba 01       	movw	r22, r20
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  18:	81 11       	cpse	r24, r1
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6String4copyEPKcj+0x1c>
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPKcj+0x24>
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
  28:	b7 01       	movw	r22, r14
  2a:	88 81       	ld	r24, Y
  2c:	99 81       	ldd	r25, Y+1	; 0x01
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC1EPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	dc 01       	movw	r26, r24
   2:	11 96       	adiw	r26, 0x01	; 1
   4:	1c 92       	st	X, r1
   6:	1e 92       	st	-X, r1
   8:	13 96       	adiw	r26, 0x03	; 3
   a:	1c 92       	st	X, r1
   c:	1e 92       	st	-X, r1
	return 0;
}
   e:	12 97       	sbiw	r26, 0x02	; 2
  10:	15 96       	adiw	r26, 0x05	; 5
  12:	1c 92       	st	X, r1
  14:	1e 92       	st	-X, r1
  16:	14 97       	sbiw	r26, 0x04	; 4
  18:	16 96       	adiw	r26, 0x06	; 6
  1a:	1c 92       	st	X, r1
  1c:	61 15       	cp	r22, r1
  1e:	71 05       	cpc	r23, r1
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6StringC1EPKc+0x22>
  22:	db 01       	movw	r26, r22
  24:	0d 90       	ld	r0, X+
  26:	00 20       	and	r0, r0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6StringC1EPKc+0x2a>
  2a:	ad 01       	movw	r20, r26
  2c:	41 50       	subi	r20, 0x01	; 1
  2e:	51 09       	sbc	r21, r1
  30:	46 1b       	sub	r20, r22
  32:	57 0b       	sbc	r21, r23
  34:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6StringC1EPKc>
  38:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	86 17       	cp	r24, r22
   a:	97 07       	cpc	r25, r23
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSERKS_+0xe>
	return 0;
}
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6StringaSERKS_+0x18>
  18:	44 81       	ldd	r20, Z+4	; 0x04
  1a:	55 81       	ldd	r21, Z+5	; 0x05
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringaSERKS_+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  26:	ce 01       	movw	r24, r28
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC1ERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
	return 0;
}
   e:	16 82       	std	Z+6, r1	; 0x06
  10:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6StringC1ERKS_>

Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	61 15       	cp	r22, r1
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSEPKc+0xe>
	return 0;
}
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZN6StringaSEPKc+0x16>
  16:	ad 01       	movw	r20, r26
  18:	41 50       	subi	r20, 0x01	; 1
  1a:	51 09       	sbc	r21, r1
  1c:	46 1b       	sub	r20, r22
  1e:	57 0b       	sbc	r21, r23
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6StringaSEPKc+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  2a:	8d 2f       	mov	r24, r29
  2c:	9c 2f       	mov	r25, r28
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC1Emh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	a1 97       	sbiw	r28, 0x21	; 33
	return 0;
}
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	ba 01       	movw	r22, r20
  1e:	f8 01       	movw	r30, r16
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	16 82       	std	Z+6, r1	; 0x06
  2e:	30 e0       	ldi	r19, 0x00	; 0
  30:	ae 01       	movw	r20, r28
  32:	4f 5f       	subi	r20, 0xFF	; 255
  34:	5f 4f       	sbci	r21, 0xFF	; 255
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  3a:	be 01       	movw	r22, r28
  3c:	6f 5f       	subi	r22, 0xFF	; 255
  3e:	7f 4f       	sbci	r23, 0xFF	; 255
  40:	c8 01       	movw	r24, r16
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  46:	a1 96       	adiw	r28, 0x21	; 33
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC1Elh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	a2 97       	sbiw	r28, 0x22	; 34
	return 0;
}
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	ba 01       	movw	r22, r20
  1e:	f8 01       	movw	r30, r16
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	16 82       	std	Z+6, r1	; 0x06
  2e:	30 e0       	ldi	r19, 0x00	; 0
  30:	ae 01       	movw	r20, r28
  32:	4f 5f       	subi	r20, 0xFF	; 255
  34:	5f 4f       	sbci	r21, 0xFF	; 255
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  3a:	be 01       	movw	r22, r28
  3c:	6f 5f       	subi	r22, 0xFF	; 255
  3e:	7f 4f       	sbci	r23, 0xFF	; 255
  40:	c8 01       	movw	r24, r16
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  46:	a2 96       	adiw	r28, 0x22	; 34
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC1Ejh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	61 97       	sbiw	r28, 0x11	; 17
	return 0;
}
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	16 82       	std	Z+6, r1	; 0x06
  2c:	50 e0       	ldi	r21, 0x00	; 0
  2e:	be 01       	movw	r22, r28
  30:	6f 5f       	subi	r22, 0xFF	; 255
  32:	7f 4f       	sbci	r23, 0xFF	; 255
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  38:	be 01       	movw	r22, r28
  3a:	6f 5f       	subi	r22, 0xFF	; 255
  3c:	7f 4f       	sbci	r23, 0xFF	; 255
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  44:	61 96       	adiw	r28, 0x11	; 17
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC1Eih>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	62 97       	sbiw	r28, 0x12	; 18
	return 0;
}
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	16 82       	std	Z+6, r1	; 0x06
  2c:	50 e0       	ldi	r21, 0x00	; 0
  2e:	be 01       	movw	r22, r28
  30:	6f 5f       	subi	r22, 0xFF	; 255
  32:	7f 4f       	sbci	r23, 0xFF	; 255
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  38:	be 01       	movw	r22, r28
  3a:	6f 5f       	subi	r22, 0xFF	; 255
  3c:	7f 4f       	sbci	r23, 0xFF	; 255
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  44:	62 96       	adiw	r28, 0x12	; 18
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC1Ehh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	29 97       	sbiw	r28, 0x09	; 9
	return 0;
}
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	86 2f       	mov	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	16 82       	std	Z+6, r1	; 0x06
  2c:	50 e0       	ldi	r21, 0x00	; 0
  2e:	be 01       	movw	r22, r28
  30:	6f 5f       	subi	r22, 0xFF	; 255
  32:	7f 4f       	sbci	r23, 0xFF	; 255
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  3a:	be 01       	movw	r22, r28
  3c:	6f 5f       	subi	r22, 0xFF	; 255
  3e:	7f 4f       	sbci	r23, 0xFF	; 255
  40:	c8 01       	movw	r24, r16
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  46:	29 96       	adiw	r28, 0x09	; 9
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC1Ec>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1Ec+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	fc 01       	movw	r30, r24
   c:	11 82       	std	Z+1, r1	; 0x01
	return 0;
}
   e:	10 82       	st	Z, r1
  10:	13 82       	std	Z+3, r1	; 0x03
  12:	12 82       	std	Z+2, r1	; 0x02
  14:	15 82       	std	Z+5, r1	; 0x05
  16:	14 82       	std	Z+4, r1	; 0x04
  18:	16 82       	std	Z+6, r1	; 0x06
  1a:	69 83       	std	Y+1, r22	; 0x01
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	be 01       	movw	r22, r28
  20:	6f 5f       	subi	r22, 0xFF	; 255
  22:	7f 4f       	sbci	r23, 0xFF	; 255
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
  28:	0f 90       	pop	r0
  2a:	0f 90       	pop	r0
  2c:	df 91       	pop	r29
  2e:	cf 91       	pop	r28
  30:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
	return 0;
}
   e:	7b 01       	movw	r14, r22
  10:	0c 81       	ldd	r16, Y+4	; 0x04
  12:	1d 81       	ldd	r17, Y+5	; 0x05
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN6String6concatEPKcj+0x1a>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN6String6concatEPKcj+0x1e>
  1e:	41 15       	cp	r20, r1
  20:	51 05       	cpc	r21, r1
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN6String6concatEPKcj+0x24>
  24:	04 0f       	add	r16, r20
  26:	15 1f       	adc	r17, r21
  28:	b8 01       	movw	r22, r16
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN6String6concatEPKcj+0x32>
  32:	28 81       	ld	r18, Y
  34:	39 81       	ldd	r19, Y+1	; 0x01
  36:	8c 81       	ldd	r24, Y+4	; 0x04
  38:	9d 81       	ldd	r25, Y+5	; 0x05
  3a:	b7 01       	movw	r22, r14
  3c:	82 0f       	add	r24, r18
  3e:	93 1f       	adc	r25, r19
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  44:	1d 83       	std	Y+5, r17	; 0x05
  46:	0c 83       	std	Y+4, r16	; 0x04
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
  54:	ef 90       	pop	r14
  56:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fb 01       	movw	r30, r22
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	60 81       	ld	r22, Z
   8:	71 81       	ldd	r23, Z+1	; 0x01
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6String6concatERKS_>

Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String6concatEPKc+0xe>
	return 0;
}
   e:	ad 01       	movw	r20, r26
  10:	41 50       	subi	r20, 0x01	; 1
  12:	51 09       	sbc	r21, r1
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
  18:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6String6concatEPKc>
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String6concatEc+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	69 83       	std	Y+1, r22	; 0x01
   c:	1a 82       	std	Y+2, r1	; 0x02
	return 0;
}
   e:	41 e0       	ldi	r20, 0x01	; 1
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	be 01       	movw	r22, r28
  14:	6f 5f       	subi	r22, 0xFF	; 255
  16:	7f 4f       	sbci	r23, 0xFF	; 255
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
  1c:	0f 90       	pop	r0
  1e:	0f 90       	pop	r0
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEh+0xe>
	return 0;
}
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEh+0x10>
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	86 2f       	mov	r24, r22
  18:	4a e0       	ldi	r20, 0x0A	; 10
  1a:	50 e0       	ldi	r21, 0x00	; 0
  1c:	8e 01       	movw	r16, r28
  1e:	0f 5f       	subi	r16, 0xFF	; 255
  20:	1f 4f       	sbci	r17, 0xFF	; 255
  22:	b8 01       	movw	r22, r16
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEh+0x32>
  32:	af 01       	movw	r20, r30
  34:	41 50       	subi	r20, 0x01	; 1
  36:	51 09       	sbc	r21, r1
  38:	40 1b       	sub	r20, r16
  3a:	51 0b       	sbc	r21, r17
  3c:	b8 01       	movw	r22, r16
  3e:	c7 01       	movw	r24, r14
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
	return 0;
}
   e:	de b7       	in	r29, 0x3e	; 62
  10:	27 97       	sbiw	r28, 0x07	; 7
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	4a e0       	ldi	r20, 0x0A	; 10
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	8e 01       	movw	r16, r28
  26:	0f 5f       	subi	r16, 0xFF	; 255
  28:	1f 4f       	sbci	r17, 0xFF	; 255
  2a:	b8 01       	movw	r22, r16
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEi+0x38>
  38:	af 01       	movw	r20, r30
  3a:	41 50       	subi	r20, 0x01	; 1
  3c:	51 09       	sbc	r21, r1
  3e:	40 1b       	sub	r20, r16
  40:	51 0b       	sbc	r21, r17
  42:	b8 01       	movw	r22, r16
  44:	c7 01       	movw	r24, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  4a:	27 96       	adiw	r28, 0x07	; 7
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEj+0xe>
	return 0;
}
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEj+0x10>
  10:	00 d0       	rcall	.+0      	; 0x12 <_ZN6String6concatEj+0x12>
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	7c 01       	movw	r14, r24
  18:	cb 01       	movw	r24, r22
  1a:	4a e0       	ldi	r20, 0x0A	; 10
  1c:	50 e0       	ldi	r21, 0x00	; 0
  1e:	8e 01       	movw	r16, r28
  20:	0f 5f       	subi	r16, 0xFF	; 255
  22:	1f 4f       	sbci	r17, 0xFF	; 255
  24:	b8 01       	movw	r22, r16
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEj+0x32>
  32:	af 01       	movw	r20, r30
  34:	41 50       	subi	r20, 0x01	; 1
  36:	51 09       	sbc	r21, r1
  38:	40 1b       	sub	r20, r16
  3a:	51 0b       	sbc	r21, r17
  3c:	b8 01       	movw	r22, r16
  3e:	c7 01       	movw	r24, r14
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  44:	26 96       	adiw	r28, 0x06	; 6
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
	return 0;
}
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2c 97       	sbiw	r28, 0x0c	; 12
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	2a e0       	ldi	r18, 0x0A	; 10
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	8e 01       	movw	r16, r28
  28:	0f 5f       	subi	r16, 0xFF	; 255
  2a:	1f 4f       	sbci	r17, 0xFF	; 255
  2c:	a8 01       	movw	r20, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEl+0x3a>
  3a:	af 01       	movw	r20, r30
  3c:	41 50       	subi	r20, 0x01	; 1
  3e:	51 09       	sbc	r21, r1
  40:	40 1b       	sub	r20, r16
  42:	51 0b       	sbc	r21, r17
  44:	b8 01       	movw	r22, r16
  46:	c7 01       	movw	r24, r14
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  4c:	2c 96       	adiw	r28, 0x0c	; 12
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
	return 0;
}
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2b 97       	sbiw	r28, 0x0b	; 11
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	2a e0       	ldi	r18, 0x0A	; 10
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	8e 01       	movw	r16, r28
  28:	0f 5f       	subi	r16, 0xFF	; 255
  2a:	1f 4f       	sbci	r17, 0xFF	; 255
  2c:	a8 01       	movw	r20, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEm+0x3a>
  3a:	af 01       	movw	r20, r30
  3c:	41 50       	subi	r20, 0x01	; 1
  3e:	51 09       	sbc	r21, r1
  40:	40 1b       	sub	r20, r16
  42:	51 0b       	sbc	r21, r17
  44:	b8 01       	movw	r22, r16
  46:	c7 01       	movw	r24, r14
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  4c:	2b 96       	adiw	r28, 0x0b	; 11
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	fb 01       	movw	r30, r22
   a:	44 81       	ldd	r20, Z+4	; 0x04
   c:	55 81       	ldd	r21, Z+5	; 0x05
	return 0;
}
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  16:	81 11       	cpse	r24, r1
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZplRK15StringSumHelperRK6String+0x1a>
  1a:	8d 2f       	mov	r24, r29
  1c:	9c 2f       	mov	r25, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  22:	8d 2f       	mov	r24, r29
  24:	9c 2f       	mov	r25, r28
  26:	df 91       	pop	r29
  28:	cf 91       	pop	r28
  2a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	61 15       	cp	r22, r1
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZplRK15StringSumHelperPKc+0xe>
	return 0;
}
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZplRK15StringSumHelperPKc+0x16>
  16:	ad 01       	movw	r20, r26
  18:	41 50       	subi	r20, 0x01	; 1
  1a:	51 09       	sbc	r21, r1
  1c:	46 1b       	sub	r20, r22
  1e:	57 0b       	sbc	r21, r23
  20:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  24:	81 11       	cpse	r24, r1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZplRK15StringSumHelperPKc+0x28>
  28:	8d 2f       	mov	r24, r29
  2a:	9c 2f       	mov	r25, r28
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  30:	8d 2f       	mov	r24, r29
  32:	9c 2f       	mov	r25, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
   c:	81 11       	cpse	r24, r1
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZplRK15StringSumHelperc+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
   c:	81 11       	cpse	r24, r1
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZplRK15StringSumHelperh+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
   c:	81 11       	cpse	r24, r1
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZplRK15StringSumHelperi+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
   c:	81 11       	cpse	r24, r1
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZplRK15StringSumHelperj+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
   c:	81 11       	cpse	r24, r1
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZplRK15StringSumHelperl+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
   c:	81 11       	cpse	r24, r1
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZplRK15StringSumHelperm+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	ed 91       	ld	r30, X+
   8:	fc 91       	ld	r31, X
   a:	eb 01       	movw	r28, r22
   c:	a8 81       	ld	r26, Y
	return 0;
}
   e:	b9 81       	ldd	r27, Y+1	; 0x01
  10:	30 97       	sbiw	r30, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6String9compareToERKS_+0x14>
  14:	10 97       	sbiw	r26, 0x00	; 0
  16:	01 f4       	brne	.+0      	; 0x18 <_ZNK6String9compareToERKS_+0x18>
  18:	10 97       	sbiw	r26, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZNK6String9compareToERKS_+0x1c>
  1c:	eb 01       	movw	r28, r22
  1e:	2c 81       	ldd	r18, Y+4	; 0x04
  20:	3d 81       	ldd	r19, Y+5	; 0x05
  22:	23 2b       	or	r18, r19
  24:	01 f0       	breq	.+0      	; 0x26 <_ZNK6String9compareToERKS_+0x26>
  26:	2c 91       	ld	r18, X
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	31 95       	neg	r19
  2c:	21 95       	neg	r18
  2e:	31 09       	sbc	r19, r1
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZNK6String9compareToERKS_+0x32>
  32:	30 97       	sbiw	r30, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZNK6String9compareToERKS_+0x36>
  36:	dc 01       	movw	r26, r24
  38:	14 96       	adiw	r26, 0x04	; 4
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	15 97       	sbiw	r26, 0x05	; 5
  40:	89 2b       	or	r24, r25
  42:	01 f0       	breq	.+0      	; 0x44 <_ZNK6String9compareToERKS_+0x44>
  44:	20 81       	ld	r18, Z
  46:	30 e0       	ldi	r19, 0x00	; 0
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZNK6String9compareToERKS_+0x4a>
  4a:	bd 01       	movw	r22, r26
  4c:	cf 01       	movw	r24, r30
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String9compareToERKS_>
  56:	20 e0       	ldi	r18, 0x00	; 0
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	c9 01       	movw	r24, r18
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
	return 0;
}
   e:	53 07       	cpc	r21, r19
  10:	01 f4       	brne	.+0      	; 0x12 <_ZNK6String6equalsERKS_+0x12>
  12:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
  16:	21 e0       	ldi	r18, 0x01	; 1
  18:	89 2b       	or	r24, r25
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZNK6String6equalsERKS_+0x1c>
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	82 2f       	mov	r24, r18
  20:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	dc 01       	movw	r26, r24
   2:	14 96       	adiw	r26, 0x04	; 4
   4:	2d 91       	ld	r18, X+
   6:	3c 91       	ld	r19, X
   8:	15 97       	sbiw	r26, 0x05	; 5
   a:	23 2b       	or	r18, r19
   c:	01 f4       	brne	.+0      	; 0xe <_ZNK6String6equalsEPKc+0xe>
	return 0;
}
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	61 15       	cp	r22, r1
  12:	71 05       	cpc	r23, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6equalsEPKc+0x16>
  16:	fb 01       	movw	r30, r22
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZNK6String6equalsEPKc+0x1a>
  1a:	08 95       	ret
  1c:	dc 01       	movw	r26, r24
  1e:	ed 91       	ld	r30, X+
  20:	fc 91       	ld	r31, X
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String6equalsEPKc+0x28>
  28:	81 e0       	ldi	r24, 0x01	; 1
  2a:	90 81       	ld	r25, Z
  2c:	99 23       	and	r25, r25
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZNK6String6equalsEPKc+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZNK6String6equalsEPKc+0x32>
  32:	cf 01       	movw	r24, r30
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  38:	9c 01       	movw	r18, r24
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	23 2b       	or	r18, r19
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZNK6String6equalsEPKc+0x40>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
   4:	89 2f       	mov	r24, r25
   6:	88 1f       	adc	r24, r24
   8:	88 27       	eor	r24, r24
   a:	88 1f       	adc	r24, r24
   c:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f0       	brlt	.+0      	; 0xc <_ZNK6StringgtERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
	return 0;
}
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f4       	brge	.+0      	; 0xc <_ZNK6StringleERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
	return 0;
}
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
   4:	89 2f       	mov	r24, r25
   6:	80 95       	com	r24
   8:	88 1f       	adc	r24, r24
   a:	88 27       	eor	r24, r24
   c:	88 1f       	adc	r24, r24
	return 0;
}
   e:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	86 17       	cp	r24, r22
	return 0;
}
   e:	97 07       	cpc	r25, r23
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String16equalsIgnoreCaseERKS_+0x12>
  12:	fc 01       	movw	r30, r24
  14:	24 81       	ldd	r18, Z+4	; 0x04
  16:	35 81       	ldd	r19, Z+5	; 0x05
  18:	fb 01       	movw	r30, r22
  1a:	44 81       	ldd	r20, Z+4	; 0x04
  1c:	55 81       	ldd	r21, Z+5	; 0x05
  1e:	24 17       	cp	r18, r20
  20:	35 07       	cpc	r19, r21
  22:	01 f4       	brne	.+0      	; 0x24 <_ZNK6String16equalsIgnoreCaseERKS_+0x24>
  24:	23 2b       	or	r18, r19
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
  28:	c0 81       	ld	r28, Z
  2a:	d1 81       	ldd	r29, Z+1	; 0x01
  2c:	fc 01       	movw	r30, r24
  2e:	00 81       	ld	r16, Z
  30:	11 81       	ldd	r17, Z+1	; 0x01
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
  34:	99 27       	eor	r25, r25
  36:	87 fd       	sbrc	r24, 7
  38:	90 95       	com	r25
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  3e:	7c 01       	movw	r14, r24
  40:	89 91       	ld	r24, Y+
  42:	99 27       	eor	r25, r25
  44:	87 fd       	sbrc	r24, 7
  46:	90 95       	com	r25
  48:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  4c:	e8 16       	cp	r14, r24
  4e:	f9 06       	cpc	r15, r25
  50:	01 f4       	brne	.+0      	; 0x52 <_ZNK6String16equalsIgnoreCaseERKS_+0x52>
  52:	f8 01       	movw	r30, r16
  54:	81 91       	ld	r24, Z+
  56:	8f 01       	movw	r16, r30
  58:	81 11       	cpse	r24, r1
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZNK6String16equalsIgnoreCaseERKS_+0x5c>
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	df 91       	pop	r29
  64:	cf 91       	pop	r28
  66:	1f 91       	pop	r17
  68:	0f 91       	pop	r16
  6a:	ff 90       	pop	r15
  6c:	ef 90       	pop	r14
  6e:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fa 01       	movw	r30, r20
   2:	db 01       	movw	r26, r22
   4:	14 96       	adiw	r26, 0x04	; 4
   6:	4d 91       	ld	r20, X+
   8:	5c 91       	ld	r21, X
   a:	15 97       	sbiw	r26, 0x05	; 5
   c:	dc 01       	movw	r26, r24
	return 0;
}
   e:	14 96       	adiw	r26, 0x04	; 4
  10:	2d 91       	ld	r18, X+
  12:	3c 91       	ld	r19, X
  14:	15 97       	sbiw	r26, 0x05	; 5
  16:	24 1b       	sub	r18, r20
  18:	35 0b       	sbc	r19, r21
  1a:	2e 17       	cp	r18, r30
  1c:	3f 07       	cpc	r19, r31
  1e:	00 f0       	brcs	.+0      	; 0x20 <_ZNK6String10startsWithERKS_j+0x20>
  20:	8d 91       	ld	r24, X+
  22:	9c 91       	ld	r25, X
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String10startsWithERKS_j+0x28>
  28:	db 01       	movw	r26, r22
  2a:	6d 91       	ld	r22, X+
  2c:	7c 91       	ld	r23, X
  2e:	61 15       	cp	r22, r1
  30:	71 05       	cpc	r23, r1
  32:	01 f0       	breq	.+0      	; 0x34 <_ZNK6String10startsWithERKS_j+0x34>
  34:	8e 0f       	add	r24, r30
  36:	9f 1f       	adc	r25, r31
  38:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  3c:	9c 01       	movw	r18, r24
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	23 2b       	or	r18, r19
  42:	01 f0       	breq	.+0      	; 0x44 <_ZNK6String10startsWithERKS_j+0x44>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
	return 0;
}
   e:	53 07       	cpc	r21, r19
  10:	00 f0       	brcs	.+0      	; 0x12 <_ZNK6String10startsWithERKS_+0x12>
  12:	40 e0       	ldi	r20, 0x00	; 0
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String10startsWithERKS_>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	db 01       	movw	r26, r22
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	4d 91       	ld	r20, X+
   c:	5c 91       	ld	r21, X
	return 0;
}
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	84 17       	cp	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	00 f0       	brcs	.+0      	; 0x16 <_ZNK6String8endsWithERKS_+0x16>
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZNK6String8endsWithERKS_+0x20>
  20:	6d 91       	ld	r22, X+
  22:	7c 91       	ld	r23, X
  24:	61 15       	cp	r22, r1
  26:	71 05       	cpc	r23, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String8endsWithERKS_+0x2a>
  2a:	84 1b       	sub	r24, r20
  2c:	95 0b       	sbc	r25, r21
  2e:	82 0f       	add	r24, r18
  30:	93 1f       	adc	r25, r19
  32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  36:	9c 01       	movw	r18, r24
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	23 2b       	or	r18, r19
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZNK6String8endsWithERKS_+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	dc 01       	movw	r26, r24
   2:	14 96       	adiw	r26, 0x04	; 4
   4:	2d 91       	ld	r18, X+
   6:	3c 91       	ld	r19, X
   8:	15 97       	sbiw	r26, 0x05	; 5
   a:	62 17       	cp	r22, r18
   c:	73 07       	cpc	r23, r19
	return 0;
}
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZN6String9setCharAtEjc+0x10>
  10:	ed 91       	ld	r30, X+
  12:	fc 91       	ld	r31, X
  14:	e6 0f       	add	r30, r22
  16:	f7 1f       	adc	r31, r23
  18:	40 83       	st	Z, r20
  1a:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	62 17       	cp	r22, r18
   8:	73 07       	cpc	r23, r19
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
	return 0;
}
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6StringixEj+0x14>
  14:	10 92 00 00 	sts	0x0000, r1
  18:	60 e0       	ldi	r22, 0x00	; 0
  1a:	70 e0       	ldi	r23, 0x00	; 0
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN6StringixEj+0x1e>
  1e:	68 0f       	add	r22, r24
  20:	79 1f       	adc	r23, r25
  22:	cb 01       	movw	r24, r22
  24:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	62 17       	cp	r22, r18
   8:	73 07       	cpc	r23, r19
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
	return 0;
}
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6StringixEj+0x14>
  14:	fc 01       	movw	r30, r24
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret

Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String6charAtEj>

Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	eb 01       	movw	r28, r22
   a:	41 15       	cp	r20, r1
   c:	51 05       	cpc	r21, r1
	return 0;
}
   e:	01 f0       	breq	.+0      	; 0x10 <_ZNK6String8getBytesEPhjj+0x10>
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6String8getBytesEPhjj+0x14>
  14:	fc 01       	movw	r30, r24
  16:	04 81       	ldd	r16, Z+4	; 0x04
  18:	15 81       	ldd	r17, Z+5	; 0x05
  1a:	20 17       	cp	r18, r16
  1c:	31 07       	cpc	r19, r17
  1e:	00 f0       	brcs	.+0      	; 0x20 <_ZNK6String8getBytesEPhjj+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZNK6String8getBytesEPhjj+0x22>
  22:	41 50       	subi	r20, 0x01	; 1
  24:	51 09       	sbc	r21, r1
  26:	02 1b       	sub	r16, r18
  28:	13 0b       	sbc	r17, r19
  2a:	40 17       	cp	r20, r16
  2c:	51 07       	cpc	r21, r17
  2e:	00 f4       	brcc	.+0      	; 0x30 <_ZNK6String8getBytesEPhjj+0x30>
  30:	8a 01       	movw	r16, r20
  32:	fc 01       	movw	r30, r24
  34:	60 81       	ld	r22, Z
  36:	71 81       	ldd	r23, Z+1	; 0x01
  38:	62 0f       	add	r22, r18
  3a:	73 1f       	adc	r23, r19
  3c:	a8 01       	movw	r20, r16
  3e:	ce 01       	movw	r24, r28
  40:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
  44:	c0 0f       	add	r28, r16
  46:	d1 1f       	adc	r29, r17
  48:	18 82       	st	Y, r1
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
   a:	48 17       	cp	r20, r24
   c:	59 07       	cpc	r21, r25
	return 0;
}
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfEcj+0x10>
  10:	c0 81       	ld	r28, Z
  12:	d1 81       	ldd	r29, Z+1	; 0x01
  14:	77 27       	eor	r23, r23
  16:	67 fd       	sbrc	r22, 7
  18:	70 95       	com	r23
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String7indexOfEcj+0x28>
  28:	9c 01       	movw	r18, r24
  2a:	2c 1b       	sub	r18, r28
  2c:	3d 0b       	sbc	r19, r29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfEcj+0x30>
  30:	2f ef       	ldi	r18, 0xFF	; 255
  32:	3f ef       	ldi	r19, 0xFF	; 255
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String7indexOfEc>

Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
   a:	48 17       	cp	r20, r24
   c:	59 07       	cpc	r21, r25
	return 0;
}
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfERKS_j+0x10>
  10:	c0 81       	ld	r28, Z
  12:	d1 81       	ldd	r29, Z+1	; 0x01
  14:	fb 01       	movw	r30, r22
  16:	60 81       	ld	r22, Z
  18:	71 81       	ldd	r23, Z+1	; 0x01
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String7indexOfERKS_j+0x28>
  28:	9c 01       	movw	r18, r24
  2a:	2c 1b       	sub	r18, r28
  2c:	3d 0b       	sbc	r19, r29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfERKS_j+0x30>
  30:	2f ef       	ldi	r18, 0xFF	; 255
  32:	3f ef       	ldi	r19, 0xFF	; 255
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String7indexOfERKS_>

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
	return 0;
}
   e:	ec 01       	movw	r28, r24
  10:	8c 81       	ldd	r24, Y+4	; 0x04
  12:	9d 81       	ldd	r25, Y+5	; 0x05
  14:	48 17       	cp	r20, r24
  16:	59 07       	cpc	r21, r25
  18:	00 f0       	brcs	.+0      	; 0x1a <_ZNK6String11lastIndexOfEcj+0x1a>
  1a:	2f ef       	ldi	r18, 0xFF	; 255
  1c:	3f ef       	ldi	r19, 0xFF	; 255
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZNK6String11lastIndexOfEcj+0x20>
  20:	8a 01       	movw	r16, r20
  22:	0f 5f       	subi	r16, 0xFF	; 255
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	e8 81       	ld	r30, Y
  28:	f9 81       	ldd	r31, Y+1	; 0x01
  2a:	e0 0f       	add	r30, r16
  2c:	f1 1f       	adc	r31, r17
  2e:	d0 80       	ld	r13, Z
  30:	10 82       	st	Z, r1
  32:	e8 80       	ld	r14, Y
  34:	f9 80       	ldd	r15, Y+1	; 0x01
  36:	77 27       	eor	r23, r23
  38:	67 fd       	sbrc	r22, 7
  3a:	70 95       	com	r23
  3c:	c7 01       	movw	r24, r14
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  42:	f7 01       	movw	r30, r14
  44:	e0 0f       	add	r30, r16
  46:	f1 1f       	adc	r31, r17
  48:	d0 82       	st	Z, r13
  4a:	00 97       	sbiw	r24, 0x00	; 0
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZNK6String11lastIndexOfEcj+0x4e>
  4e:	28 81       	ld	r18, Y
  50:	39 81       	ldd	r19, Y+1	; 0x01
  52:	ac 01       	movw	r20, r24
  54:	42 1b       	sub	r20, r18
  56:	53 0b       	sbc	r21, r19
  58:	9a 01       	movw	r18, r20
  5a:	c9 01       	movw	r24, r18
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	1f 91       	pop	r17
  62:	0f 91       	pop	r16
  64:	ff 90       	pop	r15
  66:	ef 90       	pop	r14
  68:	df 90       	pop	r13
  6a:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	41 50       	subi	r20, 0x01	; 1
   8:	51 09       	sbc	r21, r1
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String11lastIndexOfEc>

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
	return 0;
}
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	6b 01       	movw	r12, r22
  16:	8a 01       	movw	r16, r20
  18:	fb 01       	movw	r30, r22
  1a:	44 81       	ldd	r20, Z+4	; 0x04
  1c:	55 81       	ldd	r21, Z+5	; 0x05
  1e:	41 15       	cp	r20, r1
  20:	51 05       	cpc	r21, r1
  22:	01 f0       	breq	.+0      	; 0x24 <_ZNK6String11lastIndexOfERKS_j+0x24>
  24:	fc 01       	movw	r30, r24
  26:	24 81       	ldd	r18, Z+4	; 0x04
  28:	35 81       	ldd	r19, Z+5	; 0x05
  2a:	21 15       	cp	r18, r1
  2c:	31 05       	cpc	r19, r1
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZNK6String11lastIndexOfERKS_j+0x30>
  30:	24 17       	cp	r18, r20
  32:	35 07       	cpc	r19, r21
  34:	00 f0       	brcs	.+0      	; 0x36 <_ZNK6String11lastIndexOfERKS_j+0x36>
  36:	02 17       	cp	r16, r18
  38:	13 07       	cpc	r17, r19
  3a:	00 f0       	brcs	.+0      	; 0x3c <_ZNK6String11lastIndexOfERKS_j+0x3c>
  3c:	89 01       	movw	r16, r18
  3e:	01 50       	subi	r16, 0x01	; 1
  40:	11 09       	sbc	r17, r1
  42:	fc 01       	movw	r30, r24
  44:	e0 80       	ld	r14, Z
  46:	f1 80       	ldd	r15, Z+1	; 0x01
  48:	c7 01       	movw	r24, r14
  4a:	cf ef       	ldi	r28, 0xFF	; 255
  4c:	df ef       	ldi	r29, 0xFF	; 255
  4e:	57 01       	movw	r10, r14
  50:	a0 0e       	add	r10, r16
  52:	b1 1e       	adc	r11, r17
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZNK6String11lastIndexOfERKS_j+0x56>
  56:	f6 01       	movw	r30, r12
  58:	60 81       	ld	r22, Z
  5a:	71 81       	ldd	r23, Z+1	; 0x01
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  60:	00 97       	sbiw	r24, 0x00	; 0
  62:	01 f0       	breq	.+0      	; 0x64 <_ZNK6String11lastIndexOfERKS_j+0x64>
  64:	9c 01       	movw	r18, r24
  66:	2e 19       	sub	r18, r14
  68:	3f 09       	sbc	r19, r15
  6a:	02 17       	cp	r16, r18
  6c:	13 07       	cpc	r17, r19
  6e:	00 f4       	brcc	.+0      	; 0x70 <_ZNK6String11lastIndexOfERKS_j+0x70>
  70:	9e 01       	movw	r18, r28
  72:	01 96       	adiw	r24, 0x01	; 1
  74:	e9 01       	movw	r28, r18
  76:	a8 16       	cp	r10, r24
  78:	b9 06       	cpc	r11, r25
  7a:	00 f4       	brcc	.+0      	; 0x7c <_ZNK6String11lastIndexOfERKS_j+0x7c>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_ZNK6String11lastIndexOfERKS_j+0x7e>
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	df ef       	ldi	r29, 0xFF	; 255
  82:	ce 01       	movw	r24, r28
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	ff 90       	pop	r15
  8e:	ef 90       	pop	r14
  90:	df 90       	pop	r13
  92:	cf 90       	pop	r12
  94:	bf 90       	pop	r11
  96:	af 90       	pop	r10
  98:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 1b       	sub	r20, r18
	return 0;
}
   e:	53 0b       	sbc	r21, r19
  10:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>

Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
	return 0;
}
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	6c 01       	movw	r12, r24
  14:	7b 01       	movw	r14, r22
  16:	ea 01       	movw	r28, r20
  18:	89 01       	movw	r16, r18
  1a:	24 17       	cp	r18, r20
  1c:	35 07       	cpc	r19, r21
  1e:	00 f4       	brcc	.+0      	; 0x20 <_ZNK6String9substringEjj+0x20>
  20:	8d 2f       	mov	r24, r29
  22:	e9 01       	movw	r28, r18
  24:	04 2f       	mov	r16, r20
  26:	18 2f       	mov	r17, r24
  28:	60 e0       	ldi	r22, 0x00	; 0
  2a:	70 e0       	ldi	r23, 0x00	; 0
  2c:	c6 01       	movw	r24, r12
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  32:	d7 01       	movw	r26, r14
  34:	14 96       	adiw	r26, 0x04	; 4
  36:	8d 91       	ld	r24, X+
  38:	9c 91       	ld	r25, X
  3a:	15 97       	sbiw	r26, 0x05	; 5
  3c:	8c 17       	cp	r24, r28
  3e:	9d 07       	cpc	r25, r29
  40:	00 f0       	brcs	.+0      	; 0x42 <_ZNK6String9substringEjj+0x42>
  42:	80 17       	cp	r24, r16
  44:	91 07       	cpc	r25, r17
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZNK6String9substringEjj+0x48>
  48:	8c 01       	movw	r16, r24
  4a:	d7 01       	movw	r26, r14
  4c:	ed 91       	ld	r30, X+
  4e:	fc 91       	ld	r31, X
  50:	11 97       	sbiw	r26, 0x01	; 1
  52:	e0 0f       	add	r30, r16
  54:	f1 1f       	adc	r31, r17
  56:	b0 80       	ld	r11, Z
  58:	10 82       	st	Z, r1
  5a:	6d 91       	ld	r22, X+
  5c:	7c 91       	ld	r23, X
  5e:	6c 0f       	add	r22, r28
  60:	7d 1f       	adc	r23, r29
  62:	c6 01       	movw	r24, r12
  64:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  68:	d7 01       	movw	r26, r14
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	e0 0f       	add	r30, r16
  70:	f1 1f       	adc	r31, r17
  72:	b0 82       	st	Z, r11
  74:	c6 01       	movw	r24, r12
  76:	df 91       	pop	r29
  78:	cf 91       	pop	r28
  7a:	1f 91       	pop	r17
  7c:	0f 91       	pop	r16
  7e:	ff 90       	pop	r15
  80:	ef 90       	pop	r14
  82:	df 90       	pop	r13
  84:	cf 90       	pop	r12
  86:	bf 90       	pop	r11
  88:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEj:

00000000 <_ZNK6String9substringEj>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEj>
	return 0;
}
  10:	ce 01       	movw	r24, r28
  12:	df 91       	pop	r29
  14:	cf 91       	pop	r28
  16:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	30 97       	sbiw	r30, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZN6String7replaceEcc+0xa>
   a:	08 95       	ret
   c:	86 13       	cpse	r24, r22
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String7replaceEcc+0x10>
  10:	40 83       	st	Z, r20
  12:	31 96       	adiw	r30, 0x01	; 1
  14:	80 81       	ld	r24, Z
  16:	81 11       	cpse	r24, r1
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN6String7replaceEcc+0x1a>
  1a:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
	return 0;
}
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	8c 01       	movw	r16, r24
  26:	5b 01       	movw	r10, r22
  28:	7a 01       	movw	r14, r20
  2a:	dc 01       	movw	r26, r24
  2c:	14 96       	adiw	r26, 0x04	; 4
  2e:	4d 90       	ld	r4, X+
  30:	5c 90       	ld	r5, X
  32:	15 97       	sbiw	r26, 0x05	; 5
  34:	41 14       	cp	r4, r1
  36:	51 04       	cpc	r5, r1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String7replaceERKS_S1_+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6String7replaceERKS_S1_+0x3c>
  3c:	fb 01       	movw	r30, r22
  3e:	64 80       	ldd	r6, Z+4	; 0x04
  40:	75 80       	ldd	r7, Z+5	; 0x05
  42:	61 14       	cp	r6, r1
  44:	71 04       	cpc	r7, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String7replaceERKS_S1_+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String7replaceERKS_S1_+0x4a>
  4a:	da 01       	movw	r26, r20
  4c:	14 96       	adiw	r26, 0x04	; 4
  4e:	cd 90       	ld	r12, X+
  50:	dc 90       	ld	r13, X
  52:	15 97       	sbiw	r26, 0x05	; 5
  54:	c6 18       	sub	r12, r6
  56:	d7 08       	sbc	r13, r7
  58:	fc 01       	movw	r30, r24
  5a:	c0 81       	ld	r28, Z
  5c:	d1 81       	ldd	r29, Z+1	; 0x01
  5e:	c1 14       	cp	r12, r1
  60:	d1 04       	cpc	r13, r1
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6String7replaceERKS_S1_+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6String7replaceERKS_S1_+0x66>
  66:	d7 01       	movw	r26, r14
  68:	6c 91       	ld	r22, X
  6a:	11 96       	adiw	r26, 0x01	; 1
  6c:	7c 91       	ld	r23, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	14 96       	adiw	r26, 0x04	; 4
  72:	4d 91       	ld	r20, X+
  74:	5c 91       	ld	r21, X
  76:	15 97       	sbiw	r26, 0x05	; 5
  78:	c8 01       	movw	r24, r16
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  7e:	f7 01       	movw	r30, r14
  80:	c4 81       	ldd	r28, Z+4	; 0x04
  82:	d5 81       	ldd	r29, Z+5	; 0x05
  84:	c0 0f       	add	r28, r16
  86:	d1 1f       	adc	r29, r17
  88:	d5 01       	movw	r26, r10
  8a:	6d 91       	ld	r22, X+
  8c:	7c 91       	ld	r23, X
  8e:	ce 01       	movw	r24, r28
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  94:	8c 01       	movw	r16, r24
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	01 f4       	brne	.+0      	; 0x9a <_ZN6String7replaceERKS_S1_+0x9a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_ZN6String7replaceERKS_S1_+0x9c>
  9c:	d7 fe       	sbrs	r13, 7
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6String7replaceERKS_S1_+0xa0>
  a0:	4e 01       	movw	r8, r28
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6String7replaceERKS_S1_+0xa4>
  a4:	fb 01       	movw	r30, r22
  a6:	20 80       	ld	r2, Z
  a8:	31 80       	ldd	r3, Z+1	; 0x01
  aa:	42 01       	movw	r8, r4
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN6String7replaceERKS_S1_+0xae>
  ae:	32 01       	movw	r6, r4
  b0:	6c 1a       	sub	r6, r28
  b2:	7d 0a       	sbc	r7, r29
  b4:	a3 01       	movw	r20, r6
  b6:	be 01       	movw	r22, r28
  b8:	c4 01       	movw	r24, r8
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  be:	68 0c       	add	r6, r8
  c0:	79 1c       	adc	r7, r9
  c2:	d7 01       	movw	r26, r14
  c4:	6c 91       	ld	r22, X
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	7c 91       	ld	r23, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	14 96       	adiw	r26, 0x04	; 4
  ce:	4d 91       	ld	r20, X+
  d0:	5c 91       	ld	r21, X
  d2:	15 97       	sbiw	r26, 0x05	; 5
  d4:	c3 01       	movw	r24, r6
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  da:	f7 01       	movw	r30, r14
  dc:	84 80       	ldd	r8, Z+4	; 0x04
  de:	95 80       	ldd	r9, Z+5	; 0x05
  e0:	86 0c       	add	r8, r6
  e2:	97 1c       	adc	r9, r7
  e4:	d5 01       	movw	r26, r10
  e6:	14 96       	adiw	r26, 0x04	; 4
  e8:	cd 91       	ld	r28, X+
  ea:	dc 91       	ld	r29, X
  ec:	15 97       	sbiw	r26, 0x05	; 5
  ee:	c4 0d       	add	r28, r4
  f0:	d5 1d       	adc	r29, r5
  f2:	f8 01       	movw	r30, r16
  f4:	84 81       	ldd	r24, Z+4	; 0x04
  f6:	95 81       	ldd	r25, Z+5	; 0x05
  f8:	8c 0d       	add	r24, r12
  fa:	9d 1d       	adc	r25, r13
  fc:	95 83       	std	Z+5, r25	; 0x05
  fe:	84 83       	std	Z+4, r24	; 0x04
 100:	d5 01       	movw	r26, r10
 102:	6d 91       	ld	r22, X+
 104:	7c 91       	ld	r23, X
 106:	ce 01       	movw	r24, r28
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 10c:	2c 01       	movw	r4, r24
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	01 f4       	brne	.+0      	; 0x112 <_ZN6String7replaceERKS_S1_+0x112>
 112:	be 01       	movw	r22, r28
 114:	c4 01       	movw	r24, r8
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	af 90       	pop	r10
 12a:	9f 90       	pop	r9
 12c:	8f 90       	pop	r8
 12e:	7f 90       	pop	r7
 130:	6f 90       	pop	r6
 132:	5f 90       	pop	r5
 134:	4f 90       	pop	r4
 136:	3f 90       	pop	r3
 138:	2f 90       	pop	r2
 13a:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 13e:	ec 01       	movw	r28, r24
 140:	c6 0d       	add	r28, r6
 142:	d7 1d       	adc	r29, r7
 144:	8c 0c       	add	r8, r12
 146:	9d 1c       	adc	r9, r13
 148:	b1 01       	movw	r22, r2
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	01 f4       	brne	.+0      	; 0x154 <_ZN6String7replaceERKS_S1_+0x154>
 154:	84 14       	cp	r8, r4
 156:	95 04       	cpc	r9, r5
 158:	01 f4       	brne	.+0      	; 0x15a <_ZN6String7replaceERKS_S1_+0x15a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <_ZN6String7replaceERKS_S1_+0x15c>
 15c:	f8 01       	movw	r30, r16
 15e:	82 81       	ldd	r24, Z+2	; 0x02
 160:	93 81       	ldd	r25, Z+3	; 0x03
 162:	88 15       	cp	r24, r8
 164:	99 05       	cpc	r25, r9
 166:	00 f4       	brcc	.+0      	; 0x168 <_ZN6String7replaceERKS_S1_+0x168>
 168:	b4 01       	movw	r22, r8
 16a:	c8 01       	movw	r24, r16
 16c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 170:	88 23       	and	r24, r24
 172:	01 f4       	brne	.+0      	; 0x174 <_ZN6String7replaceERKS_S1_+0x174>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZN6String7replaceERKS_S1_+0x176>
 176:	00 c0       	rjmp	.+0      	; 0x178 <_ZN6String7replaceERKS_S1_+0x178>
 178:	97 fd       	sbrc	r25, 7
 17a:	00 c0       	rjmp	.+0      	; 0x17c <_ZN6String7replaceERKS_S1_+0x17c>
 17c:	ac 01       	movw	r20, r24
 17e:	b5 01       	movw	r22, r10
 180:	c8 01       	movw	r24, r16
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 186:	ec 01       	movw	r28, r24
 188:	97 ff       	sbrs	r25, 7
 18a:	00 c0       	rjmp	.+0      	; 0x18c <_ZN6String7replaceERKS_S1_+0x18c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <_ZN6String7replaceERKS_S1_+0x18e>
 18e:	d8 01       	movw	r26, r16
 190:	14 96       	adiw	r26, 0x04	; 4
 192:	8d 91       	ld	r24, X+
 194:	9c 91       	ld	r25, X
 196:	15 97       	sbiw	r26, 0x05	; 5
 198:	00 c0       	rjmp	.+0      	; 0x19a <_ZN6String7replaceERKS_S1_+0x19a>
 19a:	f8 01       	movw	r30, r16
 19c:	80 81       	ld	r24, Z
 19e:	91 81       	ldd	r25, Z+1	; 0x01
 1a0:	d5 01       	movw	r26, r10
 1a2:	14 96       	adiw	r26, 0x04	; 4
 1a4:	2d 91       	ld	r18, X+
 1a6:	3c 91       	ld	r19, X
 1a8:	15 97       	sbiw	r26, 0x05	; 5
 1aa:	2c 0f       	add	r18, r28
 1ac:	3d 1f       	adc	r19, r29
 1ae:	82 0f       	add	r24, r18
 1b0:	93 1f       	adc	r25, r19
 1b2:	44 81       	ldd	r20, Z+4	; 0x04
 1b4:	55 81       	ldd	r21, Z+5	; 0x05
 1b6:	42 1b       	sub	r20, r18
 1b8:	53 0b       	sbc	r21, r19
 1ba:	bc 01       	movw	r22, r24
 1bc:	8c 0d       	add	r24, r12
 1be:	9d 1d       	adc	r25, r13
 1c0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1c4:	f8 01       	movw	r30, r16
 1c6:	84 81       	ldd	r24, Z+4	; 0x04
 1c8:	95 81       	ldd	r25, Z+5	; 0x05
 1ca:	8c 0d       	add	r24, r12
 1cc:	9d 1d       	adc	r25, r13
 1ce:	95 83       	std	Z+5, r25	; 0x05
 1d0:	84 83       	std	Z+4, r24	; 0x04
 1d2:	01 90       	ld	r0, Z+
 1d4:	f0 81       	ld	r31, Z
 1d6:	e0 2d       	mov	r30, r0
 1d8:	e8 0f       	add	r30, r24
 1da:	f9 1f       	adc	r31, r25
 1dc:	10 82       	st	Z, r1
 1de:	d8 01       	movw	r26, r16
 1e0:	2d 91       	ld	r18, X+
 1e2:	3c 91       	ld	r19, X
 1e4:	2c 0f       	add	r18, r28
 1e6:	3d 1f       	adc	r19, r29
 1e8:	f7 01       	movw	r30, r14
 1ea:	60 81       	ld	r22, Z
 1ec:	71 81       	ldd	r23, Z+1	; 0x01
 1ee:	44 81       	ldd	r20, Z+4	; 0x04
 1f0:	55 81       	ldd	r21, Z+5	; 0x05
 1f2:	c9 01       	movw	r24, r18
 1f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_ZN6String7replaceERKS_S1_+0x1fe>
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	bf 90       	pop	r11
 210:	af 90       	pop	r10
 212:	9f 90       	pop	r9
 214:	8f 90       	pop	r8
 216:	7f 90       	pop	r7
 218:	6f 90       	pop	r6
 21a:	5f 90       	pop	r5
 21c:	4f 90       	pop	r4
 21e:	3f 90       	pop	r3
 220:	2f 90       	pop	r2
 222:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toLowerCaseEv+0xe>
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toLowerCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	81 11       	cpse	r24, r1
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String11toLowerCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toUpperCaseEv+0xe>
	return 0;
}
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toUpperCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	81 11       	cpse	r24, r1
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String11toUpperCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
	return 0;
}
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	6c 01       	movw	r12, r24
  16:	dc 01       	movw	r26, r24
  18:	ed 90       	ld	r14, X+
  1a:	fc 90       	ld	r15, X
  1c:	11 97       	sbiw	r26, 0x01	; 1
  1e:	e1 14       	cp	r14, r1
  20:	f1 04       	cpc	r15, r1
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN6String4trimEv+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6String4trimEv+0x26>
  26:	14 96       	adiw	r26, 0x04	; 4
  28:	0d 91       	ld	r16, X+
  2a:	1c 91       	ld	r17, X
  2c:	15 97       	sbiw	r26, 0x05	; 5
  2e:	01 15       	cp	r16, r1
  30:	11 05       	cpc	r17, r1
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN6String4trimEv+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6String4trimEv+0x36>
  36:	57 01       	movw	r10, r14
  38:	e5 01       	movw	r28, r10
  3a:	bf ef       	ldi	r27, 0xFF	; 255
  3c:	ab 1a       	sub	r10, r27
  3e:	bb 0a       	sbc	r11, r27
  40:	88 81       	ld	r24, Y
  42:	99 27       	eor	r25, r25
  44:	87 fd       	sbrc	r24, 7
  46:	90 95       	com	r25
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  4c:	89 2b       	or	r24, r25
  4e:	01 f4       	brne	.+0      	; 0x50 <_ZN6String4trimEv+0x50>
  50:	01 50       	subi	r16, 0x01	; 1
  52:	11 09       	sbc	r17, r1
  54:	0e 0d       	add	r16, r14
  56:	1f 1d       	adc	r17, r15
  58:	f8 01       	movw	r30, r16
  5a:	80 81       	ld	r24, Z
  5c:	99 27       	eor	r25, r25
  5e:	87 fd       	sbrc	r24, 7
  60:	90 95       	com	r25
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  66:	89 2b       	or	r24, r25
  68:	01 f4       	brne	.+0      	; 0x6a <_ZN6String4trimEv+0x6a>
  6a:	0f 5f       	subi	r16, 0xFF	; 255
  6c:	1f 4f       	sbci	r17, 0xFF	; 255
  6e:	0c 1b       	sub	r16, r28
  70:	1d 0b       	sbc	r17, r29
  72:	d6 01       	movw	r26, r12
  74:	15 96       	adiw	r26, 0x05	; 5
  76:	1c 93       	st	X, r17
  78:	0e 93       	st	-X, r16
  7a:	14 97       	sbiw	r26, 0x04	; 4
  7c:	ec 16       	cp	r14, r28
  7e:	fd 06       	cpc	r15, r29
  80:	00 f4       	brcc	.+0      	; 0x82 <_ZN6String4trimEv+0x82>
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN6String4trimEv+0x84>
  84:	0c 17       	cp	r16, r28
  86:	1d 07       	cpc	r17, r29
  88:	00 f4       	brcc	.+0      	; 0x8a <_ZN6String4trimEv+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN6String4trimEv+0x8c>
  8c:	a8 01       	movw	r20, r16
  8e:	be 01       	movw	r22, r28
  90:	c7 01       	movw	r24, r14
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  96:	d6 01       	movw	r26, r12
  98:	ed 91       	ld	r30, X+
  9a:	fc 91       	ld	r31, X
  9c:	11 97       	sbiw	r26, 0x01	; 1
  9e:	14 96       	adiw	r26, 0x04	; 4
  a0:	8d 91       	ld	r24, X+
  a2:	9c 91       	ld	r25, X
  a4:	15 97       	sbiw	r26, 0x05	; 5
  a6:	e8 0f       	add	r30, r24
  a8:	f9 1f       	adc	r31, r25
  aa:	10 82       	st	Z, r1
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN6String4trimEv+0xae>
  ae:	01 50       	subi	r16, 0x01	; 1
  b0:	11 09       	sbc	r17, r1
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN6String4trimEv+0xb4>
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
  bc:	ff 90       	pop	r15
  be:	ef 90       	pop	r14
  c0:	df 90       	pop	r13
  c2:	cf 90       	pop	r12
  c4:	bf 90       	pop	r11
  c6:	af 90       	pop	r10
  c8:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZNK6String5toIntEv+0xa>
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String5toIntEv>
	return 0;
}
   e:	60 e0       	ldi	r22, 0x00	; 0
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000051c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002b81  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.startup.main 0000001a  00000000  00000000  000030d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  000030eb  2**0
                  CONTENTS, READONLY

Disassembly of section .text.startup.main:

00000000 <main>:
#include "Arduino.h"

int main(void)
{
	init();
   0:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
   4:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   8:	c0 e0       	ldi	r28, 0x00	; 0
   a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
   c:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <main+0x14>
  14:	0e 94 00 00 	call	0	; 0x0 <main>
  18:	00 c0       	rjmp	.+0      	; 0x1a <__zero_reg__+0x19>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000468  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000006ce  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Znwj   00000004  00000000  00000000  00000b6a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Znaj   00000004  00000000  00000000  00000b6e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZdlPv  00000004  00000000  00000000  00000b72  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZdaPv  00000004  00000000  00000000  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__cxa_guard_acquire 00000014  00000000  00000000  00000b7a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__cxa_guard_release 00000008  00000000  00000000  00000b8e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.__cxa_guard_abort 00000002  00000000  00000000  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.__cxa_pure_virtual 00000002  00000000  00000000  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .comment      00000012  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Znwj:

00000000 <_Znwj>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   0:	0c 94 00 00 	jmp	0	; 0x0 <_Znwj>

Disassembly of section .text._Znaj:

00000000 <_Znaj>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_Znaj>

Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZdlPv>

Disassembly of section .text._ZdaPv:

00000000 <_ZdaPv>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZdaPv>

Disassembly of section .text.__cxa_guard_acquire:

00000000 <__cxa_guard_acquire>:
   0:	21 e0       	ldi	r18, 0x01	; 1
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	80 81       	ld	r24, Z
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <__cxa_guard_acquire+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	c9 01       	movw	r24, r18
  12:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

00000000 <__cxa_guard_release>:
   0:	21 e0       	ldi	r18, 0x01	; 1
   2:	fc 01       	movw	r30, r24
   4:	20 83       	st	Z, r18
   6:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

00000000 <__cxa_guard_abort>:
   0:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:
   0:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000099c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ce0  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__vector_16 00000094  00000000  00000000  000016b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.millis  00000024  00000000  00000000  00001744  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.micros  00000054  00000000  00000000  00001768  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.delay   0000004c  00000000  00000000  000017bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delayMicroseconds 00000014  00000000  00000000  00001808  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.init    00000076  00000000  00000000  0000181c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss.timer0_millis 00000004  00000000  00000000  00001892  2**0
                  ALLOC
 12 .bss.timer0_overflow_count 00000004  00000000  00000000  00001892  2**0
                  ALLOC
 13 .bss.timer0_fract 00000001  00000000  00000000  00001892  2**0
                  ALLOC
 14 .comment      00000012  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY

Disassembly of section .text.__vector_16:

00000000 <__vector_16>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	1f 92       	push	r1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
	sbi(TCCR0A, WGM00);
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
	sbi(TCCR0B, CS00);
  14:	bf 93       	push	r27
  16:	80 91 00 00 	lds	r24, 0x0000

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	90 91 00 00 	lds	r25, 0x0000
  1e:	a0 91 00 00 	lds	r26, 0x0000
  22:	b0 91 00 00 	lds	r27, 0x0000
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  26:	30 91 00 00 	lds	r19, 0x0000

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	23 2f       	mov	r18, r19
  2c:	2d 5f       	subi	r18, 0xFD	; 253
  2e:	2d 37       	cpi	r18, 0x7D	; 125
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	00 f4       	brcc	.+0      	; 0x32 <__vector_16+0x32>
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	a1 1d       	adc	r26, r1
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	b1 1d       	adc	r27, r1
  38:	00 c0       	rjmp	.+0      	; 0x3a <__vector_16+0x3a>
  3a:	23 2f       	mov	r18, r19
  3c:	2a 57       	subi	r18, 0x7A	; 122
  3e:	02 96       	adiw	r24, 0x02	; 2

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	a1 1d       	adc	r26, r1
  42:	b1 1d       	adc	r27, r1
  44:	20 93 00 00 	sts	0x0000, r18
  48:	80 93 00 00 	sts	0x0000, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4c:	90 93 00 00 	sts	0x0000, r25
  50:	a0 93 00 00 	sts	0x0000, r26
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  54:	b0 93 00 00 	sts	0x0000, r27
  58:	80 91 00 00 	lds	r24, 0x0000
  5c:	90 91 00 00 	lds	r25, 0x0000
	sbi(ADCSRA, ADPS1);
  60:	a0 91 00 00 	lds	r26, 0x0000
	sbi(ADCSRA, ADPS0);
  64:	b0 91 00 00 	lds	r27, 0x0000
  68:	01 96       	adiw	r24, 0x01	; 1

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  6a:	a1 1d       	adc	r26, r1
  6c:	b1 1d       	adc	r27, r1
  6e:	80 93 00 00 	sts	0x0000, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  72:	90 93 00 00 	sts	0x0000, r25
  76:	a0 93 00 00 	sts	0x0000, r26
  7a:	b0 93 00 00 	sts	0x0000, r27
  7e:	bf 91       	pop	r27
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	3f 91       	pop	r19
  88:	2f 91       	pop	r18
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

Disassembly of section .text.millis:

00000000 <millis>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	0f 93       	push	r16
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	1f 93       	push	r17
   4:	8f b7       	in	r24, 0x3f	; 63
   6:	f8 94       	cli
	sbi(TCCR0A, WGM00);
   8:	00 91 00 00 	lds	r16, 0x0000
   c:	10 91 00 00 	lds	r17, 0x0000
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
  10:	20 91 00 00 	lds	r18, 0x0000
	sbi(TCCR0B, CS00);
  14:	30 91 00 00 	lds	r19, 0x0000
  18:	8f bf       	out	0x3f, r24	; 63

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	b8 01       	movw	r22, r16
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text.micros:

00000000 <micros>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	0f 93       	push	r16
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	1f 93       	push	r17
   4:	9f b7       	in	r25, 0x3f	; 63
   6:	f8 94       	cli
	sbi(TCCR0A, WGM00);
   8:	00 91 00 00 	lds	r16, 0x0000
   c:	10 91 00 00 	lds	r17, 0x0000
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
  10:	20 91 00 00 	lds	r18, 0x0000
	sbi(TCCR0B, CS00);
  14:	30 91 00 00 	lds	r19, 0x0000
  18:	86 b5       	in	r24, 0x26	; 38

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	a8 9b       	sbis	0x15, 0	; 21
  1c:	00 c0       	rjmp	.+0      	; 0x1e <micros+0x1e>
  1e:	8f 3f       	cpi	r24, 0xFF	; 255
  20:	01 f0       	breq	.+0      	; 0x22 <micros+0x22>
  22:	0f 5f       	subi	r16, 0xFF	; 255
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	2f 4f       	sbci	r18, 0xFF	; 255
  28:	3f 4f       	sbci	r19, 0xFF	; 255

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	9f bf       	out	0x3f, r25	; 63
  2c:	32 2f       	mov	r19, r18
  2e:	21 2f       	mov	r18, r17
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	10 2f       	mov	r17, r16
  32:	00 27       	eor	r16, r16
  34:	08 0f       	add	r16, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	11 1d       	adc	r17, r1
  38:	21 1d       	adc	r18, r1
  3a:	31 1d       	adc	r19, r1
  3c:	42 e0       	ldi	r20, 0x02	; 2
  3e:	00 0f       	add	r16, r16

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	11 1f       	adc	r17, r17
  42:	22 1f       	adc	r18, r18
  44:	33 1f       	adc	r19, r19
  46:	4a 95       	dec	r20
  48:	01 f4       	brne	.+0      	; 0x4a <micros+0x4a>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	b8 01       	movw	r22, r16
  4c:	c9 01       	movw	r24, r18
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	08 95       	ret

Disassembly of section .text.delay:

00000000 <delay>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	cf 92       	push	r12
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
	sbi(TCCR0A, WGM00);
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	6b 01       	movw	r12, r22
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	7c 01       	movw	r14, r24
  10:	0e 94 00 00 	call	0	; 0x0 <delay>
	sbi(TCCR0B, CS00);
  14:	eb 01       	movw	r28, r22
  16:	00 c0       	rjmp	.+0      	; 0x18 <delay+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <delay>

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1c:	6c 1b       	sub	r22, r28
  1e:	7d 0b       	sbc	r23, r29
  20:	68 3e       	cpi	r22, 0xE8	; 232
  22:	73 40       	sbci	r23, 0x03	; 3
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	00 f0       	brcs	.+0      	; 0x26 <delay+0x26>
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	c8 1a       	sub	r12, r24

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	d1 08       	sbc	r13, r1
  2c:	e1 08       	sbc	r14, r1
  2e:	f1 08       	sbc	r15, r1
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	c8 51       	subi	r28, 0x18	; 24
  32:	dc 4f       	sbci	r29, 0xFC	; 252
  34:	c1 14       	cp	r12, r1
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	d1 04       	cpc	r13, r1
  38:	e1 04       	cpc	r14, r1
  3a:	f1 04       	cpc	r15, r1
  3c:	01 f4       	brne	.+0      	; 0x3e <delay+0x3e>
  3e:	df 91       	pop	r29

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	cf 91       	pop	r28
  42:	ff 90       	pop	r15
  44:	ef 90       	pop	r14
  46:	df 90       	pop	r13
  48:	cf 90       	pop	r12

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

00000000 <delayMicroseconds>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	01 97       	sbiw	r24, 0x01	; 1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	01 f0       	breq	.+0      	; 0x4 <delayMicroseconds+0x4>
   4:	88 0f       	add	r24, r24
   6:	99 1f       	adc	r25, r25
	sbi(TCCR0A, WGM00);
   8:	88 0f       	add	r24, r24
   a:	99 1f       	adc	r25, r25
   c:	02 97       	sbiw	r24, 0x02	; 2
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	01 97       	sbiw	r24, 0x01	; 1
  10:	01 f4       	brne	.+0      	; 0x12 <delayMicroseconds+0x12>
  12:	08 95       	ret

Disassembly of section .text.init:

00000000 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	84 b5       	in	r24, 0x24	; 36
   4:	82 60       	ori	r24, 0x02	; 2
   6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
   8:	84 b5       	in	r24, 0x24	; 36
   a:	81 60       	ori	r24, 0x01	; 1
   c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	85 b5       	in	r24, 0x25	; 37
  10:	82 60       	ori	r24, 0x02	; 2
  12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
  14:	85 b5       	in	r24, 0x25	; 37
  16:	81 60       	ori	r24, 0x01	; 1
  18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	ee e6       	ldi	r30, 0x6E	; 110
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 81       	ld	r24, Z
  20:	81 60       	ori	r24, 0x01	; 1
  22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	e1 e8       	ldi	r30, 0x81	; 129
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	80 81       	ld	r24, Z
  2c:	82 60       	ori	r24, 0x02	; 2
  2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	80 81       	ld	r24, Z
  32:	81 60       	ori	r24, 0x01	; 1
  34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	e0 e8       	ldi	r30, 0x80	; 128
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	e1 eb       	ldi	r30, 0xB1	; 177
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	80 81       	ld	r24, Z
  46:	84 60       	ori	r24, 0x04	; 4
  48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	e0 eb       	ldi	r30, 0xB0	; 176
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	81 60       	ori	r24, 0x01	; 1
  52:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  54:	ea e7       	ldi	r30, 0x7A	; 122
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
  5e:	80 81       	ld	r24, Z
  60:	82 60       	ori	r24, 0x02	; 2
  62:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
  64:	80 81       	ld	r24, Z
  66:	81 60       	ori	r24, 0x01	; 1
  68:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  6a:	80 81       	ld	r24, Z
  6c:	80 68       	ori	r24, 0x80	; 128
  6e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  70:	10 92 c1 00 	sts	0x00C1, r1
  74:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c79  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.analogReference 00000006  00000000  00000000  00001475  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.analogRead 00000042  00000000  00000000  0000147b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogWrite 000000c2  00000000  00000000  000014bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.analog_reference 00000001  00000000  00000000  0000157f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000012  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY

Disassembly of section .text.analogReference:

00000000 <analogReference>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	80 93 00 00 	sts	0x0000, r24
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000000 <analogRead>:
   0:	8e 30       	cpi	r24, 0x0E	; 14
   2:	00 f0       	brcs	.+0      	; 0x4 <analogRead+0x4>
   4:	8e 50       	subi	r24, 0x0E	; 14
   6:	87 70       	andi	r24, 0x07	; 7
   8:	20 91 00 00 	lds	r18, 0x0000
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   c:	40 e4       	ldi	r20, 0x40	; 64
   e:	24 9f       	mul	r18, r20
	if (val == 0)
  10:	90 01       	movw	r18, r0
  12:	11 24       	eor	r1, r1
	{
		digitalWrite(pin, LOW);
  14:	82 2b       	or	r24, r18
  16:	80 93 7c 00 	sts	0x007C, r24
	}
	else if (val == 255)
  1a:	80 91 7a 00 	lds	r24, 0x007A
	{
		digitalWrite(pin, HIGH);
  1e:	80 64       	ori	r24, 0x40	; 64
  20:	80 93 7a 00 	sts	0x007A, r24
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
  24:	80 91 7a 00 	lds	r24, 0x007A
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
  28:	86 fd       	sbrc	r24, 6
  2a:	00 c0       	rjmp	.+0      	; 0x2c <analogRead+0x2c>
	}
	else
	{
		switch(digitalPinToTimer(pin))
  2c:	20 91 78 00 	lds	r18, 0x0078
  30:	30 91 79 00 	lds	r19, 0x0079
  34:	93 2f       	mov	r25, r19
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	ac 01       	movw	r20, r24
  3a:	42 2b       	or	r20, r18
  3c:	9a 01       	movw	r18, r20
  3e:	c9 01       	movw	r24, r18
  40:	08 95       	ret

Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	18 2f       	mov	r17, r24
   8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
	if (val == 0)
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <analogWrite+0x14>
	{
		digitalWrite(pin, LOW);
  14:	60 e0       	ldi	r22, 0x00	; 0
  16:	00 c0       	rjmp	.+0      	; 0x18 <analogWrite+0x18>
	}
	else if (val == 255)
  18:	cf 3f       	cpi	r28, 0xFF	; 255
  1a:	d1 05       	cpc	r29, r1
  1c:	01 f4       	brne	.+0      	; 0x1e <analogWrite+0x1e>
	{
		digitalWrite(pin, HIGH);
  1e:	61 e0       	ldi	r22, 0x01	; 1
  20:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
  28:	0c 94 00 00 	jmp	0	; 0x0 <analogWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
  2c:	e1 2f       	mov	r30, r17
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	e0 50       	subi	r30, 0x00	; 0
  32:	f0 40       	sbci	r31, 0x00	; 0
  34:	e4 91       	lpm	r30, Z+
  36:	e3 30       	cpi	r30, 0x03	; 3
  38:	01 f0       	breq	.+0      	; 0x3a <analogWrite+0x3a>
  3a:	00 f4       	brcc	.+0      	; 0x3c <analogWrite+0x3c>
  3c:	e1 30       	cpi	r30, 0x01	; 1
  3e:	01 f0       	breq	.+0      	; 0x40 <analogWrite+0x40>
  40:	e2 30       	cpi	r30, 0x02	; 2
  42:	01 f4       	brne	.+0      	; 0x44 <analogWrite+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <analogWrite+0x46>
  46:	e6 30       	cpi	r30, 0x06	; 6
  48:	01 f0       	breq	.+0      	; 0x4a <analogWrite+0x4a>
  4a:	e7 30       	cpi	r30, 0x07	; 7
  4c:	01 f0       	breq	.+0      	; 0x4e <analogWrite+0x4e>
  4e:	e4 30       	cpi	r30, 0x04	; 4
  50:	01 f4       	brne	.+0      	; 0x52 <analogWrite+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <analogWrite+0x54>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  54:	84 b5       	in	r24, 0x24	; 36
  56:	80 68       	ori	r24, 0x80	; 128
  58:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
  5a:	c7 bd       	out	0x27, r28	; 39
				break;
  5c:	00 c0       	rjmp	.+0      	; 0x5e <analogWrite+0x5e>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  5e:	84 b5       	in	r24, 0x24	; 36
  60:	80 62       	ori	r24, 0x20	; 32
  62:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
  64:	c8 bd       	out	0x28, r28	; 40
				break;
  66:	00 c0       	rjmp	.+0      	; 0x68 <analogWrite+0x68>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  68:	80 91 80 00 	lds	r24, 0x0080
  6c:	80 68       	ori	r24, 0x80	; 128
  6e:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
  72:	d0 93 89 00 	sts	0x0089, r29
  76:	c0 93 88 00 	sts	0x0088, r28
				break;
  7a:	00 c0       	rjmp	.+0      	; 0x7c <analogWrite+0x7c>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  7c:	80 91 80 00 	lds	r24, 0x0080
  80:	80 62       	ori	r24, 0x20	; 32
  82:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
  86:	d0 93 8b 00 	sts	0x008B, r29
  8a:	c0 93 8a 00 	sts	0x008A, r28
				break;
  8e:	00 c0       	rjmp	.+0      	; 0x90 <analogWrite+0x90>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  90:	80 91 b0 00 	lds	r24, 0x00B0
  94:	80 68       	ori	r24, 0x80	; 128
  96:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
  9a:	c0 93 b3 00 	sts	0x00B3, r28
				break;
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <analogWrite+0xa0>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  a0:	80 91 b0 00 	lds	r24, 0x00B0
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
  aa:	c0 93 b4 00 	sts	0x00B4, r28
				break;
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <analogWrite+0xb0>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
  b0:	c0 38       	cpi	r28, 0x80	; 128
  b2:	d1 05       	cpc	r29, r1
  b4:	04 f0       	brlt	.+0      	; 0xb6 <analogWrite+0xb6>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <analogWrite+0xb8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <analogWrite+0xba>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000ab0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000e6c  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.turnOffPWM 00000054  00000000  00000000  00001950  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pinMode 00000070  00000000  00000000  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalWrite 0000006e  00000000  00000000  00001a14  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalRead 00000052  00000000  00000000  00001a82  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data.digital_pin_to_timer_PGM 00000014  00000000  00000000  00001ad4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .progmem.data.digital_pin_to_bit_mask_PGM 00000014  00000000  00000000  00001ae8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .progmem.data.digital_pin_to_port_PGM 00000014  00000000  00000000  00001afc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .progmem.data.port_to_input_PGM 0000000a  00000000  00000000  00001b10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .progmem.data.port_to_output_PGM 0000000a  00000000  00000000  00001b1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.data.port_to_mode_PGM 0000000a  00000000  00000000  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .comment      00000012  00000000  00000000  00001b2e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	83 30       	cpi	r24, 0x03	; 3
   2:	01 f0       	breq	.+0      	; 0x4 <turnOffPWM+0x4>
	uint8_t timer = digitalPinToTimer(pin);
   4:	00 f4       	brcc	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	81 30       	cpi	r24, 0x01	; 1
   8:	01 f0       	breq	.+0      	; 0xa <turnOffPWM+0xa>
   a:	82 30       	cpi	r24, 0x02	; 2
   c:	01 f4       	brne	.+0      	; 0xe <turnOffPWM+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <turnOffPWM+0x10>
	uint8_t bit = digitalPinToBitMask(pin);
  10:	86 30       	cpi	r24, 0x06	; 6
  12:	01 f0       	breq	.+0      	; 0x14 <turnOffPWM+0x14>
  14:	87 30       	cpi	r24, 0x07	; 7
  16:	01 f0       	breq	.+0      	; 0x18 <turnOffPWM+0x18>
	uint8_t port = digitalPinToPort(pin);
  18:	84 30       	cpi	r24, 0x04	; 4
  1a:	01 f4       	brne	.+0      	; 0x1c <turnOffPWM+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <turnOffPWM+0x1e>
  1e:	80 91 80 00 	lds	r24, 0x0080

	if (port == NOT_A_PIN) return LOW;
  22:	8f 77       	andi	r24, 0x7F	; 127

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	00 c0       	rjmp	.+0      	; 0x26 <turnOffPWM+0x26>
  26:	80 91 80 00 	lds	r24, 0x0080

	if (*portInputRegister(port) & bit) return HIGH;
  2a:	8f 7d       	andi	r24, 0xDF	; 223
  2c:	80 93 80 00 	sts	0x0080, r24
  30:	08 95       	ret
  32:	84 b5       	in	r24, 0x24	; 36
  34:	8f 77       	andi	r24, 0x7F	; 127
  36:	00 c0       	rjmp	.+0      	; 0x38 <turnOffPWM+0x38>
  38:	84 b5       	in	r24, 0x24	; 36
  3a:	8f 7d       	andi	r24, 0xDF	; 223
  3c:	84 bd       	out	0x24, r24	; 36
  3e:	08 95       	ret
  40:	80 91 b0 00 	lds	r24, 0x00B0
  44:	8f 77       	andi	r24, 0x7F	; 127
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  46:	00 c0       	rjmp	.+0      	; 0x48 <turnOffPWM+0x48>
  48:	80 91 b0 00 	lds	r24, 0x00B0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	8f 7d       	andi	r24, 0xDF	; 223
  4e:	80 93 b0 00 	sts	0x00B0, r24
  52:	08 95       	ret

Disassembly of section .text.pinMode:

00000000 <pinMode>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	fc 01       	movw	r30, r24
   8:	e0 50       	subi	r30, 0x00	; 0
   a:	f0 40       	sbci	r31, 0x00	; 0
   c:	44 91       	lpm	r20, Z+
   e:	fc 01       	movw	r30, r24
	uint8_t bit = digitalPinToBitMask(pin);
  10:	e0 50       	subi	r30, 0x00	; 0
  12:	f0 40       	sbci	r31, 0x00	; 0
  14:	84 91       	lpm	r24, Z+
  16:	88 23       	and	r24, r24
	uint8_t port = digitalPinToPort(pin);
  18:	01 f0       	breq	.+0      	; 0x1a <pinMode+0x1a>
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	88 0f       	add	r24, r24
  1e:	99 1f       	adc	r25, r25

	if (port == NOT_A_PIN) return LOW;
  20:	fc 01       	movw	r30, r24
  22:	e0 50       	subi	r30, 0x00	; 0

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	25 91       	lpm	r18, Z+
  28:	34 91       	lpm	r19, Z+

	if (*portInputRegister(port) & bit) return HIGH;
  2a:	d9 01       	movw	r26, r18
  2c:	80 50       	subi	r24, 0x00	; 0
  2e:	90 40       	sbci	r25, 0x00	; 0
  30:	fc 01       	movw	r30, r24
  32:	85 91       	lpm	r24, Z+
  34:	94 91       	lpm	r25, Z+
  36:	c8 2f       	mov	r28, r24
  38:	d9 2f       	mov	r29, r25
  3a:	9f b7       	in	r25, 0x3f	; 63
  3c:	f8 94       	cli
  3e:	8c 91       	ld	r24, X
  40:	61 11       	cpse	r22, r1
  42:	00 c0       	rjmp	.+0      	; 0x44 <pinMode+0x44>
  44:	40 95       	com	r20
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  46:	84 23       	and	r24, r20
  48:	8c 93       	st	X, r24
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4a:	88 81       	ld	r24, Y
  4c:	84 23       	and	r24, r20
  4e:	00 c0       	rjmp	.+0      	; 0x50 <pinMode+0x50>
  50:	62 30       	cpi	r22, 0x02	; 2
  52:	01 f4       	brne	.+0      	; 0x54 <pinMode+0x54>
  54:	24 2f       	mov	r18, r20
  56:	20 95       	com	r18
  58:	82 23       	and	r24, r18
  5a:	8c 93       	st	X, r24
  5c:	88 81       	ld	r24, Y
  5e:	84 2b       	or	r24, r20
  60:	88 83       	st	Y, r24
  62:	00 c0       	rjmp	.+0      	; 0x64 <pinMode+0x64>
  64:	84 2b       	or	r24, r20
  66:	8c 93       	st	X, r24
  68:	9f bf       	out	0x3f, r25	; 63
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	1f 92       	push	r1
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	28 2f       	mov	r18, r24
	uint8_t bit = digitalPinToBitMask(pin);
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	f9 01       	movw	r30, r18
  14:	e0 50       	subi	r30, 0x00	; 0
  16:	f0 40       	sbci	r31, 0x00	; 0
	uint8_t port = digitalPinToPort(pin);
  18:	84 91       	lpm	r24, Z+
  1a:	f9 01       	movw	r30, r18
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0

	if (port == NOT_A_PIN) return LOW;
  20:	14 91       	lpm	r17, Z+
  22:	f9 01       	movw	r30, r18

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	e0 50       	subi	r30, 0x00	; 0
  26:	f0 40       	sbci	r31, 0x00	; 0
  28:	04 91       	lpm	r16, Z+

	if (*portInputRegister(port) & bit) return HIGH;
  2a:	00 23       	and	r16, r16
  2c:	01 f0       	breq	.+0      	; 0x2e <digitalWrite+0x2e>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <digitalWrite+0x32>
  32:	69 83       	std	Y+1, r22	; 0x01
  34:	0e 94 00 00 	call	0	; 0x0 <digitalWrite>
  38:	69 81       	ldd	r22, Y+1	; 0x01
  3a:	e0 2f       	mov	r30, r16
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	ee 0f       	add	r30, r30
  40:	ff 1f       	adc	r31, r31
  42:	e0 50       	subi	r30, 0x00	; 0
  44:	f0 40       	sbci	r31, 0x00	; 0
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  46:	85 91       	lpm	r24, Z+
  48:	94 91       	lpm	r25, Z+
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4a:	dc 01       	movw	r26, r24
  4c:	9f b7       	in	r25, 0x3f	; 63
  4e:	f8 94       	cli
  50:	8c 91       	ld	r24, X
  52:	61 11       	cpse	r22, r1
  54:	00 c0       	rjmp	.+0      	; 0x56 <digitalWrite+0x56>
  56:	10 95       	com	r17
  58:	81 23       	and	r24, r17
  5a:	00 c0       	rjmp	.+0      	; 0x5c <digitalWrite+0x5c>
  5c:	81 2b       	or	r24, r17
  5e:	8c 93       	st	X, r24
  60:	9f bf       	out	0x3f, r25	; 63
  62:	0f 90       	pop	r0
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	08 95       	ret

Disassembly of section .text.digitalRead:

00000000 <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
   4:	28 2f       	mov	r18, r24
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	f9 01       	movw	r30, r18
   a:	e0 50       	subi	r30, 0x00	; 0
   c:	f0 40       	sbci	r31, 0x00	; 0
   e:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
  10:	f9 01       	movw	r30, r18
  12:	e0 50       	subi	r30, 0x00	; 0
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	d4 91       	lpm	r29, Z+
	uint8_t port = digitalPinToPort(pin);
  18:	f9 01       	movw	r30, r18
  1a:	e0 50       	subi	r30, 0x00	; 0
  1c:	f0 40       	sbci	r31, 0x00	; 0
  1e:	c4 91       	lpm	r28, Z+

	if (port == NOT_A_PIN) return LOW;
  20:	cc 23       	and	r28, r28
  22:	01 f0       	breq	.+0      	; 0x24 <digitalRead+0x24>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	81 11       	cpse	r24, r1
  26:	0e 94 00 00 	call	0	; 0x0 <digitalRead>

	if (*portInputRegister(port) & bit) return HIGH;
  2a:	ec 2f       	mov	r30, r28
  2c:	f0 e0       	ldi	r31, 0x00	; 0
  2e:	ee 0f       	add	r30, r30
  30:	ff 1f       	adc	r31, r31
  32:	e0 50       	subi	r30, 0x00	; 0
  34:	f0 40       	sbci	r31, 0x00	; 0
  36:	85 91       	lpm	r24, Z+
  38:	94 91       	lpm	r25, Z+
  3a:	dc 01       	movw	r26, r24
  3c:	8c 91       	ld	r24, X
  3e:	8d 23       	and	r24, r29
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	01 f4       	brne	.+0      	; 0x46 <digitalRead+0x46>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4a:	c9 01       	movw	r24, r18
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006a8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c61  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pulseIn 0000012a  00000000  00000000  0000133d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000012  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	fc 01       	movw	r30, r24
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	d4 91       	lpm	r29, Z+
	uint8_t port = digitalPinToPort(pin);
  22:	fc 01       	movw	r30, r24
  24:	e0 50       	subi	r30, 0x00	; 0
  26:	f0 40       	sbci	r31, 0x00	; 0
  28:	74 91       	lpm	r23, Z+
	uint8_t stateMask = (state ? bit : 0);
  2a:	61 11       	cpse	r22, r1
  2c:	00 c0       	rjmp	.+0      	; 0x2e <pulseIn+0x2e>
  2e:	c0 e0       	ldi	r28, 0x00	; 0
  30:	00 c0       	rjmp	.+0      	; 0x32 <pulseIn+0x32>
  32:	cd 2f       	mov	r28, r29
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  34:	da 01       	movw	r26, r20
  36:	c9 01       	movw	r24, r18
  38:	bf 70       	andi	r27, 0x0F	; 15
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  3a:	67 2f       	mov	r22, r23
  3c:	70 e0       	ldi	r23, 0x00	; 0
  3e:	66 0f       	add	r22, r22
  40:	77 1f       	adc	r23, r23
  42:	60 50       	subi	r22, 0x00	; 0
  44:	70 40       	sbci	r23, 0x00	; 0
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  46:	81 2c       	mov	r8, r1
  48:	91 2c       	mov	r9, r1
  4a:	54 01       	movw	r10, r8
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  4c:	fb 01       	movw	r30, r22
  4e:	05 91       	lpm	r16, Z+
  50:	14 91       	lpm	r17, Z+
  52:	00 c0       	rjmp	.+0      	; 0x54 <pulseIn+0x54>
		if (numloops++ == maxloops)
  54:	c1 2c       	mov	r12, r1
  56:	d1 2c       	mov	r13, r1
  58:	76 01       	movw	r14, r12
  5a:	c3 94       	inc	r12
  5c:	c8 0c       	add	r12, r8
  5e:	d9 1c       	adc	r13, r9
  60:	ea 1c       	adc	r14, r10
  62:	fb 1c       	adc	r15, r11
  64:	88 16       	cp	r8, r24
  66:	99 06       	cpc	r9, r25
  68:	aa 06       	cpc	r10, r26
  6a:	bb 06       	cpc	r11, r27
  6c:	01 f4       	brne	.+0      	; 0x6e <pulseIn+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <pulseIn+0x70>
  70:	46 01       	movw	r8, r12
  72:	57 01       	movw	r10, r14
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  74:	f8 01       	movw	r30, r16
  76:	e0 81       	ld	r30, Z
  78:	ed 23       	and	r30, r29
  7a:	ec 17       	cp	r30, r28
  7c:	01 f0       	breq	.+0      	; 0x7e <pulseIn+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <pulseIn+0x80>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  80:	c1 2c       	mov	r12, r1
  82:	d1 2c       	mov	r13, r1
  84:	76 01       	movw	r14, r12
  86:	c3 94       	inc	r12
  88:	c8 0c       	add	r12, r8
  8a:	d9 1c       	adc	r13, r9
  8c:	ea 1c       	adc	r14, r10
  8e:	fb 1c       	adc	r15, r11
  90:	88 16       	cp	r8, r24
  92:	99 06       	cpc	r9, r25
  94:	aa 06       	cpc	r10, r26
  96:	bb 06       	cpc	r11, r27
  98:	01 f0       	breq	.+0      	; 0x9a <pulseIn+0x9a>
  9a:	46 01       	movw	r8, r12
  9c:	57 01       	movw	r10, r14
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <pulseIn+0xa0>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  a0:	fb 01       	movw	r30, r22
  a2:	05 91       	lpm	r16, Z+
  a4:	14 91       	lpm	r17, Z+
  a6:	f8 01       	movw	r30, r16
  a8:	e0 81       	ld	r30, Z
  aa:	ed 23       	and	r30, r29
  ac:	ec 13       	cpse	r30, r28
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <pulseIn+0xb0>

/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
  b0:	88 19       	sub	r24, r8
  b2:	99 09       	sbc	r25, r9
  b4:	aa 09       	sbc	r26, r10
  b6:	bb 09       	sbc	r27, r11
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	a9 01       	movw	r20, r18
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  be:	fb 01       	movw	r30, r22
  c0:	65 91       	lpm	r22, Z+
  c2:	74 91       	lpm	r23, Z+
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <pulseIn+0xc6>
		if (numloops++ == maxloops)
  c6:	28 17       	cp	r18, r24
  c8:	39 07       	cpc	r19, r25
  ca:	4a 07       	cpc	r20, r26
  cc:	5b 07       	cpc	r21, r27
  ce:	01 f0       	breq	.+0      	; 0xd0 <pulseIn+0xd0>
			return 0;
		width++;
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	4f 4f       	sbci	r20, 0xFF	; 255
  d6:	5f 4f       	sbci	r21, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  d8:	fb 01       	movw	r30, r22
  da:	e0 81       	ld	r30, Z
  dc:	ed 23       	and	r30, r29
  de:	ec 17       	cp	r30, r28
  e0:	01 f0       	breq	.+0      	; 0xe2 <pulseIn+0xe2>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  e2:	a5 e1       	ldi	r26, 0x15	; 21
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  ea:	8b 01       	movw	r16, r22
  ec:	9c 01       	movw	r18, r24
  ee:	00 5f       	subi	r16, 0xF0	; 240
  f0:	1f 4f       	sbci	r17, 0xFF	; 255
  f2:	2f 4f       	sbci	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	36 95       	lsr	r19
  fa:	27 95       	ror	r18
  fc:	17 95       	ror	r17
  fe:	07 95       	ror	r16
 100:	8a 95       	dec	r24
 102:	01 f4       	brne	.+0      	; 0x104 <pulseIn+0x104>
 104:	00 c0       	rjmp	.+0      	; 0x106 <pulseIn+0x106>
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	98 01       	movw	r18, r16
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
 10c:	b8 01       	movw	r22, r16
 10e:	c9 01       	movw	r24, r18
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	ef 90       	pop	r14
 11c:	df 90       	pop	r13
 11e:	cf 90       	pop	r12
 120:	bf 90       	pop	r11
 122:	af 90       	pop	r10
 124:	9f 90       	pop	r9
 126:	8f 90       	pop	r8
 128:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006c0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c73  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.shiftIn 0000006a  00000000  00000000  00001367  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.shiftOut 0000007e  00000000  00000000  000013d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000012  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	d8 2e       	mov	r13, r24
  12:	e6 2e       	mov	r14, r22
  14:	c4 2e       	mov	r12, r20
  16:	c7 e0       	ldi	r28, 0x07	; 7
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	f1 2c       	mov	r15, r1
  1c:	07 e0       	ldi	r16, 0x07	; 7
  1e:	10 e0       	ldi	r17, 0x00	; 0
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  20:	61 e0       	ldi	r22, 0x01	; 1
  22:	8e 2d       	mov	r24, r14
  24:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  28:	8d 2d       	mov	r24, r13
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  2a:	c1 10       	cpse	r12, r1
  2c:	00 c0       	rjmp	.+0      	; 0x2e <shiftIn+0x2e>
  2e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  32:	98 01       	movw	r18, r16
  34:	2c 1b       	sub	r18, r28
  36:	3d 0b       	sbc	r19, r29
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftIn+0x3a>
  3a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  3e:	2c 2f       	mov	r18, r28
  40:	00 c0       	rjmp	.+0      	; 0x42 <shiftIn+0x42>
  42:	88 0f       	add	r24, r24
  44:	2a 95       	dec	r18
  46:	02 f4       	brpl	.+0      	; 0x48 <shiftIn+0x48>
  48:	f8 2a       	or	r15, r24
  4a:	60 e0       	ldi	r22, 0x00	; 0
  4c:	8e 2d       	mov	r24, r14
  4e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  52:	21 97       	sbiw	r28, 0x01	; 1
  54:	00 f4       	brcc	.+0      	; 0x56 <shiftIn+0x56>
			
		digitalWrite(clockPin, HIGH);
  56:	8f 2d       	mov	r24, r15
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
		digitalWrite(clockPin, LOW);		
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	df 90       	pop	r13
  66:	cf 90       	pop	r12
  68:	08 95       	ret

Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	c8 2e       	mov	r12, r24
  14:	d6 2e       	mov	r13, r22
  16:	b4 2e       	mov	r11, r20
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	02 2f       	mov	r16, r18
  1e:	10 e0       	ldi	r17, 0x00	; 0
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  20:	87 e0       	ldi	r24, 0x07	; 7
  22:	e8 2e       	mov	r14, r24
  24:	f1 2c       	mov	r15, r1
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  26:	b1 10       	cpse	r11, r1
  28:	00 c0       	rjmp	.+0      	; 0x2a <shiftOut+0x2a>
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  2a:	f7 01       	movw	r30, r14
  2c:	ec 1b       	sub	r30, r28
  2e:	fd 0b       	sbc	r31, r29
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  30:	b8 01       	movw	r22, r16
  32:	00 c0       	rjmp	.+0      	; 0x34 <shiftOut+0x34>
  34:	75 95       	asr	r23
  36:	67 95       	ror	r22
  38:	ea 95       	dec	r30
  3a:	02 f4       	brpl	.+0      	; 0x3c <shiftOut+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <shiftOut+0x3e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  3e:	b8 01       	movw	r22, r16
  40:	0c 2e       	mov	r0, r28
  42:	00 c0       	rjmp	.+0      	; 0x44 <shiftOut+0x44>
  44:	75 95       	asr	r23
  46:	67 95       	ror	r22
  48:	0a 94       	dec	r0
  4a:	02 f4       	brpl	.+0      	; 0x4c <shiftOut+0x4c>
  4c:	61 70       	andi	r22, 0x01	; 1
  4e:	77 27       	eor	r23, r23
  50:	8c 2d       	mov	r24, r12
  52:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
			
		digitalWrite(clockPin, HIGH);
  56:	61 e0       	ldi	r22, 0x01	; 1
  58:	8d 2d       	mov	r24, r13
  5a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
		digitalWrite(clockPin, LOW);		
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	8d 2d       	mov	r24, r13
  62:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  66:	21 97       	sbiw	r28, 0x01	; 1
  68:	00 f4       	brcc	.+0      	; 0x6a <shiftOut+0x6a>
	}
}
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	df 90       	pop	r13
  78:	cf 90       	pop	r12
  7a:	bf 90       	pop	r11
  7c:	08 95       	ret
